// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteFortressReader.proto

package com.dfhack.protobuf.RemoteFortressReader;

public final class RemoteFortressReader {
  private RemoteFortressReader() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeShape}
   *
   * <pre>
   *We use shapes, etc, because the actual tiletypes may differ between DF versions.
   * </pre>
   */
  public enum TiletypeShape
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_SHAPE = -1;</code>
     */
    NO_SHAPE(0, -1),
    /**
     * <code>EMPTY = 0;</code>
     */
    EMPTY(1, 0),
    /**
     * <code>FLOOR = 1;</code>
     */
    FLOOR(2, 1),
    /**
     * <code>BOULDER = 2;</code>
     */
    BOULDER(3, 2),
    /**
     * <code>PEBBLES = 3;</code>
     */
    PEBBLES(4, 3),
    /**
     * <code>WALL = 4;</code>
     */
    WALL(5, 4),
    /**
     * <code>FORTIFICATION = 5;</code>
     */
    FORTIFICATION(6, 5),
    /**
     * <code>STAIR_UP = 6;</code>
     */
    STAIR_UP(7, 6),
    /**
     * <code>STAIR_DOWN = 7;</code>
     */
    STAIR_DOWN(8, 7),
    /**
     * <code>STAIR_UPDOWN = 8;</code>
     */
    STAIR_UPDOWN(9, 8),
    /**
     * <code>RAMP = 9;</code>
     */
    RAMP(10, 9),
    /**
     * <code>RAMP_TOP = 10;</code>
     */
    RAMP_TOP(11, 10),
    /**
     * <code>BROOK_BED = 11;</code>
     */
    BROOK_BED(12, 11),
    /**
     * <code>BROOK_TOP = 12;</code>
     */
    BROOK_TOP(13, 12),
    /**
     * <code>TREE_SHAPE = 13;</code>
     */
    TREE_SHAPE(14, 13),
    /**
     * <code>SAPLING = 14;</code>
     */
    SAPLING(15, 14),
    /**
     * <code>SHRUB = 15;</code>
     */
    SHRUB(16, 15),
    /**
     * <code>ENDLESS_PIT = 16;</code>
     */
    ENDLESS_PIT(17, 16),
    /**
     * <code>BRANCH = 17;</code>
     */
    BRANCH(18, 17),
    /**
     * <code>TRUNK_BRANCH = 18;</code>
     */
    TRUNK_BRANCH(19, 18),
    /**
     * <code>TWIG = 19;</code>
     */
    TWIG(20, 19),
    ;

    /**
     * <code>NO_SHAPE = -1;</code>
     */
    public static final int NO_SHAPE_VALUE = -1;
    /**
     * <code>EMPTY = 0;</code>
     */
    public static final int EMPTY_VALUE = 0;
    /**
     * <code>FLOOR = 1;</code>
     */
    public static final int FLOOR_VALUE = 1;
    /**
     * <code>BOULDER = 2;</code>
     */
    public static final int BOULDER_VALUE = 2;
    /**
     * <code>PEBBLES = 3;</code>
     */
    public static final int PEBBLES_VALUE = 3;
    /**
     * <code>WALL = 4;</code>
     */
    public static final int WALL_VALUE = 4;
    /**
     * <code>FORTIFICATION = 5;</code>
     */
    public static final int FORTIFICATION_VALUE = 5;
    /**
     * <code>STAIR_UP = 6;</code>
     */
    public static final int STAIR_UP_VALUE = 6;
    /**
     * <code>STAIR_DOWN = 7;</code>
     */
    public static final int STAIR_DOWN_VALUE = 7;
    /**
     * <code>STAIR_UPDOWN = 8;</code>
     */
    public static final int STAIR_UPDOWN_VALUE = 8;
    /**
     * <code>RAMP = 9;</code>
     */
    public static final int RAMP_VALUE = 9;
    /**
     * <code>RAMP_TOP = 10;</code>
     */
    public static final int RAMP_TOP_VALUE = 10;
    /**
     * <code>BROOK_BED = 11;</code>
     */
    public static final int BROOK_BED_VALUE = 11;
    /**
     * <code>BROOK_TOP = 12;</code>
     */
    public static final int BROOK_TOP_VALUE = 12;
    /**
     * <code>TREE_SHAPE = 13;</code>
     */
    public static final int TREE_SHAPE_VALUE = 13;
    /**
     * <code>SAPLING = 14;</code>
     */
    public static final int SAPLING_VALUE = 14;
    /**
     * <code>SHRUB = 15;</code>
     */
    public static final int SHRUB_VALUE = 15;
    /**
     * <code>ENDLESS_PIT = 16;</code>
     */
    public static final int ENDLESS_PIT_VALUE = 16;
    /**
     * <code>BRANCH = 17;</code>
     */
    public static final int BRANCH_VALUE = 17;
    /**
     * <code>TRUNK_BRANCH = 18;</code>
     */
    public static final int TRUNK_BRANCH_VALUE = 18;
    /**
     * <code>TWIG = 19;</code>
     */
    public static final int TWIG_VALUE = 19;


    public final int getNumber() { return value; }

    public static TiletypeShape valueOf(int value) {
      switch (value) {
        case -1: return NO_SHAPE;
        case 0: return EMPTY;
        case 1: return FLOOR;
        case 2: return BOULDER;
        case 3: return PEBBLES;
        case 4: return WALL;
        case 5: return FORTIFICATION;
        case 6: return STAIR_UP;
        case 7: return STAIR_DOWN;
        case 8: return STAIR_UPDOWN;
        case 9: return RAMP;
        case 10: return RAMP_TOP;
        case 11: return BROOK_BED;
        case 12: return BROOK_TOP;
        case 13: return TREE_SHAPE;
        case 14: return SAPLING;
        case 15: return SHRUB;
        case 16: return ENDLESS_PIT;
        case 17: return BRANCH;
        case 18: return TRUNK_BRANCH;
        case 19: return TWIG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TiletypeShape>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TiletypeShape>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TiletypeShape>() {
            public TiletypeShape findValueByNumber(int number) {
              return TiletypeShape.valueOf(number);
            }
          };

    private final int value;

    private TiletypeShape(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeShape)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial}
   */
  public enum TiletypeSpecial
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_SPECIAL = -1;</code>
     */
    NO_SPECIAL(0, -1),
    /**
     * <code>NORMAL = 0;</code>
     */
    NORMAL(1, 0),
    /**
     * <code>RIVER_SOURCE = 1;</code>
     */
    RIVER_SOURCE(2, 1),
    /**
     * <code>WATERFALL = 2;</code>
     */
    WATERFALL(3, 2),
    /**
     * <code>SMOOTH = 3;</code>
     */
    SMOOTH(4, 3),
    /**
     * <code>FURROWED = 4;</code>
     */
    FURROWED(5, 4),
    /**
     * <code>WET = 5;</code>
     */
    WET(6, 5),
    /**
     * <code>DEAD = 6;</code>
     */
    DEAD(7, 6),
    /**
     * <code>WORN_1 = 7;</code>
     */
    WORN_1(8, 7),
    /**
     * <code>WORN_2 = 8;</code>
     */
    WORN_2(9, 8),
    /**
     * <code>WORN_3 = 9;</code>
     */
    WORN_3(10, 9),
    /**
     * <code>TRACK = 10;</code>
     */
    TRACK(11, 10),
    /**
     * <code>SMOOTH_DEAD = 11;</code>
     */
    SMOOTH_DEAD(12, 11),
    ;

    /**
     * <code>NO_SPECIAL = -1;</code>
     */
    public static final int NO_SPECIAL_VALUE = -1;
    /**
     * <code>NORMAL = 0;</code>
     */
    public static final int NORMAL_VALUE = 0;
    /**
     * <code>RIVER_SOURCE = 1;</code>
     */
    public static final int RIVER_SOURCE_VALUE = 1;
    /**
     * <code>WATERFALL = 2;</code>
     */
    public static final int WATERFALL_VALUE = 2;
    /**
     * <code>SMOOTH = 3;</code>
     */
    public static final int SMOOTH_VALUE = 3;
    /**
     * <code>FURROWED = 4;</code>
     */
    public static final int FURROWED_VALUE = 4;
    /**
     * <code>WET = 5;</code>
     */
    public static final int WET_VALUE = 5;
    /**
     * <code>DEAD = 6;</code>
     */
    public static final int DEAD_VALUE = 6;
    /**
     * <code>WORN_1 = 7;</code>
     */
    public static final int WORN_1_VALUE = 7;
    /**
     * <code>WORN_2 = 8;</code>
     */
    public static final int WORN_2_VALUE = 8;
    /**
     * <code>WORN_3 = 9;</code>
     */
    public static final int WORN_3_VALUE = 9;
    /**
     * <code>TRACK = 10;</code>
     */
    public static final int TRACK_VALUE = 10;
    /**
     * <code>SMOOTH_DEAD = 11;</code>
     */
    public static final int SMOOTH_DEAD_VALUE = 11;


    public final int getNumber() { return value; }

    public static TiletypeSpecial valueOf(int value) {
      switch (value) {
        case -1: return NO_SPECIAL;
        case 0: return NORMAL;
        case 1: return RIVER_SOURCE;
        case 2: return WATERFALL;
        case 3: return SMOOTH;
        case 4: return FURROWED;
        case 5: return WET;
        case 6: return DEAD;
        case 7: return WORN_1;
        case 8: return WORN_2;
        case 9: return WORN_3;
        case 10: return TRACK;
        case 11: return SMOOTH_DEAD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TiletypeSpecial>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TiletypeSpecial>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TiletypeSpecial>() {
            public TiletypeSpecial findValueByNumber(int number) {
              return TiletypeSpecial.valueOf(number);
            }
          };

    private final int value;

    private TiletypeSpecial(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial}
   */
  public enum TiletypeMaterial
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_MATERIAL = -1;</code>
     */
    NO_MATERIAL(0, -1),
    /**
     * <code>AIR = 0;</code>
     */
    AIR(1, 0),
    /**
     * <code>SOIL = 1;</code>
     */
    SOIL(2, 1),
    /**
     * <code>STONE = 2;</code>
     */
    STONE(3, 2),
    /**
     * <code>FEATURE = 3;</code>
     */
    FEATURE(4, 3),
    /**
     * <code>LAVA_STONE = 4;</code>
     */
    LAVA_STONE(5, 4),
    /**
     * <code>MINERAL = 5;</code>
     */
    MINERAL(6, 5),
    /**
     * <code>FROZEN_LIQUID = 6;</code>
     */
    FROZEN_LIQUID(7, 6),
    /**
     * <code>CONSTRUCTION = 7;</code>
     */
    CONSTRUCTION(8, 7),
    /**
     * <code>GRASS_LIGHT = 8;</code>
     */
    GRASS_LIGHT(9, 8),
    /**
     * <code>GRASS_DARK = 9;</code>
     */
    GRASS_DARK(10, 9),
    /**
     * <code>GRASS_DRY = 10;</code>
     */
    GRASS_DRY(11, 10),
    /**
     * <code>GRASS_DEAD = 11;</code>
     */
    GRASS_DEAD(12, 11),
    /**
     * <code>PLANT = 12;</code>
     */
    PLANT(13, 12),
    /**
     * <code>HFS = 13;</code>
     */
    HFS(14, 13),
    /**
     * <code>CAMPFIRE = 14;</code>
     */
    CAMPFIRE(15, 14),
    /**
     * <code>FIRE = 15;</code>
     */
    FIRE(16, 15),
    /**
     * <code>ASHES = 16;</code>
     */
    ASHES(17, 16),
    /**
     * <code>MAGMA = 17;</code>
     */
    MAGMA(18, 17),
    /**
     * <code>DRIFTWOOD = 18;</code>
     */
    DRIFTWOOD(19, 18),
    /**
     * <code>POOL = 19;</code>
     */
    POOL(20, 19),
    /**
     * <code>BROOK = 20;</code>
     */
    BROOK(21, 20),
    /**
     * <code>RIVER = 21;</code>
     */
    RIVER(22, 21),
    /**
     * <code>ROOT = 22;</code>
     */
    ROOT(23, 22),
    /**
     * <code>TREE_MATERIAL = 23;</code>
     */
    TREE_MATERIAL(24, 23),
    /**
     * <code>MUSHROOM = 24;</code>
     */
    MUSHROOM(25, 24),
    /**
     * <code>UNDERWORLD_GATE = 25;</code>
     */
    UNDERWORLD_GATE(26, 25),
    ;

    /**
     * <code>NO_MATERIAL = -1;</code>
     */
    public static final int NO_MATERIAL_VALUE = -1;
    /**
     * <code>AIR = 0;</code>
     */
    public static final int AIR_VALUE = 0;
    /**
     * <code>SOIL = 1;</code>
     */
    public static final int SOIL_VALUE = 1;
    /**
     * <code>STONE = 2;</code>
     */
    public static final int STONE_VALUE = 2;
    /**
     * <code>FEATURE = 3;</code>
     */
    public static final int FEATURE_VALUE = 3;
    /**
     * <code>LAVA_STONE = 4;</code>
     */
    public static final int LAVA_STONE_VALUE = 4;
    /**
     * <code>MINERAL = 5;</code>
     */
    public static final int MINERAL_VALUE = 5;
    /**
     * <code>FROZEN_LIQUID = 6;</code>
     */
    public static final int FROZEN_LIQUID_VALUE = 6;
    /**
     * <code>CONSTRUCTION = 7;</code>
     */
    public static final int CONSTRUCTION_VALUE = 7;
    /**
     * <code>GRASS_LIGHT = 8;</code>
     */
    public static final int GRASS_LIGHT_VALUE = 8;
    /**
     * <code>GRASS_DARK = 9;</code>
     */
    public static final int GRASS_DARK_VALUE = 9;
    /**
     * <code>GRASS_DRY = 10;</code>
     */
    public static final int GRASS_DRY_VALUE = 10;
    /**
     * <code>GRASS_DEAD = 11;</code>
     */
    public static final int GRASS_DEAD_VALUE = 11;
    /**
     * <code>PLANT = 12;</code>
     */
    public static final int PLANT_VALUE = 12;
    /**
     * <code>HFS = 13;</code>
     */
    public static final int HFS_VALUE = 13;
    /**
     * <code>CAMPFIRE = 14;</code>
     */
    public static final int CAMPFIRE_VALUE = 14;
    /**
     * <code>FIRE = 15;</code>
     */
    public static final int FIRE_VALUE = 15;
    /**
     * <code>ASHES = 16;</code>
     */
    public static final int ASHES_VALUE = 16;
    /**
     * <code>MAGMA = 17;</code>
     */
    public static final int MAGMA_VALUE = 17;
    /**
     * <code>DRIFTWOOD = 18;</code>
     */
    public static final int DRIFTWOOD_VALUE = 18;
    /**
     * <code>POOL = 19;</code>
     */
    public static final int POOL_VALUE = 19;
    /**
     * <code>BROOK = 20;</code>
     */
    public static final int BROOK_VALUE = 20;
    /**
     * <code>RIVER = 21;</code>
     */
    public static final int RIVER_VALUE = 21;
    /**
     * <code>ROOT = 22;</code>
     */
    public static final int ROOT_VALUE = 22;
    /**
     * <code>TREE_MATERIAL = 23;</code>
     */
    public static final int TREE_MATERIAL_VALUE = 23;
    /**
     * <code>MUSHROOM = 24;</code>
     */
    public static final int MUSHROOM_VALUE = 24;
    /**
     * <code>UNDERWORLD_GATE = 25;</code>
     */
    public static final int UNDERWORLD_GATE_VALUE = 25;


    public final int getNumber() { return value; }

    public static TiletypeMaterial valueOf(int value) {
      switch (value) {
        case -1: return NO_MATERIAL;
        case 0: return AIR;
        case 1: return SOIL;
        case 2: return STONE;
        case 3: return FEATURE;
        case 4: return LAVA_STONE;
        case 5: return MINERAL;
        case 6: return FROZEN_LIQUID;
        case 7: return CONSTRUCTION;
        case 8: return GRASS_LIGHT;
        case 9: return GRASS_DARK;
        case 10: return GRASS_DRY;
        case 11: return GRASS_DEAD;
        case 12: return PLANT;
        case 13: return HFS;
        case 14: return CAMPFIRE;
        case 15: return FIRE;
        case 16: return ASHES;
        case 17: return MAGMA;
        case 18: return DRIFTWOOD;
        case 19: return POOL;
        case 20: return BROOK;
        case 21: return RIVER;
        case 22: return ROOT;
        case 23: return TREE_MATERIAL;
        case 24: return MUSHROOM;
        case 25: return UNDERWORLD_GATE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TiletypeMaterial>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TiletypeMaterial>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TiletypeMaterial>() {
            public TiletypeMaterial findValueByNumber(int number) {
              return TiletypeMaterial.valueOf(number);
            }
          };

    private final int value;

    private TiletypeMaterial(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant}
   */
  public enum TiletypeVariant
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_VARIANT = -1;</code>
     */
    NO_VARIANT(0, -1),
    /**
     * <code>VAR_1 = 0;</code>
     */
    VAR_1(1, 0),
    /**
     * <code>VAR_2 = 1;</code>
     */
    VAR_2(2, 1),
    /**
     * <code>VAR_3 = 2;</code>
     */
    VAR_3(3, 2),
    /**
     * <code>VAR_4 = 3;</code>
     */
    VAR_4(4, 3),
    ;

    /**
     * <code>NO_VARIANT = -1;</code>
     */
    public static final int NO_VARIANT_VALUE = -1;
    /**
     * <code>VAR_1 = 0;</code>
     */
    public static final int VAR_1_VALUE = 0;
    /**
     * <code>VAR_2 = 1;</code>
     */
    public static final int VAR_2_VALUE = 1;
    /**
     * <code>VAR_3 = 2;</code>
     */
    public static final int VAR_3_VALUE = 2;
    /**
     * <code>VAR_4 = 3;</code>
     */
    public static final int VAR_4_VALUE = 3;


    public final int getNumber() { return value; }

    public static TiletypeVariant valueOf(int value) {
      switch (value) {
        case -1: return NO_VARIANT;
        case 0: return VAR_1;
        case 1: return VAR_2;
        case 2: return VAR_3;
        case 3: return VAR_4;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TiletypeVariant>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TiletypeVariant>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TiletypeVariant>() {
            public TiletypeVariant findValueByNumber(int number) {
              return TiletypeVariant.valueOf(number);
            }
          };

    private final int value;

    private TiletypeVariant(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.WorldPoles}
   */
  public enum WorldPoles
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_POLES = 0;</code>
     */
    NO_POLES(0, 0),
    /**
     * <code>NORTH_POLE = 1;</code>
     */
    NORTH_POLE(1, 1),
    /**
     * <code>SOUTH_POLE = 2;</code>
     */
    SOUTH_POLE(2, 2),
    /**
     * <code>BOTH_POLES = 3;</code>
     */
    BOTH_POLES(3, 3),
    ;

    /**
     * <code>NO_POLES = 0;</code>
     */
    public static final int NO_POLES_VALUE = 0;
    /**
     * <code>NORTH_POLE = 1;</code>
     */
    public static final int NORTH_POLE_VALUE = 1;
    /**
     * <code>SOUTH_POLE = 2;</code>
     */
    public static final int SOUTH_POLE_VALUE = 2;
    /**
     * <code>BOTH_POLES = 3;</code>
     */
    public static final int BOTH_POLES_VALUE = 3;


    public final int getNumber() { return value; }

    public static WorldPoles valueOf(int value) {
      switch (value) {
        case 0: return NO_POLES;
        case 1: return NORTH_POLE;
        case 2: return SOUTH_POLE;
        case 3: return BOTH_POLES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WorldPoles>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<WorldPoles>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WorldPoles>() {
            public WorldPoles findValueByNumber(int number) {
              return WorldPoles.valueOf(number);
            }
          };

    private final int value;

    private WorldPoles(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.WorldPoles)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.BuildingDirection}
   */
  public enum BuildingDirection
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NORTH = 0;</code>
     */
    NORTH(0, 0),
    /**
     * <code>EAST = 1;</code>
     */
    EAST(1, 1),
    /**
     * <code>SOUTH = 2;</code>
     */
    SOUTH(2, 2),
    /**
     * <code>WEST = 3;</code>
     */
    WEST(3, 3),
    ;

    /**
     * <code>NORTH = 0;</code>
     */
    public static final int NORTH_VALUE = 0;
    /**
     * <code>EAST = 1;</code>
     */
    public static final int EAST_VALUE = 1;
    /**
     * <code>SOUTH = 2;</code>
     */
    public static final int SOUTH_VALUE = 2;
    /**
     * <code>WEST = 3;</code>
     */
    public static final int WEST_VALUE = 3;


    public final int getNumber() { return value; }

    public static BuildingDirection valueOf(int value) {
      switch (value) {
        case 0: return NORTH;
        case 1: return EAST;
        case 2: return SOUTH;
        case 3: return WEST;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BuildingDirection>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<BuildingDirection>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BuildingDirection>() {
            public BuildingDirection findValueByNumber(int number) {
              return BuildingDirection.valueOf(number);
            }
          };

    private final int value;

    private BuildingDirection(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingDirection)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation}
   */
  public enum TileDigDesignation
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NO_DIG = 0;</code>
     *
     * <pre>
     **
     * no designation
     * </pre>
     */
    NO_DIG(0, 0),
    /**
     * <code>DEFAULT_DIG = 1;</code>
     *
     * <pre>
     **
     * dig walls, remove stairs and ramps, gather plants, fell trees
     * </pre>
     */
    DEFAULT_DIG(1, 1),
    /**
     * <code>UP_DOWN_STAIR_DIG = 2;</code>
     */
    UP_DOWN_STAIR_DIG(2, 2),
    /**
     * <code>CHANNEL_DIG = 3;</code>
     */
    CHANNEL_DIG(3, 3),
    /**
     * <code>RAMP_DIG = 4;</code>
     */
    RAMP_DIG(4, 4),
    /**
     * <code>DOWN_STAIR_DIG = 5;</code>
     */
    DOWN_STAIR_DIG(5, 5),
    /**
     * <code>UP_STAIR_DIG = 6;</code>
     */
    UP_STAIR_DIG(6, 6),
    ;

    /**
     * <code>NO_DIG = 0;</code>
     *
     * <pre>
     **
     * no designation
     * </pre>
     */
    public static final int NO_DIG_VALUE = 0;
    /**
     * <code>DEFAULT_DIG = 1;</code>
     *
     * <pre>
     **
     * dig walls, remove stairs and ramps, gather plants, fell trees
     * </pre>
     */
    public static final int DEFAULT_DIG_VALUE = 1;
    /**
     * <code>UP_DOWN_STAIR_DIG = 2;</code>
     */
    public static final int UP_DOWN_STAIR_DIG_VALUE = 2;
    /**
     * <code>CHANNEL_DIG = 3;</code>
     */
    public static final int CHANNEL_DIG_VALUE = 3;
    /**
     * <code>RAMP_DIG = 4;</code>
     */
    public static final int RAMP_DIG_VALUE = 4;
    /**
     * <code>DOWN_STAIR_DIG = 5;</code>
     */
    public static final int DOWN_STAIR_DIG_VALUE = 5;
    /**
     * <code>UP_STAIR_DIG = 6;</code>
     */
    public static final int UP_STAIR_DIG_VALUE = 6;


    public final int getNumber() { return value; }

    public static TileDigDesignation valueOf(int value) {
      switch (value) {
        case 0: return NO_DIG;
        case 1: return DEFAULT_DIG;
        case 2: return UP_DOWN_STAIR_DIG;
        case 3: return CHANNEL_DIG;
        case 4: return RAMP_DIG;
        case 5: return DOWN_STAIR_DIG;
        case 6: return UP_STAIR_DIG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TileDigDesignation>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TileDigDesignation>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TileDigDesignation>() {
            public TileDigDesignation findValueByNumber(int number) {
              return TileDigDesignation.valueOf(number);
            }
          };

    private final int value;

    private TileDigDesignation(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.FrontType}
   */
  public enum FrontType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>FRONT_NONE = 0;</code>
     */
    FRONT_NONE(0, 0),
    /**
     * <code>FRONT_WARM = 1;</code>
     */
    FRONT_WARM(1, 1),
    /**
     * <code>FRONT_COLD = 2;</code>
     */
    FRONT_COLD(2, 2),
    /**
     * <code>FRONT_OCCLUDED = 3;</code>
     */
    FRONT_OCCLUDED(3, 3),
    ;

    /**
     * <code>FRONT_NONE = 0;</code>
     */
    public static final int FRONT_NONE_VALUE = 0;
    /**
     * <code>FRONT_WARM = 1;</code>
     */
    public static final int FRONT_WARM_VALUE = 1;
    /**
     * <code>FRONT_COLD = 2;</code>
     */
    public static final int FRONT_COLD_VALUE = 2;
    /**
     * <code>FRONT_OCCLUDED = 3;</code>
     */
    public static final int FRONT_OCCLUDED_VALUE = 3;


    public final int getNumber() { return value; }

    public static FrontType valueOf(int value) {
      switch (value) {
        case 0: return FRONT_NONE;
        case 1: return FRONT_WARM;
        case 2: return FRONT_COLD;
        case 3: return FRONT_OCCLUDED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FrontType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FrontType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FrontType>() {
            public FrontType findValueByNumber(int number) {
              return FrontType.valueOf(number);
            }
          };

    private final int value;

    private FrontType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.FrontType)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.CumulusType}
   */
  public enum CumulusType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>CUMULUS_NONE = 0;</code>
     */
    CUMULUS_NONE(0, 0),
    /**
     * <code>CUMULUS_MEDIUM = 1;</code>
     */
    CUMULUS_MEDIUM(1, 1),
    /**
     * <code>CUMULUS_MULTI = 2;</code>
     */
    CUMULUS_MULTI(2, 2),
    /**
     * <code>CUMULUS_NIMBUS = 3;</code>
     */
    CUMULUS_NIMBUS(3, 3),
    ;

    /**
     * <code>CUMULUS_NONE = 0;</code>
     */
    public static final int CUMULUS_NONE_VALUE = 0;
    /**
     * <code>CUMULUS_MEDIUM = 1;</code>
     */
    public static final int CUMULUS_MEDIUM_VALUE = 1;
    /**
     * <code>CUMULUS_MULTI = 2;</code>
     */
    public static final int CUMULUS_MULTI_VALUE = 2;
    /**
     * <code>CUMULUS_NIMBUS = 3;</code>
     */
    public static final int CUMULUS_NIMBUS_VALUE = 3;


    public final int getNumber() { return value; }

    public static CumulusType valueOf(int value) {
      switch (value) {
        case 0: return CUMULUS_NONE;
        case 1: return CUMULUS_MEDIUM;
        case 2: return CUMULUS_MULTI;
        case 3: return CUMULUS_NIMBUS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CumulusType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CumulusType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CumulusType>() {
            public CumulusType findValueByNumber(int number) {
              return CumulusType.valueOf(number);
            }
          };

    private final int value;

    private CumulusType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.CumulusType)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.StratusType}
   */
  public enum StratusType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>STRATUS_NONE = 0;</code>
     */
    STRATUS_NONE(0, 0),
    /**
     * <code>STRATUS_ALTO = 1;</code>
     */
    STRATUS_ALTO(1, 1),
    /**
     * <code>STRATUS_PROPER = 2;</code>
     */
    STRATUS_PROPER(2, 2),
    /**
     * <code>STRATUS_NIMBUS = 3;</code>
     */
    STRATUS_NIMBUS(3, 3),
    ;

    /**
     * <code>STRATUS_NONE = 0;</code>
     */
    public static final int STRATUS_NONE_VALUE = 0;
    /**
     * <code>STRATUS_ALTO = 1;</code>
     */
    public static final int STRATUS_ALTO_VALUE = 1;
    /**
     * <code>STRATUS_PROPER = 2;</code>
     */
    public static final int STRATUS_PROPER_VALUE = 2;
    /**
     * <code>STRATUS_NIMBUS = 3;</code>
     */
    public static final int STRATUS_NIMBUS_VALUE = 3;


    public final int getNumber() { return value; }

    public static StratusType valueOf(int value) {
      switch (value) {
        case 0: return STRATUS_NONE;
        case 1: return STRATUS_ALTO;
        case 2: return STRATUS_PROPER;
        case 3: return STRATUS_NIMBUS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StratusType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<StratusType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StratusType>() {
            public StratusType findValueByNumber(int number) {
              return StratusType.valueOf(number);
            }
          };

    private final int value;

    private StratusType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.StratusType)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.FogType}
   */
  public enum FogType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>FOG_NONE = 0;</code>
     */
    FOG_NONE(0, 0),
    /**
     * <code>FOG_MIST = 1;</code>
     */
    FOG_MIST(1, 1),
    /**
     * <code>FOG_NORMAL = 2;</code>
     */
    FOG_NORMAL(2, 2),
    /**
     * <code>F0G_THICK = 3;</code>
     */
    F0G_THICK(3, 3),
    ;

    /**
     * <code>FOG_NONE = 0;</code>
     */
    public static final int FOG_NONE_VALUE = 0;
    /**
     * <code>FOG_MIST = 1;</code>
     */
    public static final int FOG_MIST_VALUE = 1;
    /**
     * <code>FOG_NORMAL = 2;</code>
     */
    public static final int FOG_NORMAL_VALUE = 2;
    /**
     * <code>F0G_THICK = 3;</code>
     */
    public static final int F0G_THICK_VALUE = 3;


    public final int getNumber() { return value; }

    public static FogType valueOf(int value) {
      switch (value) {
        case 0: return FOG_NONE;
        case 1: return FOG_MIST;
        case 2: return FOG_NORMAL;
        case 3: return F0G_THICK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FogType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FogType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FogType>() {
            public FogType findValueByNumber(int number) {
              return FogType.valueOf(number);
            }
          };

    private final int value;

    private FogType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.FogType)
  }

  /**
   * Protobuf enum {@code com.dfhack.protobuf.RemoteFortressReader.PatternType}
   */
  public enum PatternType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>MONOTONE = 0;</code>
     */
    MONOTONE(0, 0),
    /**
     * <code>STRIPES = 1;</code>
     */
    STRIPES(1, 1),
    /**
     * <code>IRIS_EYE = 2;</code>
     */
    IRIS_EYE(2, 2),
    /**
     * <code>SPOTS = 3;</code>
     */
    SPOTS(3, 3),
    /**
     * <code>PUPIL_EYE = 4;</code>
     */
    PUPIL_EYE(4, 4),
    /**
     * <code>MOTTLED = 5;</code>
     */
    MOTTLED(5, 5),
    ;

    /**
     * <code>MONOTONE = 0;</code>
     */
    public static final int MONOTONE_VALUE = 0;
    /**
     * <code>STRIPES = 1;</code>
     */
    public static final int STRIPES_VALUE = 1;
    /**
     * <code>IRIS_EYE = 2;</code>
     */
    public static final int IRIS_EYE_VALUE = 2;
    /**
     * <code>SPOTS = 3;</code>
     */
    public static final int SPOTS_VALUE = 3;
    /**
     * <code>PUPIL_EYE = 4;</code>
     */
    public static final int PUPIL_EYE_VALUE = 4;
    /**
     * <code>MOTTLED = 5;</code>
     */
    public static final int MOTTLED_VALUE = 5;


    public final int getNumber() { return value; }

    public static PatternType valueOf(int value) {
      switch (value) {
        case 0: return MONOTONE;
        case 1: return STRIPES;
        case 2: return IRIS_EYE;
        case 3: return SPOTS;
        case 4: return PUPIL_EYE;
        case 5: return MOTTLED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PatternType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<PatternType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PatternType>() {
            public PatternType findValueByNumber(int number) {
              return PatternType.valueOf(number);
            }
          };

    private final int value;

    private PatternType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.dfhack.protobuf.RemoteFortressReader.PatternType)
  }

  public interface TiletypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.Tiletype)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string caption = 3;</code>
     */
    boolean hasCaption();
    /**
     * <code>optional string caption = 3;</code>
     */
    java.lang.String getCaption();
    /**
     * <code>optional string caption = 3;</code>
     */
    com.google.protobuf.ByteString
        getCaptionBytes();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
     */
    boolean hasShape();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape getShape();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
     */
    boolean hasSpecial();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial getSpecial();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
     */
    boolean hasMaterial();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial getMaterial();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
     */
    boolean hasVariant();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant getVariant();

    /**
     * <code>optional string direction = 8;</code>
     */
    boolean hasDirection();
    /**
     * <code>optional string direction = 8;</code>
     */
    java.lang.String getDirection();
    /**
     * <code>optional string direction = 8;</code>
     */
    com.google.protobuf.ByteString
        getDirectionBytes();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Tiletype}
   */
  public static final class Tiletype extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.Tiletype)
      TiletypeOrBuilder {
    // Use Tiletype.newBuilder() to construct.
    private Tiletype(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Tiletype(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final Tiletype defaultInstance;
    public static Tiletype getDefaultInstance() {
      return defaultInstance;
    }

    public Tiletype getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private Tiletype(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              caption_ = bs;
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000008;
                shape_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000010;
                special_ = value;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000020;
                material_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000040;
                variant_ = value;
              }
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              direction_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Tiletype> PARSER =
        new com.google.protobuf.AbstractParser<Tiletype>() {
      public Tiletype parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Tiletype(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Tiletype> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CAPTION_FIELD_NUMBER = 3;
    private java.lang.Object caption_;
    /**
     * <code>optional string caption = 3;</code>
     */
    public boolean hasCaption() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string caption = 3;</code>
     */
    public java.lang.String getCaption() {
      java.lang.Object ref = caption_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          caption_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string caption = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCaptionBytes() {
      java.lang.Object ref = caption_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        caption_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHAPE_FIELD_NUMBER = 4;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape shape_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
     */
    public boolean hasShape() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape getShape() {
      return shape_;
    }

    public static final int SPECIAL_FIELD_NUMBER = 5;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial special_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
     */
    public boolean hasSpecial() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial getSpecial() {
      return special_;
    }

    public static final int MATERIAL_FIELD_NUMBER = 6;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial material_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
     */
    public boolean hasMaterial() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial getMaterial() {
      return material_;
    }

    public static final int VARIANT_FIELD_NUMBER = 7;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant variant_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
     */
    public boolean hasVariant() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant getVariant() {
      return variant_;
    }

    public static final int DIRECTION_FIELD_NUMBER = 8;
    private java.lang.Object direction_;
    /**
     * <code>optional string direction = 8;</code>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string direction = 8;</code>
     */
    public java.lang.String getDirection() {
      java.lang.Object ref = direction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          direction_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string direction = 8;</code>
     */
    public com.google.protobuf.ByteString
        getDirectionBytes() {
      java.lang.Object ref = direction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        direction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      id_ = 0;
      name_ = "";
      caption_ = "";
      shape_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape.NO_SHAPE;
      special_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial.NO_SPECIAL;
      material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial.NO_MATERIAL;
      variant_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant.NO_VARIANT;
      direction_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getCaptionBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, shape_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, special_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, material_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, variant_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getDirectionBytes());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getCaptionBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, shape_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, special_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, material_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, variant_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getDirectionBytes());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Tiletype}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.Tiletype)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        caption_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        shape_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape.NO_SHAPE;
        bitField0_ = (bitField0_ & ~0x00000008);
        special_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial.NO_SPECIAL;
        bitField0_ = (bitField0_ & ~0x00000010);
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial.NO_MATERIAL;
        bitField0_ = (bitField0_ & ~0x00000020);
        variant_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant.NO_VARIANT;
        bitField0_ = (bitField0_ & ~0x00000040);
        direction_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.caption_ = caption_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.shape_ = shape_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.special_ = special_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.material_ = material_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.variant_ = variant_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.direction_ = direction_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          
        }
        if (other.hasCaption()) {
          bitField0_ |= 0x00000004;
          caption_ = other.caption_;
          
        }
        if (other.hasShape()) {
          setShape(other.getShape());
        }
        if (other.hasSpecial()) {
          setSpecial(other.getSpecial());
        }
        if (other.hasMaterial()) {
          setMaterial(other.getMaterial());
        }
        if (other.hasVariant()) {
          setVariant(other.getVariant());
        }
        if (other.hasDirection()) {
          bitField0_ |= 0x00000080;
          direction_ = other.direction_;
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        
        return this;
      }

      private java.lang.Object caption_ = "";
      /**
       * <code>optional string caption = 3;</code>
       */
      public boolean hasCaption() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string caption = 3;</code>
       */
      public java.lang.String getCaption() {
        java.lang.Object ref = caption_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            caption_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string caption = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCaptionBytes() {
        java.lang.Object ref = caption_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          caption_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string caption = 3;</code>
       */
      public Builder setCaption(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        caption_ = value;
        
        return this;
      }
      /**
       * <code>optional string caption = 3;</code>
       */
      public Builder clearCaption() {
        bitField0_ = (bitField0_ & ~0x00000004);
        caption_ = getDefaultInstance().getCaption();
        
        return this;
      }
      /**
       * <code>optional string caption = 3;</code>
       */
      public Builder setCaptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        caption_ = value;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape shape_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape.NO_SHAPE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
       */
      public boolean hasShape() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape getShape() {
        return shape_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
       */
      public Builder setShape(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        shape_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeShape shape = 4;</code>
       */
      public Builder clearShape() {
        bitField0_ = (bitField0_ & ~0x00000008);
        shape_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeShape.NO_SHAPE;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial special_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial.NO_SPECIAL;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
       */
      public boolean hasSpecial() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial getSpecial() {
        return special_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
       */
      public Builder setSpecial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        special_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeSpecial special = 5;</code>
       */
      public Builder clearSpecial() {
        bitField0_ = (bitField0_ & ~0x00000010);
        special_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeSpecial.NO_SPECIAL;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial.NO_MATERIAL;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
       */
      public boolean hasMaterial() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial getMaterial() {
        return material_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
       */
      public Builder setMaterial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        material_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeMaterial material = 6;</code>
       */
      public Builder clearMaterial() {
        bitField0_ = (bitField0_ & ~0x00000020);
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeMaterial.NO_MATERIAL;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant variant_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant.NO_VARIANT;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
       */
      public boolean hasVariant() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant getVariant() {
        return variant_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
       */
      public Builder setVariant(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        variant_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.TiletypeVariant variant = 7;</code>
       */
      public Builder clearVariant() {
        bitField0_ = (bitField0_ & ~0x00000040);
        variant_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeVariant.NO_VARIANT;
        
        return this;
      }

      private java.lang.Object direction_ = "";
      /**
       * <code>optional string direction = 8;</code>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string direction = 8;</code>
       */
      public java.lang.String getDirection() {
        java.lang.Object ref = direction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            direction_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string direction = 8;</code>
       */
      public com.google.protobuf.ByteString
          getDirectionBytes() {
        java.lang.Object ref = direction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          direction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string direction = 8;</code>
       */
      public Builder setDirection(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        direction_ = value;
        
        return this;
      }
      /**
       * <code>optional string direction = 8;</code>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000080);
        direction_ = getDefaultInstance().getDirection();
        
        return this;
      }
      /**
       * <code>optional string direction = 8;</code>
       */
      public Builder setDirectionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        direction_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.Tiletype)
    }

    static {
      defaultInstance = new Tiletype(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.Tiletype)
  }

  public interface TiletypeListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.TiletypeList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> 
        getTiletypeListList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype getTiletypeList(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    int getTiletypeListCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeList}
   */
  public static final class TiletypeList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.TiletypeList)
      TiletypeListOrBuilder {
    // Use TiletypeList.newBuilder() to construct.
    private TiletypeList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TiletypeList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final TiletypeList defaultInstance;
    public static TiletypeList getDefaultInstance() {
      return defaultInstance;
    }

    public TiletypeList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private TiletypeList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tiletypeList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype>();
                mutable_bitField0_ |= 0x00000001;
              }
              tiletypeList_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tiletypeList_ = java.util.Collections.unmodifiableList(tiletypeList_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TiletypeList> PARSER =
        new com.google.protobuf.AbstractParser<TiletypeList>() {
      public TiletypeList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TiletypeList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TiletypeList> getParserForType() {
      return PARSER;
    }

    public static final int TILETYPE_LIST_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> tiletypeList_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> getTiletypeListList() {
      return tiletypeList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeOrBuilder> 
        getTiletypeListOrBuilderList() {
      return tiletypeList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    public int getTiletypeListCount() {
      return tiletypeList_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype getTiletypeList(int index) {
      return tiletypeList_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeOrBuilder getTiletypeListOrBuilder(
        int index) {
      return tiletypeList_.get(index);
    }

    private void initFields() {
      tiletypeList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getTiletypeListCount(); i++) {
        if (!getTiletypeList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < tiletypeList_.size(); i++) {
        output.writeMessage(1, tiletypeList_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tiletypeList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tiletypeList_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TiletypeList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.TiletypeList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        tiletypeList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          tiletypeList_ = java.util.Collections.unmodifiableList(tiletypeList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.tiletypeList_ = tiletypeList_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList.getDefaultInstance()) return this;
        if (!other.tiletypeList_.isEmpty()) {
          if (tiletypeList_.isEmpty()) {
            tiletypeList_ = other.tiletypeList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTiletypeListIsMutable();
            tiletypeList_.addAll(other.tiletypeList_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTiletypeListCount(); i++) {
          if (!getTiletypeList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TiletypeList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> tiletypeList_ =
        java.util.Collections.emptyList();
      private void ensureTiletypeListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tiletypeList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype>(tiletypeList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> getTiletypeListList() {
        return java.util.Collections.unmodifiableList(tiletypeList_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public int getTiletypeListCount() {
        return tiletypeList_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype getTiletypeList(int index) {
        return tiletypeList_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder setTiletypeList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTiletypeListIsMutable();
        tiletypeList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder setTiletypeList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.Builder builderForValue) {
        ensureTiletypeListIsMutable();
        tiletypeList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder addTiletypeList(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTiletypeListIsMutable();
        tiletypeList_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder addTiletypeList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTiletypeListIsMutable();
        tiletypeList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder addTiletypeList(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.Builder builderForValue) {
        ensureTiletypeListIsMutable();
        tiletypeList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder addTiletypeList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype.Builder builderForValue) {
        ensureTiletypeListIsMutable();
        tiletypeList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder addAllTiletypeList(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Tiletype> values) {
        ensureTiletypeListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tiletypeList_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder clearTiletypeList() {
        tiletypeList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Tiletype tiletype_list = 1;</code>
       */
      public Builder removeTiletypeList(int index) {
        ensureTiletypeListIsMutable();
        tiletypeList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeList)
    }

    static {
      defaultInstance = new TiletypeList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.TiletypeList)
  }

  public interface BuildingExtentsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BuildingExtents)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 pos_x = 1;</code>
     */
    boolean hasPosX();
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    int getPosX();

    /**
     * <code>required int32 pos_y = 2;</code>
     */
    boolean hasPosY();
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    int getPosY();

    /**
     * <code>required int32 width = 3;</code>
     */
    boolean hasWidth();
    /**
     * <code>required int32 width = 3;</code>
     */
    int getWidth();

    /**
     * <code>required int32 height = 4;</code>
     */
    boolean hasHeight();
    /**
     * <code>required int32 height = 4;</code>
     */
    int getHeight();

    /**
     * <code>repeated int32 extents = 5;</code>
     */
    java.util.List<java.lang.Integer> getExtentsList();
    /**
     * <code>repeated int32 extents = 5;</code>
     */
    int getExtentsCount();
    /**
     * <code>repeated int32 extents = 5;</code>
     */
    int getExtents(int index);
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingExtents}
   */
  public static final class BuildingExtents extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingExtents)
      BuildingExtentsOrBuilder {
    // Use BuildingExtents.newBuilder() to construct.
    private BuildingExtents(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuildingExtents(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BuildingExtents defaultInstance;
    public static BuildingExtents getDefaultInstance() {
      return defaultInstance;
    }

    public BuildingExtents getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BuildingExtents(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              posX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              posY_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              width_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              height_ = input.readInt32();
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                extents_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              extents_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                extents_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                extents_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          extents_ = java.util.Collections.unmodifiableList(extents_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BuildingExtents> PARSER =
        new com.google.protobuf.AbstractParser<BuildingExtents>() {
      public BuildingExtents parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildingExtents(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuildingExtents> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int POS_X_FIELD_NUMBER = 1;
    private int posX_;
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    public boolean hasPosX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    public int getPosX() {
      return posX_;
    }

    public static final int POS_Y_FIELD_NUMBER = 2;
    private int posY_;
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    public boolean hasPosY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    public int getPosY() {
      return posY_;
    }

    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <code>required int32 width = 3;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 4;
    private int height_;
    /**
     * <code>required int32 height = 4;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 height = 4;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int EXTENTS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> extents_;
    /**
     * <code>repeated int32 extents = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getExtentsList() {
      return extents_;
    }
    /**
     * <code>repeated int32 extents = 5;</code>
     */
    public int getExtentsCount() {
      return extents_.size();
    }
    /**
     * <code>repeated int32 extents = 5;</code>
     */
    public int getExtents(int index) {
      return extents_.get(index);
    }

    private void initFields() {
      posX_ = 0;
      posY_ = 0;
      width_ = 0;
      height_ = 0;
      extents_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPosX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, posX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, posY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, height_);
      }
      for (int i = 0; i < extents_.size(); i++) {
        output.writeInt32(5, extents_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, posX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, posY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, height_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < extents_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(extents_.get(i));
        }
        size += dataSize;
        size += 1 * getExtentsList().size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingExtents}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingExtents)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtentsOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        posX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        posY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        extents_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.posX_ = posX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.posY_ = posY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.height_ = height_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          extents_ = java.util.Collections.unmodifiableList(extents_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.extents_ = extents_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance()) return this;
        if (other.hasPosX()) {
          setPosX(other.getPosX());
        }
        if (other.hasPosY()) {
          setPosY(other.getPosY());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (!other.extents_.isEmpty()) {
          if (extents_.isEmpty()) {
            extents_ = other.extents_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureExtentsIsMutable();
            extents_.addAll(other.extents_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosX()) {
          
          return false;
        }
        if (!hasPosY()) {
          
          return false;
        }
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int posX_ ;
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public boolean hasPosX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public int getPosX() {
        return posX_;
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public Builder setPosX(int value) {
        bitField0_ |= 0x00000001;
        posX_ = value;
        
        return this;
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public Builder clearPosX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        posX_ = 0;
        
        return this;
      }

      private int posY_ ;
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public boolean hasPosY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public int getPosY() {
        return posY_;
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public Builder setPosY(int value) {
        bitField0_ |= 0x00000002;
        posY_ = value;
        
        return this;
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public Builder clearPosY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        posY_ = 0;
        
        return this;
      }

      private int width_ ;
      /**
       * <code>required int32 width = 3;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000004;
        width_ = value;
        
        return this;
      }
      /**
       * <code>required int32 width = 3;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        
        return this;
      }

      private int height_ ;
      /**
       * <code>required int32 height = 4;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000008;
        height_ = value;
        
        return this;
      }
      /**
       * <code>required int32 height = 4;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        height_ = 0;
        
        return this;
      }

      private java.util.List<java.lang.Integer> extents_ = java.util.Collections.emptyList();
      private void ensureExtentsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          extents_ = new java.util.ArrayList<java.lang.Integer>(extents_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getExtentsList() {
        return java.util.Collections.unmodifiableList(extents_);
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public int getExtentsCount() {
        return extents_.size();
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public int getExtents(int index) {
        return extents_.get(index);
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public Builder setExtents(
          int index, int value) {
        ensureExtentsIsMutable();
        extents_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public Builder addExtents(int value) {
        ensureExtentsIsMutable();
        extents_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public Builder addAllExtents(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureExtentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, extents_);
        
        return this;
      }
      /**
       * <code>repeated int32 extents = 5;</code>
       */
      public Builder clearExtents() {
        extents_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingExtents)
    }

    static {
      defaultInstance = new BuildingExtents(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingExtents)
  }

  public interface BuildingInstanceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BuildingInstance)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>optional int32 pos_x_min = 2;</code>
     */
    boolean hasPosXMin();
    /**
     * <code>optional int32 pos_x_min = 2;</code>
     */
    int getPosXMin();

    /**
     * <code>optional int32 pos_y_min = 3;</code>
     */
    boolean hasPosYMin();
    /**
     * <code>optional int32 pos_y_min = 3;</code>
     */
    int getPosYMin();

    /**
     * <code>optional int32 pos_z_min = 4;</code>
     */
    boolean hasPosZMin();
    /**
     * <code>optional int32 pos_z_min = 4;</code>
     */
    int getPosZMin();

    /**
     * <code>optional int32 pos_x_max = 5;</code>
     */
    boolean hasPosXMax();
    /**
     * <code>optional int32 pos_x_max = 5;</code>
     */
    int getPosXMax();

    /**
     * <code>optional int32 pos_y_max = 6;</code>
     */
    boolean hasPosYMax();
    /**
     * <code>optional int32 pos_y_max = 6;</code>
     */
    int getPosYMax();

    /**
     * <code>optional int32 pos_z_max = 7;</code>
     */
    boolean hasPosZMax();
    /**
     * <code>optional int32 pos_z_max = 7;</code>
     */
    int getPosZMax();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
     */
    boolean hasBuildingType();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
     */
    boolean hasMaterial();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial();

    /**
     * <code>optional uint32 building_flags = 10;</code>
     */
    boolean hasBuildingFlags();
    /**
     * <code>optional uint32 building_flags = 10;</code>
     */
    int getBuildingFlags();

    /**
     * <code>optional bool is_room = 11;</code>
     */
    boolean hasIsRoom();
    /**
     * <code>optional bool is_room = 11;</code>
     */
    boolean getIsRoom();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
     */
    boolean hasRoom();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents getRoom();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
     *
     * <pre>
     *Doesn't mean anything for most buildings
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
     *
     * <pre>
     *Doesn't mean anything for most buildings
     * </pre>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection getDirection();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingInstance}
   */
  public static final class BuildingInstance extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingInstance)
      BuildingInstanceOrBuilder {
    // Use BuildingInstance.newBuilder() to construct.
    private BuildingInstance(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuildingInstance(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BuildingInstance defaultInstance;
    public static BuildingInstance getDefaultInstance() {
      return defaultInstance;
    }

    public BuildingInstance getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BuildingInstance(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              posXMin_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              posYMin_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              posZMin_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              posXMax_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              posYMax_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              posZMax_ = input.readInt32();
              break;
            }
            case 66: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = buildingType_.toBuilder();
              }
              buildingType_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(buildingType_);
                buildingType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = material_.toBuilder();
              }
              material_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(material_);
                material_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              buildingFlags_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              isRoom_ = input.readBool();
              break;
            }
            case 98: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = room_.toBuilder();
              }
              room_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(room_);
                room_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00001000;
                direction_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BuildingInstance> PARSER =
        new com.google.protobuf.AbstractParser<BuildingInstance>() {
      public BuildingInstance parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildingInstance(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuildingInstance> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int POS_X_MIN_FIELD_NUMBER = 2;
    private int posXMin_;
    /**
     * <code>optional int32 pos_x_min = 2;</code>
     */
    public boolean hasPosXMin() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 pos_x_min = 2;</code>
     */
    public int getPosXMin() {
      return posXMin_;
    }

    public static final int POS_Y_MIN_FIELD_NUMBER = 3;
    private int posYMin_;
    /**
     * <code>optional int32 pos_y_min = 3;</code>
     */
    public boolean hasPosYMin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 pos_y_min = 3;</code>
     */
    public int getPosYMin() {
      return posYMin_;
    }

    public static final int POS_Z_MIN_FIELD_NUMBER = 4;
    private int posZMin_;
    /**
     * <code>optional int32 pos_z_min = 4;</code>
     */
    public boolean hasPosZMin() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pos_z_min = 4;</code>
     */
    public int getPosZMin() {
      return posZMin_;
    }

    public static final int POS_X_MAX_FIELD_NUMBER = 5;
    private int posXMax_;
    /**
     * <code>optional int32 pos_x_max = 5;</code>
     */
    public boolean hasPosXMax() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pos_x_max = 5;</code>
     */
    public int getPosXMax() {
      return posXMax_;
    }

    public static final int POS_Y_MAX_FIELD_NUMBER = 6;
    private int posYMax_;
    /**
     * <code>optional int32 pos_y_max = 6;</code>
     */
    public boolean hasPosYMax() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pos_y_max = 6;</code>
     */
    public int getPosYMax() {
      return posYMax_;
    }

    public static final int POS_Z_MAX_FIELD_NUMBER = 7;
    private int posZMax_;
    /**
     * <code>optional int32 pos_z_max = 7;</code>
     */
    public boolean hasPosZMax() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 pos_z_max = 7;</code>
     */
    public int getPosZMax() {
      return posZMax_;
    }

    public static final int BUILDING_TYPE_FIELD_NUMBER = 8;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType buildingType_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
     */
    public boolean hasBuildingType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType() {
      return buildingType_;
    }

    public static final int MATERIAL_FIELD_NUMBER = 9;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair material_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
     */
    public boolean hasMaterial() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial() {
      return material_;
    }

    public static final int BUILDING_FLAGS_FIELD_NUMBER = 10;
    private int buildingFlags_;
    /**
     * <code>optional uint32 building_flags = 10;</code>
     */
    public boolean hasBuildingFlags() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 building_flags = 10;</code>
     */
    public int getBuildingFlags() {
      return buildingFlags_;
    }

    public static final int IS_ROOM_FIELD_NUMBER = 11;
    private boolean isRoom_;
    /**
     * <code>optional bool is_room = 11;</code>
     */
    public boolean hasIsRoom() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_room = 11;</code>
     */
    public boolean getIsRoom() {
      return isRoom_;
    }

    public static final int ROOM_FIELD_NUMBER = 12;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents room_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
     */
    public boolean hasRoom() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents getRoom() {
      return room_;
    }

    public static final int DIRECTION_FIELD_NUMBER = 13;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection direction_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
     *
     * <pre>
     *Doesn't mean anything for most buildings
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
     *
     * <pre>
     *Doesn't mean anything for most buildings
     * </pre>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection getDirection() {
      return direction_;
    }

    private void initFields() {
      index_ = 0;
      posXMin_ = 0;
      posYMin_ = 0;
      posZMin_ = 0;
      posXMax_ = 0;
      posYMax_ = 0;
      posZMax_ = 0;
      buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
      material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      buildingFlags_ = 0;
      isRoom_ = false;
      room_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance();
      direction_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection.NORTH;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasBuildingType()) {
        if (!getBuildingType().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasMaterial()) {
        if (!getMaterial().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRoom()) {
        if (!getRoom().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, posXMin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, posYMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, posZMin_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, posXMax_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, posYMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, posZMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, buildingType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, material_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, buildingFlags_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, isRoom_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, room_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(13, direction_.getNumber());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, posXMin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, posYMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, posZMin_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, posXMax_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, posYMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, posZMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, buildingType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, material_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, buildingFlags_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isRoom_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, room_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, direction_.getNumber());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingInstance}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingInstance)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstanceOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        posXMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        posYMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        posZMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        posXMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        posYMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        posZMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000100);
        buildingFlags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isRoom_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        room_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000800);
        direction_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection.NORTH;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.posXMin_ = posXMin_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.posYMin_ = posYMin_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.posZMin_ = posZMin_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.posXMax_ = posXMax_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.posYMax_ = posYMax_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.posZMax_ = posZMax_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.buildingType_ = buildingType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.material_ = material_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.buildingFlags_ = buildingFlags_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isRoom_ = isRoom_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.room_ = room_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.direction_ = direction_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasPosXMin()) {
          setPosXMin(other.getPosXMin());
        }
        if (other.hasPosYMin()) {
          setPosYMin(other.getPosYMin());
        }
        if (other.hasPosZMin()) {
          setPosZMin(other.getPosZMin());
        }
        if (other.hasPosXMax()) {
          setPosXMax(other.getPosXMax());
        }
        if (other.hasPosYMax()) {
          setPosYMax(other.getPosYMax());
        }
        if (other.hasPosZMax()) {
          setPosZMax(other.getPosZMax());
        }
        if (other.hasBuildingType()) {
          mergeBuildingType(other.getBuildingType());
        }
        if (other.hasMaterial()) {
          mergeMaterial(other.getMaterial());
        }
        if (other.hasBuildingFlags()) {
          setBuildingFlags(other.getBuildingFlags());
        }
        if (other.hasIsRoom()) {
          setIsRoom(other.getIsRoom());
        }
        if (other.hasRoom()) {
          mergeRoom(other.getRoom());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        if (hasBuildingType()) {
          if (!getBuildingType().isInitialized()) {
            
            return false;
          }
        }
        if (hasMaterial()) {
          if (!getMaterial().isInitialized()) {
            
            return false;
          }
        }
        if (hasRoom()) {
          if (!getRoom().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        
        return this;
      }
      /**
       * <code>required int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        
        return this;
      }

      private int posXMin_ ;
      /**
       * <code>optional int32 pos_x_min = 2;</code>
       */
      public boolean hasPosXMin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 pos_x_min = 2;</code>
       */
      public int getPosXMin() {
        return posXMin_;
      }
      /**
       * <code>optional int32 pos_x_min = 2;</code>
       */
      public Builder setPosXMin(int value) {
        bitField0_ |= 0x00000002;
        posXMin_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_x_min = 2;</code>
       */
      public Builder clearPosXMin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        posXMin_ = 0;
        
        return this;
      }

      private int posYMin_ ;
      /**
       * <code>optional int32 pos_y_min = 3;</code>
       */
      public boolean hasPosYMin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 pos_y_min = 3;</code>
       */
      public int getPosYMin() {
        return posYMin_;
      }
      /**
       * <code>optional int32 pos_y_min = 3;</code>
       */
      public Builder setPosYMin(int value) {
        bitField0_ |= 0x00000004;
        posYMin_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_y_min = 3;</code>
       */
      public Builder clearPosYMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        posYMin_ = 0;
        
        return this;
      }

      private int posZMin_ ;
      /**
       * <code>optional int32 pos_z_min = 4;</code>
       */
      public boolean hasPosZMin() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 pos_z_min = 4;</code>
       */
      public int getPosZMin() {
        return posZMin_;
      }
      /**
       * <code>optional int32 pos_z_min = 4;</code>
       */
      public Builder setPosZMin(int value) {
        bitField0_ |= 0x00000008;
        posZMin_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_z_min = 4;</code>
       */
      public Builder clearPosZMin() {
        bitField0_ = (bitField0_ & ~0x00000008);
        posZMin_ = 0;
        
        return this;
      }

      private int posXMax_ ;
      /**
       * <code>optional int32 pos_x_max = 5;</code>
       */
      public boolean hasPosXMax() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 pos_x_max = 5;</code>
       */
      public int getPosXMax() {
        return posXMax_;
      }
      /**
       * <code>optional int32 pos_x_max = 5;</code>
       */
      public Builder setPosXMax(int value) {
        bitField0_ |= 0x00000010;
        posXMax_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_x_max = 5;</code>
       */
      public Builder clearPosXMax() {
        bitField0_ = (bitField0_ & ~0x00000010);
        posXMax_ = 0;
        
        return this;
      }

      private int posYMax_ ;
      /**
       * <code>optional int32 pos_y_max = 6;</code>
       */
      public boolean hasPosYMax() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 pos_y_max = 6;</code>
       */
      public int getPosYMax() {
        return posYMax_;
      }
      /**
       * <code>optional int32 pos_y_max = 6;</code>
       */
      public Builder setPosYMax(int value) {
        bitField0_ |= 0x00000020;
        posYMax_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_y_max = 6;</code>
       */
      public Builder clearPosYMax() {
        bitField0_ = (bitField0_ & ~0x00000020);
        posYMax_ = 0;
        
        return this;
      }

      private int posZMax_ ;
      /**
       * <code>optional int32 pos_z_max = 7;</code>
       */
      public boolean hasPosZMax() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 pos_z_max = 7;</code>
       */
      public int getPosZMax() {
        return posZMax_;
      }
      /**
       * <code>optional int32 pos_z_max = 7;</code>
       */
      public Builder setPosZMax(int value) {
        bitField0_ |= 0x00000040;
        posZMax_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_z_max = 7;</code>
       */
      public Builder clearPosZMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        posZMax_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public boolean hasBuildingType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType() {
        return buildingType_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public Builder setBuildingType(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        buildingType_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public Builder setBuildingType(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.Builder builderForValue) {
        buildingType_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public Builder mergeBuildingType(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            buildingType_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance()) {
          buildingType_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.newBuilder(buildingType_).mergeFrom(value).buildPartial();
        } else {
          buildingType_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 8;</code>
       */
      public Builder clearBuildingType() {
        buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public boolean hasMaterial() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial() {
        return material_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public Builder setMaterial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        material_ = value;

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public Builder setMaterial(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        material_ = builderForValue.build();

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public Builder mergeMaterial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (((bitField0_ & 0x00000100) == 0x00000100) &&
            material_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) {
          material_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder(material_).mergeFrom(value).buildPartial();
        } else {
          material_ = value;
        }

        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 9;</code>
       */
      public Builder clearMaterial() {
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      private int buildingFlags_ ;
      /**
       * <code>optional uint32 building_flags = 10;</code>
       */
      public boolean hasBuildingFlags() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 building_flags = 10;</code>
       */
      public int getBuildingFlags() {
        return buildingFlags_;
      }
      /**
       * <code>optional uint32 building_flags = 10;</code>
       */
      public Builder setBuildingFlags(int value) {
        bitField0_ |= 0x00000200;
        buildingFlags_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 building_flags = 10;</code>
       */
      public Builder clearBuildingFlags() {
        bitField0_ = (bitField0_ & ~0x00000200);
        buildingFlags_ = 0;
        
        return this;
      }

      private boolean isRoom_ ;
      /**
       * <code>optional bool is_room = 11;</code>
       */
      public boolean hasIsRoom() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_room = 11;</code>
       */
      public boolean getIsRoom() {
        return isRoom_;
      }
      /**
       * <code>optional bool is_room = 11;</code>
       */
      public Builder setIsRoom(boolean value) {
        bitField0_ |= 0x00000400;
        isRoom_ = value;
        
        return this;
      }
      /**
       * <code>optional bool is_room = 11;</code>
       */
      public Builder clearIsRoom() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isRoom_ = false;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents room_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public boolean hasRoom() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents getRoom() {
        return room_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public Builder setRoom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents value) {
        if (value == null) {
          throw new NullPointerException();
        }
        room_ = value;

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public Builder setRoom(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.Builder builderForValue) {
        room_ = builderForValue.build();

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public Builder mergeRoom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents value) {
        if (((bitField0_ & 0x00000800) == 0x00000800) &&
            room_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance()) {
          room_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.newBuilder(room_).mergeFrom(value).buildPartial();
        } else {
          room_ = value;
        }

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingExtents room = 12;</code>
       */
      public Builder clearRoom() {
        room_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingExtents.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection direction_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection.NORTH;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
       *
       * <pre>
       *Doesn't mean anything for most buildings
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
       *
       * <pre>
       *Doesn't mean anything for most buildings
       * </pre>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection getDirection() {
        return direction_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
       *
       * <pre>
       *Doesn't mean anything for most buildings
       * </pre>
       */
      public Builder setDirection(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        direction_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BuildingDirection direction = 13;</code>
       *
       * <pre>
       *Doesn't mean anything for most buildings
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00001000);
        direction_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDirection.NORTH;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingInstance)
    }

    static {
      defaultInstance = new BuildingInstance(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingInstance)
  }

  public interface RiverEdgeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.RiverEdge)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 min_pos = 1;</code>
     */
    boolean hasMinPos();
    /**
     * <code>optional int32 min_pos = 1;</code>
     */
    int getMinPos();

    /**
     * <code>optional int32 max_pos = 2;</code>
     */
    boolean hasMaxPos();
    /**
     * <code>optional int32 max_pos = 2;</code>
     */
    int getMaxPos();

    /**
     * <code>optional int32 active = 3;</code>
     */
    boolean hasActive();
    /**
     * <code>optional int32 active = 3;</code>
     */
    int getActive();

    /**
     * <code>optional int32 elevation = 4;</code>
     */
    boolean hasElevation();
    /**
     * <code>optional int32 elevation = 4;</code>
     */
    int getElevation();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RiverEdge}
   */
  public static final class RiverEdge extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.RiverEdge)
      RiverEdgeOrBuilder {
    // Use RiverEdge.newBuilder() to construct.
    private RiverEdge(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RiverEdge(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final RiverEdge defaultInstance;
    public static RiverEdge getDefaultInstance() {
      return defaultInstance;
    }

    public RiverEdge getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private RiverEdge(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              minPos_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              maxPos_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              active_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              elevation_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RiverEdge> PARSER =
        new com.google.protobuf.AbstractParser<RiverEdge>() {
      public RiverEdge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RiverEdge(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RiverEdge> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MIN_POS_FIELD_NUMBER = 1;
    private int minPos_;
    /**
     * <code>optional int32 min_pos = 1;</code>
     */
    public boolean hasMinPos() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 min_pos = 1;</code>
     */
    public int getMinPos() {
      return minPos_;
    }

    public static final int MAX_POS_FIELD_NUMBER = 2;
    private int maxPos_;
    /**
     * <code>optional int32 max_pos = 2;</code>
     */
    public boolean hasMaxPos() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 max_pos = 2;</code>
     */
    public int getMaxPos() {
      return maxPos_;
    }

    public static final int ACTIVE_FIELD_NUMBER = 3;
    private int active_;
    /**
     * <code>optional int32 active = 3;</code>
     */
    public boolean hasActive() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 active = 3;</code>
     */
    public int getActive() {
      return active_;
    }

    public static final int ELEVATION_FIELD_NUMBER = 4;
    private int elevation_;
    /**
     * <code>optional int32 elevation = 4;</code>
     */
    public boolean hasElevation() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 elevation = 4;</code>
     */
    public int getElevation() {
      return elevation_;
    }

    private void initFields() {
      minPos_ = 0;
      maxPos_ = 0;
      active_ = 0;
      elevation_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, minPos_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, maxPos_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, active_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, elevation_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, minPos_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, maxPos_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, active_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, elevation_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RiverEdge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.RiverEdge)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdgeOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        minPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxPos_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        active_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        elevation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.minPos_ = minPos_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxPos_ = maxPos_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.active_ = active_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.elevation_ = elevation_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance()) return this;
        if (other.hasMinPos()) {
          setMinPos(other.getMinPos());
        }
        if (other.hasMaxPos()) {
          setMaxPos(other.getMaxPos());
        }
        if (other.hasActive()) {
          setActive(other.getActive());
        }
        if (other.hasElevation()) {
          setElevation(other.getElevation());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int minPos_ ;
      /**
       * <code>optional int32 min_pos = 1;</code>
       */
      public boolean hasMinPos() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 min_pos = 1;</code>
       */
      public int getMinPos() {
        return minPos_;
      }
      /**
       * <code>optional int32 min_pos = 1;</code>
       */
      public Builder setMinPos(int value) {
        bitField0_ |= 0x00000001;
        minPos_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 min_pos = 1;</code>
       */
      public Builder clearMinPos() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minPos_ = 0;
        
        return this;
      }

      private int maxPos_ ;
      /**
       * <code>optional int32 max_pos = 2;</code>
       */
      public boolean hasMaxPos() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 max_pos = 2;</code>
       */
      public int getMaxPos() {
        return maxPos_;
      }
      /**
       * <code>optional int32 max_pos = 2;</code>
       */
      public Builder setMaxPos(int value) {
        bitField0_ |= 0x00000002;
        maxPos_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 max_pos = 2;</code>
       */
      public Builder clearMaxPos() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxPos_ = 0;
        
        return this;
      }

      private int active_ ;
      /**
       * <code>optional int32 active = 3;</code>
       */
      public boolean hasActive() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 active = 3;</code>
       */
      public int getActive() {
        return active_;
      }
      /**
       * <code>optional int32 active = 3;</code>
       */
      public Builder setActive(int value) {
        bitField0_ |= 0x00000004;
        active_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 active = 3;</code>
       */
      public Builder clearActive() {
        bitField0_ = (bitField0_ & ~0x00000004);
        active_ = 0;
        
        return this;
      }

      private int elevation_ ;
      /**
       * <code>optional int32 elevation = 4;</code>
       */
      public boolean hasElevation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 elevation = 4;</code>
       */
      public int getElevation() {
        return elevation_;
      }
      /**
       * <code>optional int32 elevation = 4;</code>
       */
      public Builder setElevation(int value) {
        bitField0_ |= 0x00000008;
        elevation_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 elevation = 4;</code>
       */
      public Builder clearElevation() {
        bitField0_ = (bitField0_ & ~0x00000008);
        elevation_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.RiverEdge)
    }

    static {
      defaultInstance = new RiverEdge(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.RiverEdge)
  }

  public interface RiverTileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.RiverTile)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
     */
    boolean hasNorth();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getNorth();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
     */
    boolean hasSouth();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getSouth();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
     */
    boolean hasEast();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getEast();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
     */
    boolean hasWest();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getWest();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RiverTile}
   */
  public static final class RiverTile extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.RiverTile)
      RiverTileOrBuilder {
    // Use RiverTile.newBuilder() to construct.
    private RiverTile(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RiverTile(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final RiverTile defaultInstance;
    public static RiverTile getDefaultInstance() {
      return defaultInstance;
    }

    public RiverTile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private RiverTile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = north_.toBuilder();
              }
              north_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(north_);
                north_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = south_.toBuilder();
              }
              south_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(south_);
                south_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = east_.toBuilder();
              }
              east_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(east_);
                east_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = west_.toBuilder();
              }
              west_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(west_);
                west_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RiverTile> PARSER =
        new com.google.protobuf.AbstractParser<RiverTile>() {
      public RiverTile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RiverTile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RiverTile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NORTH_FIELD_NUMBER = 1;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge north_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
     */
    public boolean hasNorth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getNorth() {
      return north_;
    }

    public static final int SOUTH_FIELD_NUMBER = 2;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge south_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
     */
    public boolean hasSouth() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getSouth() {
      return south_;
    }

    public static final int EAST_FIELD_NUMBER = 3;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge east_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
     */
    public boolean hasEast() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getEast() {
      return east_;
    }

    public static final int WEST_FIELD_NUMBER = 4;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge west_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
     */
    public boolean hasWest() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getWest() {
      return west_;
    }

    private void initFields() {
      north_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      south_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      east_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      west_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, north_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, south_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, east_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, west_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, north_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, south_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, east_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, west_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RiverTile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.RiverTile)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTileOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        north_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        south_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        east_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        west_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.north_ = north_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.south_ = south_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.east_ = east_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.west_ = west_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance()) return this;
        if (other.hasNorth()) {
          mergeNorth(other.getNorth());
        }
        if (other.hasSouth()) {
          mergeSouth(other.getSouth());
        }
        if (other.hasEast()) {
          mergeEast(other.getEast());
        }
        if (other.hasWest()) {
          mergeWest(other.getWest());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge north_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public boolean hasNorth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getNorth() {
        return north_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public Builder setNorth(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        north_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public Builder setNorth(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder builderForValue) {
        north_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public Builder mergeNorth(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            north_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance()) {
          north_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.newBuilder(north_).mergeFrom(value).buildPartial();
        } else {
          north_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge north = 1;</code>
       */
      public Builder clearNorth() {
        north_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge south_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public boolean hasSouth() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getSouth() {
        return south_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public Builder setSouth(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        south_ = value;

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public Builder setSouth(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder builderForValue) {
        south_ = builderForValue.build();

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public Builder mergeSouth(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            south_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance()) {
          south_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.newBuilder(south_).mergeFrom(value).buildPartial();
        } else {
          south_ = value;
        }

        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge south = 2;</code>
       */
      public Builder clearSouth() {
        south_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge east_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public boolean hasEast() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getEast() {
        return east_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public Builder setEast(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        east_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public Builder setEast(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder builderForValue) {
        east_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public Builder mergeEast(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            east_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance()) {
          east_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.newBuilder(east_).mergeFrom(value).buildPartial();
        } else {
          east_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge east = 3;</code>
       */
      public Builder clearEast() {
        east_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge west_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public boolean hasWest() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge getWest() {
        return west_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public Builder setWest(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (value == null) {
          throw new NullPointerException();
        }
        west_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public Builder setWest(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.Builder builderForValue) {
        west_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public Builder mergeWest(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            west_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance()) {
          west_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.newBuilder(west_).mergeFrom(value).buildPartial();
        } else {
          west_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverEdge west = 4;</code>
       */
      public Builder clearWest() {
        west_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverEdge.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.RiverTile)
    }

    static {
      defaultInstance = new RiverTile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.RiverTile)
  }

  public interface MapBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.MapBlock)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 map_x = 1;</code>
     */
    boolean hasMapX();
    /**
     * <code>required int32 map_x = 1;</code>
     */
    int getMapX();

    /**
     * <code>required int32 map_y = 2;</code>
     */
    boolean hasMapY();
    /**
     * <code>required int32 map_y = 2;</code>
     */
    int getMapY();

    /**
     * <code>required int32 map_z = 3;</code>
     */
    boolean hasMapZ();
    /**
     * <code>required int32 map_z = 3;</code>
     */
    int getMapZ();

    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    java.util.List<java.lang.Integer> getTilesList();
    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    int getTilesCount();
    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    int getTiles(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> 
        getMaterialsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterials(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    int getMaterialsCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> 
        getLayerMaterialsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getLayerMaterials(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    int getLayerMaterialsCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> 
        getVeinMaterialsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getVeinMaterials(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    int getVeinMaterialsCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> 
        getBaseMaterialsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getBaseMaterials(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    int getBaseMaterialsCount();

    /**
     * <code>repeated int32 magma = 9;</code>
     */
    java.util.List<java.lang.Integer> getMagmaList();
    /**
     * <code>repeated int32 magma = 9;</code>
     */
    int getMagmaCount();
    /**
     * <code>repeated int32 magma = 9;</code>
     */
    int getMagma(int index);

    /**
     * <code>repeated int32 water = 10;</code>
     */
    java.util.List<java.lang.Integer> getWaterList();
    /**
     * <code>repeated int32 water = 10;</code>
     */
    int getWaterCount();
    /**
     * <code>repeated int32 water = 10;</code>
     */
    int getWater(int index);

    /**
     * <code>repeated bool hidden = 11;</code>
     */
    java.util.List<java.lang.Boolean> getHiddenList();
    /**
     * <code>repeated bool hidden = 11;</code>
     */
    int getHiddenCount();
    /**
     * <code>repeated bool hidden = 11;</code>
     */
    boolean getHidden(int index);

    /**
     * <code>repeated bool light = 12;</code>
     */
    java.util.List<java.lang.Boolean> getLightList();
    /**
     * <code>repeated bool light = 12;</code>
     */
    int getLightCount();
    /**
     * <code>repeated bool light = 12;</code>
     */
    boolean getLight(int index);

    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    java.util.List<java.lang.Boolean> getSubterraneanList();
    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    int getSubterraneanCount();
    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    boolean getSubterranean(int index);

    /**
     * <code>repeated bool outside = 14;</code>
     */
    java.util.List<java.lang.Boolean> getOutsideList();
    /**
     * <code>repeated bool outside = 14;</code>
     */
    int getOutsideCount();
    /**
     * <code>repeated bool outside = 14;</code>
     */
    boolean getOutside(int index);

    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    java.util.List<java.lang.Boolean> getAquiferList();
    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    int getAquiferCount();
    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    boolean getAquifer(int index);

    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    java.util.List<java.lang.Boolean> getWaterStagnantList();
    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    int getWaterStagnantCount();
    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    boolean getWaterStagnant(int index);

    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    java.util.List<java.lang.Boolean> getWaterSaltList();
    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    int getWaterSaltCount();
    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    boolean getWaterSalt(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> 
        getConstructionItemsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getConstructionItems(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    int getConstructionItemsCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> 
        getBuildingsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance getBuildings(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    int getBuildingsCount();

    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    java.util.List<java.lang.Integer> getTreePercentList();
    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    int getTreePercentCount();
    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    int getTreePercent(int index);

    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    java.util.List<java.lang.Integer> getTreeXList();
    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    int getTreeXCount();
    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    int getTreeX(int index);

    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    java.util.List<java.lang.Integer> getTreeYList();
    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    int getTreeYCount();
    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    int getTreeY(int index);

    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    java.util.List<java.lang.Integer> getTreeZList();
    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    int getTreeZCount();
    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    int getTreeZ(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> getTileDigDesignationList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    int getTileDigDesignationCount();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation getTileDigDesignation(int index);
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MapBlock}
   */
  public static final class MapBlock extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.MapBlock)
      MapBlockOrBuilder {
    // Use MapBlock.newBuilder() to construct.
    private MapBlock(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MapBlock(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final MapBlock defaultInstance;
    public static MapBlock getDefaultInstance() {
      return defaultInstance;
    }

    public MapBlock getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private MapBlock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mapX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mapY_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              mapZ_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              tiles_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                tiles_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                tiles_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                materials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>();
                mutable_bitField0_ |= 0x00000010;
              }
              materials_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry));
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                layerMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>();
                mutable_bitField0_ |= 0x00000020;
              }
              layerMaterials_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry));
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                veinMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>();
                mutable_bitField0_ |= 0x00000040;
              }
              veinMaterials_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry));
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                baseMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>();
                mutable_bitField0_ |= 0x00000080;
              }
              baseMaterials_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                magma_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              magma_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                magma_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                magma_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                water_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              water_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                water_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                water_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                hidden_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000400;
              }
              hidden_.add(input.readBool());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                hidden_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                hidden_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                light_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              light_.add(input.readBool());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                light_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                light_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                subterranean_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00001000;
              }
              subterranean_.add(input.readBool());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                subterranean_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                subterranean_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                outside_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00002000;
              }
              outside_.add(input.readBool());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                outside_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                outside_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
                aquifer_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00004000;
              }
              aquifer_.add(input.readBool());
              break;
            }
            case 122: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00004000) == 0x00004000) && input.getBytesUntilLimit() > 0) {
                aquifer_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00004000;
              }
              while (input.getBytesUntilLimit() > 0) {
                aquifer_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 128: {
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
                waterStagnant_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00008000;
              }
              waterStagnant_.add(input.readBool());
              break;
            }
            case 130: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00008000) == 0x00008000) && input.getBytesUntilLimit() > 0) {
                waterStagnant_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00008000;
              }
              while (input.getBytesUntilLimit() > 0) {
                waterStagnant_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 136: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                waterSalt_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00010000;
              }
              waterSalt_.add(input.readBool());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                waterSalt_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                waterSalt_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 146: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                constructionItems_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>();
                mutable_bitField0_ |= 0x00020000;
              }
              constructionItems_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry));
              break;
            }
            case 154: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                buildings_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance>();
                mutable_bitField0_ |= 0x00040000;
              }
              buildings_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.PARSER, extensionRegistry));
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                treePercent_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              treePercent_.add(input.readInt32());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                treePercent_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                treePercent_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                treeX_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              treeX_.add(input.readInt32());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                treeX_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                treeX_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                treeY_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              treeY_.add(input.readInt32());
              break;
            }
            case 178: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000) && input.getBytesUntilLimit() > 0) {
                treeY_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00200000;
              }
              while (input.getBytesUntilLimit() > 0) {
                treeY_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                treeZ_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              treeZ_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                treeZ_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                treeZ_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
                } else {
                if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                  tileDigDesignation_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation>();
                  mutable_bitField0_ |= 0x00800000;
                }
                tileDigDesignation_.add(value);
              }
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation.valueOf(rawValue);
                if (value == null) {
                  unknownFieldsCodedOutput.writeRawVarint32(tag);
                  unknownFieldsCodedOutput.writeRawVarint32(rawValue);
                  } else {
                  if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                    tileDigDesignation_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation>();
                    mutable_bitField0_ |= 0x00800000;
                  }
                  tileDigDesignation_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          materials_ = java.util.Collections.unmodifiableList(materials_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          layerMaterials_ = java.util.Collections.unmodifiableList(layerMaterials_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          veinMaterials_ = java.util.Collections.unmodifiableList(veinMaterials_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          baseMaterials_ = java.util.Collections.unmodifiableList(baseMaterials_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          magma_ = java.util.Collections.unmodifiableList(magma_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          water_ = java.util.Collections.unmodifiableList(water_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          hidden_ = java.util.Collections.unmodifiableList(hidden_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          light_ = java.util.Collections.unmodifiableList(light_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          subterranean_ = java.util.Collections.unmodifiableList(subterranean_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          outside_ = java.util.Collections.unmodifiableList(outside_);
        }
        if (((mutable_bitField0_ & 0x00004000) == 0x00004000)) {
          aquifer_ = java.util.Collections.unmodifiableList(aquifer_);
        }
        if (((mutable_bitField0_ & 0x00008000) == 0x00008000)) {
          waterStagnant_ = java.util.Collections.unmodifiableList(waterStagnant_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          waterSalt_ = java.util.Collections.unmodifiableList(waterSalt_);
        }
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          constructionItems_ = java.util.Collections.unmodifiableList(constructionItems_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          buildings_ = java.util.Collections.unmodifiableList(buildings_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          treePercent_ = java.util.Collections.unmodifiableList(treePercent_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          treeX_ = java.util.Collections.unmodifiableList(treeX_);
        }
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          treeY_ = java.util.Collections.unmodifiableList(treeY_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          treeZ_ = java.util.Collections.unmodifiableList(treeZ_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          tileDigDesignation_ = java.util.Collections.unmodifiableList(tileDigDesignation_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MapBlock> PARSER =
        new com.google.protobuf.AbstractParser<MapBlock>() {
      public MapBlock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MapBlock(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MapBlock> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAP_X_FIELD_NUMBER = 1;
    private int mapX_;
    /**
     * <code>required int32 map_x = 1;</code>
     */
    public boolean hasMapX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 map_x = 1;</code>
     */
    public int getMapX() {
      return mapX_;
    }

    public static final int MAP_Y_FIELD_NUMBER = 2;
    private int mapY_;
    /**
     * <code>required int32 map_y = 2;</code>
     */
    public boolean hasMapY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 map_y = 2;</code>
     */
    public int getMapY() {
      return mapY_;
    }

    public static final int MAP_Z_FIELD_NUMBER = 3;
    private int mapZ_;
    /**
     * <code>required int32 map_z = 3;</code>
     */
    public boolean hasMapZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 map_z = 3;</code>
     */
    public int getMapZ() {
      return mapZ_;
    }

    public static final int TILES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> tiles_;
    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated int32 tiles = 4;</code>
     */
    public int getTiles(int index) {
      return tiles_.get(index);
    }

    public static final int MATERIALS_FIELD_NUMBER = 5;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> materials_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getMaterialsList() {
      return materials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder> 
        getMaterialsOrBuilderList() {
      return materials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    public int getMaterialsCount() {
      return materials_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterials(int index) {
      return materials_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder getMaterialsOrBuilder(
        int index) {
      return materials_.get(index);
    }

    public static final int LAYER_MATERIALS_FIELD_NUMBER = 6;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> layerMaterials_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getLayerMaterialsList() {
      return layerMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder> 
        getLayerMaterialsOrBuilderList() {
      return layerMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    public int getLayerMaterialsCount() {
      return layerMaterials_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getLayerMaterials(int index) {
      return layerMaterials_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder getLayerMaterialsOrBuilder(
        int index) {
      return layerMaterials_.get(index);
    }

    public static final int VEIN_MATERIALS_FIELD_NUMBER = 7;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> veinMaterials_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getVeinMaterialsList() {
      return veinMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder> 
        getVeinMaterialsOrBuilderList() {
      return veinMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    public int getVeinMaterialsCount() {
      return veinMaterials_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getVeinMaterials(int index) {
      return veinMaterials_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder getVeinMaterialsOrBuilder(
        int index) {
      return veinMaterials_.get(index);
    }

    public static final int BASE_MATERIALS_FIELD_NUMBER = 8;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> baseMaterials_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getBaseMaterialsList() {
      return baseMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder> 
        getBaseMaterialsOrBuilderList() {
      return baseMaterials_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    public int getBaseMaterialsCount() {
      return baseMaterials_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getBaseMaterials(int index) {
      return baseMaterials_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder getBaseMaterialsOrBuilder(
        int index) {
      return baseMaterials_.get(index);
    }

    public static final int MAGMA_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> magma_;
    /**
     * <code>repeated int32 magma = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getMagmaList() {
      return magma_;
    }
    /**
     * <code>repeated int32 magma = 9;</code>
     */
    public int getMagmaCount() {
      return magma_.size();
    }
    /**
     * <code>repeated int32 magma = 9;</code>
     */
    public int getMagma(int index) {
      return magma_.get(index);
    }

    public static final int WATER_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> water_;
    /**
     * <code>repeated int32 water = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getWaterList() {
      return water_;
    }
    /**
     * <code>repeated int32 water = 10;</code>
     */
    public int getWaterCount() {
      return water_.size();
    }
    /**
     * <code>repeated int32 water = 10;</code>
     */
    public int getWater(int index) {
      return water_.get(index);
    }

    public static final int HIDDEN_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Boolean> hidden_;
    /**
     * <code>repeated bool hidden = 11;</code>
     */
    public java.util.List<java.lang.Boolean>
        getHiddenList() {
      return hidden_;
    }
    /**
     * <code>repeated bool hidden = 11;</code>
     */
    public int getHiddenCount() {
      return hidden_.size();
    }
    /**
     * <code>repeated bool hidden = 11;</code>
     */
    public boolean getHidden(int index) {
      return hidden_.get(index);
    }

    public static final int LIGHT_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Boolean> light_;
    /**
     * <code>repeated bool light = 12;</code>
     */
    public java.util.List<java.lang.Boolean>
        getLightList() {
      return light_;
    }
    /**
     * <code>repeated bool light = 12;</code>
     */
    public int getLightCount() {
      return light_.size();
    }
    /**
     * <code>repeated bool light = 12;</code>
     */
    public boolean getLight(int index) {
      return light_.get(index);
    }

    public static final int SUBTERRANEAN_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Boolean> subterranean_;
    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    public java.util.List<java.lang.Boolean>
        getSubterraneanList() {
      return subterranean_;
    }
    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    public int getSubterraneanCount() {
      return subterranean_.size();
    }
    /**
     * <code>repeated bool subterranean = 13;</code>
     */
    public boolean getSubterranean(int index) {
      return subterranean_.get(index);
    }

    public static final int OUTSIDE_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Boolean> outside_;
    /**
     * <code>repeated bool outside = 14;</code>
     */
    public java.util.List<java.lang.Boolean>
        getOutsideList() {
      return outside_;
    }
    /**
     * <code>repeated bool outside = 14;</code>
     */
    public int getOutsideCount() {
      return outside_.size();
    }
    /**
     * <code>repeated bool outside = 14;</code>
     */
    public boolean getOutside(int index) {
      return outside_.get(index);
    }

    public static final int AQUIFER_FIELD_NUMBER = 15;
    private java.util.List<java.lang.Boolean> aquifer_;
    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    public java.util.List<java.lang.Boolean>
        getAquiferList() {
      return aquifer_;
    }
    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    public int getAquiferCount() {
      return aquifer_.size();
    }
    /**
     * <code>repeated bool aquifer = 15;</code>
     */
    public boolean getAquifer(int index) {
      return aquifer_.get(index);
    }

    public static final int WATER_STAGNANT_FIELD_NUMBER = 16;
    private java.util.List<java.lang.Boolean> waterStagnant_;
    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    public java.util.List<java.lang.Boolean>
        getWaterStagnantList() {
      return waterStagnant_;
    }
    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    public int getWaterStagnantCount() {
      return waterStagnant_.size();
    }
    /**
     * <code>repeated bool water_stagnant = 16;</code>
     */
    public boolean getWaterStagnant(int index) {
      return waterStagnant_.get(index);
    }

    public static final int WATER_SALT_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Boolean> waterSalt_;
    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    public java.util.List<java.lang.Boolean>
        getWaterSaltList() {
      return waterSalt_;
    }
    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    public int getWaterSaltCount() {
      return waterSalt_.size();
    }
    /**
     * <code>repeated bool water_salt = 17;</code>
     */
    public boolean getWaterSalt(int index) {
      return waterSalt_.get(index);
    }

    public static final int CONSTRUCTION_ITEMS_FIELD_NUMBER = 18;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> constructionItems_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getConstructionItemsList() {
      return constructionItems_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder> 
        getConstructionItemsOrBuilderList() {
      return constructionItems_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    public int getConstructionItemsCount() {
      return constructionItems_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getConstructionItems(int index) {
      return constructionItems_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder getConstructionItemsOrBuilder(
        int index) {
      return constructionItems_.get(index);
    }

    public static final int BUILDINGS_FIELD_NUMBER = 19;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> buildings_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> getBuildingsList() {
      return buildings_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstanceOrBuilder> 
        getBuildingsOrBuilderList() {
      return buildings_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    public int getBuildingsCount() {
      return buildings_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance getBuildings(int index) {
      return buildings_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstanceOrBuilder getBuildingsOrBuilder(
        int index) {
      return buildings_.get(index);
    }

    public static final int TREE_PERCENT_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Integer> treePercent_;
    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    public java.util.List<java.lang.Integer>
        getTreePercentList() {
      return treePercent_;
    }
    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    public int getTreePercentCount() {
      return treePercent_.size();
    }
    /**
     * <code>repeated int32 tree_percent = 20;</code>
     */
    public int getTreePercent(int index) {
      return treePercent_.get(index);
    }

    public static final int TREE_X_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Integer> treeX_;
    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    public java.util.List<java.lang.Integer>
        getTreeXList() {
      return treeX_;
    }
    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    public int getTreeXCount() {
      return treeX_.size();
    }
    /**
     * <code>repeated int32 tree_x = 21;</code>
     */
    public int getTreeX(int index) {
      return treeX_.get(index);
    }

    public static final int TREE_Y_FIELD_NUMBER = 22;
    private java.util.List<java.lang.Integer> treeY_;
    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    public java.util.List<java.lang.Integer>
        getTreeYList() {
      return treeY_;
    }
    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    public int getTreeYCount() {
      return treeY_.size();
    }
    /**
     * <code>repeated int32 tree_y = 22;</code>
     */
    public int getTreeY(int index) {
      return treeY_.get(index);
    }

    public static final int TREE_Z_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> treeZ_;
    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    public java.util.List<java.lang.Integer>
        getTreeZList() {
      return treeZ_;
    }
    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    public int getTreeZCount() {
      return treeZ_.size();
    }
    /**
     * <code>repeated int32 tree_z = 23;</code>
     */
    public int getTreeZ(int index) {
      return treeZ_.get(index);
    }

    public static final int TILE_DIG_DESIGNATION_FIELD_NUMBER = 24;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> tileDigDesignation_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> getTileDigDesignationList() {
      return tileDigDesignation_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    public int getTileDigDesignationCount() {
      return tileDigDesignation_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation getTileDigDesignation(int index) {
      return tileDigDesignation_.get(index);
    }

    private void initFields() {
      mapX_ = 0;
      mapY_ = 0;
      mapZ_ = 0;
      tiles_ = java.util.Collections.emptyList();
      materials_ = java.util.Collections.emptyList();
      layerMaterials_ = java.util.Collections.emptyList();
      veinMaterials_ = java.util.Collections.emptyList();
      baseMaterials_ = java.util.Collections.emptyList();
      magma_ = java.util.Collections.emptyList();
      water_ = java.util.Collections.emptyList();
      hidden_ = java.util.Collections.emptyList();
      light_ = java.util.Collections.emptyList();
      subterranean_ = java.util.Collections.emptyList();
      outside_ = java.util.Collections.emptyList();
      aquifer_ = java.util.Collections.emptyList();
      waterStagnant_ = java.util.Collections.emptyList();
      waterSalt_ = java.util.Collections.emptyList();
      constructionItems_ = java.util.Collections.emptyList();
      buildings_ = java.util.Collections.emptyList();
      treePercent_ = java.util.Collections.emptyList();
      treeX_ = java.util.Collections.emptyList();
      treeY_ = java.util.Collections.emptyList();
      treeZ_ = java.util.Collections.emptyList();
      tileDigDesignation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMapX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMapY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMapZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getMaterialsCount(); i++) {
        if (!getMaterials(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getLayerMaterialsCount(); i++) {
        if (!getLayerMaterials(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getVeinMaterialsCount(); i++) {
        if (!getVeinMaterials(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBaseMaterialsCount(); i++) {
        if (!getBaseMaterials(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getConstructionItemsCount(); i++) {
        if (!getConstructionItems(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getBuildingsCount(); i++) {
        if (!getBuildings(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mapY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, mapZ_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeInt32(4, tiles_.get(i));
      }
      for (int i = 0; i < materials_.size(); i++) {
        output.writeMessage(5, materials_.get(i));
      }
      for (int i = 0; i < layerMaterials_.size(); i++) {
        output.writeMessage(6, layerMaterials_.get(i));
      }
      for (int i = 0; i < veinMaterials_.size(); i++) {
        output.writeMessage(7, veinMaterials_.get(i));
      }
      for (int i = 0; i < baseMaterials_.size(); i++) {
        output.writeMessage(8, baseMaterials_.get(i));
      }
      for (int i = 0; i < magma_.size(); i++) {
        output.writeInt32(9, magma_.get(i));
      }
      for (int i = 0; i < water_.size(); i++) {
        output.writeInt32(10, water_.get(i));
      }
      for (int i = 0; i < hidden_.size(); i++) {
        output.writeBool(11, hidden_.get(i));
      }
      for (int i = 0; i < light_.size(); i++) {
        output.writeBool(12, light_.get(i));
      }
      for (int i = 0; i < subterranean_.size(); i++) {
        output.writeBool(13, subterranean_.get(i));
      }
      for (int i = 0; i < outside_.size(); i++) {
        output.writeBool(14, outside_.get(i));
      }
      for (int i = 0; i < aquifer_.size(); i++) {
        output.writeBool(15, aquifer_.get(i));
      }
      for (int i = 0; i < waterStagnant_.size(); i++) {
        output.writeBool(16, waterStagnant_.get(i));
      }
      for (int i = 0; i < waterSalt_.size(); i++) {
        output.writeBool(17, waterSalt_.get(i));
      }
      for (int i = 0; i < constructionItems_.size(); i++) {
        output.writeMessage(18, constructionItems_.get(i));
      }
      for (int i = 0; i < buildings_.size(); i++) {
        output.writeMessage(19, buildings_.get(i));
      }
      for (int i = 0; i < treePercent_.size(); i++) {
        output.writeInt32(20, treePercent_.get(i));
      }
      for (int i = 0; i < treeX_.size(); i++) {
        output.writeInt32(21, treeX_.get(i));
      }
      for (int i = 0; i < treeY_.size(); i++) {
        output.writeInt32(22, treeY_.get(i));
      }
      for (int i = 0; i < treeZ_.size(); i++) {
        output.writeInt32(23, treeZ_.get(i));
      }
      for (int i = 0; i < tileDigDesignation_.size(); i++) {
        output.writeEnum(24, tileDigDesignation_.get(i).getNumber());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, mapY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, mapZ_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tiles_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(tiles_.get(i));
        }
        size += dataSize;
        size += 1 * getTilesList().size();
      }
      for (int i = 0; i < materials_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, materials_.get(i));
      }
      for (int i = 0; i < layerMaterials_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, layerMaterials_.get(i));
      }
      for (int i = 0; i < veinMaterials_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, veinMaterials_.get(i));
      }
      for (int i = 0; i < baseMaterials_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, baseMaterials_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < magma_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(magma_.get(i));
        }
        size += dataSize;
        size += 1 * getMagmaList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < water_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(water_.get(i));
        }
        size += dataSize;
        size += 1 * getWaterList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getHiddenList().size();
        size += dataSize;
        size += 1 * getHiddenList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getLightList().size();
        size += dataSize;
        size += 1 * getLightList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getSubterraneanList().size();
        size += dataSize;
        size += 1 * getSubterraneanList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getOutsideList().size();
        size += dataSize;
        size += 1 * getOutsideList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getAquiferList().size();
        size += dataSize;
        size += 1 * getAquiferList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getWaterStagnantList().size();
        size += dataSize;
        size += 2 * getWaterStagnantList().size();
      }
      {
        int dataSize = 0;
        dataSize = 1 * getWaterSaltList().size();
        size += dataSize;
        size += 2 * getWaterSaltList().size();
      }
      for (int i = 0; i < constructionItems_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, constructionItems_.get(i));
      }
      for (int i = 0; i < buildings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, buildings_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < treePercent_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(treePercent_.get(i));
        }
        size += dataSize;
        size += 2 * getTreePercentList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < treeX_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(treeX_.get(i));
        }
        size += dataSize;
        size += 2 * getTreeXList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < treeY_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(treeY_.get(i));
        }
        size += dataSize;
        size += 2 * getTreeYList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < treeZ_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(treeZ_.get(i));
        }
        size += dataSize;
        size += 2 * getTreeZList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tileDigDesignation_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(tileDigDesignation_.get(i).getNumber());
        }
        size += dataSize;
        size += 2 * tileDigDesignation_.size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MapBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.MapBlock)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlockOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mapX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mapY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mapZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        materials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        layerMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        veinMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        baseMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        magma_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        water_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        hidden_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        light_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        subterranean_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        outside_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        aquifer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        waterStagnant_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        waterSalt_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        constructionItems_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        buildings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        treePercent_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        treeX_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        treeY_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        treeZ_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        tileDigDesignation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mapX_ = mapX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mapY_ = mapY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mapZ_ = mapZ_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.tiles_ = tiles_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          materials_ = java.util.Collections.unmodifiableList(materials_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.materials_ = materials_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          layerMaterials_ = java.util.Collections.unmodifiableList(layerMaterials_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.layerMaterials_ = layerMaterials_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          veinMaterials_ = java.util.Collections.unmodifiableList(veinMaterials_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.veinMaterials_ = veinMaterials_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          baseMaterials_ = java.util.Collections.unmodifiableList(baseMaterials_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.baseMaterials_ = baseMaterials_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          magma_ = java.util.Collections.unmodifiableList(magma_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.magma_ = magma_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          water_ = java.util.Collections.unmodifiableList(water_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.water_ = water_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          hidden_ = java.util.Collections.unmodifiableList(hidden_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.hidden_ = hidden_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          light_ = java.util.Collections.unmodifiableList(light_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.light_ = light_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          subterranean_ = java.util.Collections.unmodifiableList(subterranean_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.subterranean_ = subterranean_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          outside_ = java.util.Collections.unmodifiableList(outside_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.outside_ = outside_;
        if (((bitField0_ & 0x00004000) == 0x00004000)) {
          aquifer_ = java.util.Collections.unmodifiableList(aquifer_);
          bitField0_ = (bitField0_ & ~0x00004000);
        }
        result.aquifer_ = aquifer_;
        if (((bitField0_ & 0x00008000) == 0x00008000)) {
          waterStagnant_ = java.util.Collections.unmodifiableList(waterStagnant_);
          bitField0_ = (bitField0_ & ~0x00008000);
        }
        result.waterStagnant_ = waterStagnant_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          waterSalt_ = java.util.Collections.unmodifiableList(waterSalt_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.waterSalt_ = waterSalt_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          constructionItems_ = java.util.Collections.unmodifiableList(constructionItems_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.constructionItems_ = constructionItems_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          buildings_ = java.util.Collections.unmodifiableList(buildings_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.buildings_ = buildings_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          treePercent_ = java.util.Collections.unmodifiableList(treePercent_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.treePercent_ = treePercent_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          treeX_ = java.util.Collections.unmodifiableList(treeX_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.treeX_ = treeX_;
        if (((bitField0_ & 0x00200000) == 0x00200000)) {
          treeY_ = java.util.Collections.unmodifiableList(treeY_);
          bitField0_ = (bitField0_ & ~0x00200000);
        }
        result.treeY_ = treeY_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          treeZ_ = java.util.Collections.unmodifiableList(treeZ_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.treeZ_ = treeZ_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          tileDigDesignation_ = java.util.Collections.unmodifiableList(tileDigDesignation_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.tileDigDesignation_ = tileDigDesignation_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.getDefaultInstance()) return this;
        if (other.hasMapX()) {
          setMapX(other.getMapX());
        }
        if (other.hasMapY()) {
          setMapY(other.getMapY());
        }
        if (other.hasMapZ()) {
          setMapZ(other.getMapZ());
        }
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          
        }
        if (!other.materials_.isEmpty()) {
          if (materials_.isEmpty()) {
            materials_ = other.materials_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureMaterialsIsMutable();
            materials_.addAll(other.materials_);
          }
          
        }
        if (!other.layerMaterials_.isEmpty()) {
          if (layerMaterials_.isEmpty()) {
            layerMaterials_ = other.layerMaterials_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureLayerMaterialsIsMutable();
            layerMaterials_.addAll(other.layerMaterials_);
          }
          
        }
        if (!other.veinMaterials_.isEmpty()) {
          if (veinMaterials_.isEmpty()) {
            veinMaterials_ = other.veinMaterials_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureVeinMaterialsIsMutable();
            veinMaterials_.addAll(other.veinMaterials_);
          }
          
        }
        if (!other.baseMaterials_.isEmpty()) {
          if (baseMaterials_.isEmpty()) {
            baseMaterials_ = other.baseMaterials_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureBaseMaterialsIsMutable();
            baseMaterials_.addAll(other.baseMaterials_);
          }
          
        }
        if (!other.magma_.isEmpty()) {
          if (magma_.isEmpty()) {
            magma_ = other.magma_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureMagmaIsMutable();
            magma_.addAll(other.magma_);
          }
          
        }
        if (!other.water_.isEmpty()) {
          if (water_.isEmpty()) {
            water_ = other.water_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureWaterIsMutable();
            water_.addAll(other.water_);
          }
          
        }
        if (!other.hidden_.isEmpty()) {
          if (hidden_.isEmpty()) {
            hidden_ = other.hidden_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureHiddenIsMutable();
            hidden_.addAll(other.hidden_);
          }
          
        }
        if (!other.light_.isEmpty()) {
          if (light_.isEmpty()) {
            light_ = other.light_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureLightIsMutable();
            light_.addAll(other.light_);
          }
          
        }
        if (!other.subterranean_.isEmpty()) {
          if (subterranean_.isEmpty()) {
            subterranean_ = other.subterranean_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureSubterraneanIsMutable();
            subterranean_.addAll(other.subterranean_);
          }
          
        }
        if (!other.outside_.isEmpty()) {
          if (outside_.isEmpty()) {
            outside_ = other.outside_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureOutsideIsMutable();
            outside_.addAll(other.outside_);
          }
          
        }
        if (!other.aquifer_.isEmpty()) {
          if (aquifer_.isEmpty()) {
            aquifer_ = other.aquifer_;
            bitField0_ = (bitField0_ & ~0x00004000);
          } else {
            ensureAquiferIsMutable();
            aquifer_.addAll(other.aquifer_);
          }
          
        }
        if (!other.waterStagnant_.isEmpty()) {
          if (waterStagnant_.isEmpty()) {
            waterStagnant_ = other.waterStagnant_;
            bitField0_ = (bitField0_ & ~0x00008000);
          } else {
            ensureWaterStagnantIsMutable();
            waterStagnant_.addAll(other.waterStagnant_);
          }
          
        }
        if (!other.waterSalt_.isEmpty()) {
          if (waterSalt_.isEmpty()) {
            waterSalt_ = other.waterSalt_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureWaterSaltIsMutable();
            waterSalt_.addAll(other.waterSalt_);
          }
          
        }
        if (!other.constructionItems_.isEmpty()) {
          if (constructionItems_.isEmpty()) {
            constructionItems_ = other.constructionItems_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureConstructionItemsIsMutable();
            constructionItems_.addAll(other.constructionItems_);
          }
          
        }
        if (!other.buildings_.isEmpty()) {
          if (buildings_.isEmpty()) {
            buildings_ = other.buildings_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureBuildingsIsMutable();
            buildings_.addAll(other.buildings_);
          }
          
        }
        if (!other.treePercent_.isEmpty()) {
          if (treePercent_.isEmpty()) {
            treePercent_ = other.treePercent_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureTreePercentIsMutable();
            treePercent_.addAll(other.treePercent_);
          }
          
        }
        if (!other.treeX_.isEmpty()) {
          if (treeX_.isEmpty()) {
            treeX_ = other.treeX_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureTreeXIsMutable();
            treeX_.addAll(other.treeX_);
          }
          
        }
        if (!other.treeY_.isEmpty()) {
          if (treeY_.isEmpty()) {
            treeY_ = other.treeY_;
            bitField0_ = (bitField0_ & ~0x00200000);
          } else {
            ensureTreeYIsMutable();
            treeY_.addAll(other.treeY_);
          }
          
        }
        if (!other.treeZ_.isEmpty()) {
          if (treeZ_.isEmpty()) {
            treeZ_ = other.treeZ_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureTreeZIsMutable();
            treeZ_.addAll(other.treeZ_);
          }
          
        }
        if (!other.tileDigDesignation_.isEmpty()) {
          if (tileDigDesignation_.isEmpty()) {
            tileDigDesignation_ = other.tileDigDesignation_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureTileDigDesignationIsMutable();
            tileDigDesignation_.addAll(other.tileDigDesignation_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMapX()) {
          
          return false;
        }
        if (!hasMapY()) {
          
          return false;
        }
        if (!hasMapZ()) {
          
          return false;
        }
        for (int i = 0; i < getMaterialsCount(); i++) {
          if (!getMaterials(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getLayerMaterialsCount(); i++) {
          if (!getLayerMaterials(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getVeinMaterialsCount(); i++) {
          if (!getVeinMaterials(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBaseMaterialsCount(); i++) {
          if (!getBaseMaterials(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getConstructionItemsCount(); i++) {
          if (!getConstructionItems(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getBuildingsCount(); i++) {
          if (!getBuildings(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mapX_ ;
      /**
       * <code>required int32 map_x = 1;</code>
       */
      public boolean hasMapX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 map_x = 1;</code>
       */
      public int getMapX() {
        return mapX_;
      }
      /**
       * <code>required int32 map_x = 1;</code>
       */
      public Builder setMapX(int value) {
        bitField0_ |= 0x00000001;
        mapX_ = value;
        
        return this;
      }
      /**
       * <code>required int32 map_x = 1;</code>
       */
      public Builder clearMapX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mapX_ = 0;
        
        return this;
      }

      private int mapY_ ;
      /**
       * <code>required int32 map_y = 2;</code>
       */
      public boolean hasMapY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 map_y = 2;</code>
       */
      public int getMapY() {
        return mapY_;
      }
      /**
       * <code>required int32 map_y = 2;</code>
       */
      public Builder setMapY(int value) {
        bitField0_ |= 0x00000002;
        mapY_ = value;
        
        return this;
      }
      /**
       * <code>required int32 map_y = 2;</code>
       */
      public Builder clearMapY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mapY_ = 0;
        
        return this;
      }

      private int mapZ_ ;
      /**
       * <code>required int32 map_z = 3;</code>
       */
      public boolean hasMapZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 map_z = 3;</code>
       */
      public int getMapZ() {
        return mapZ_;
      }
      /**
       * <code>required int32 map_z = 3;</code>
       */
      public Builder setMapZ(int value) {
        bitField0_ |= 0x00000004;
        mapZ_ = value;
        
        return this;
      }
      /**
       * <code>required int32 map_z = 3;</code>
       */
      public Builder clearMapZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mapZ_ = 0;
        
        return this;
      }

      private java.util.List<java.lang.Integer> tiles_ = java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          tiles_ = new java.util.ArrayList<java.lang.Integer>(tiles_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public int getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public Builder setTiles(
          int index, int value) {
        ensureTilesIsMutable();
        tiles_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public Builder addTiles(int value) {
        ensureTilesIsMutable();
        tiles_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tiles_);
        
        return this;
      }
      /**
       * <code>repeated int32 tiles = 4;</code>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> materials_ =
        java.util.Collections.emptyList();
      private void ensureMaterialsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          materials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>(materials_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getMaterialsList() {
        return java.util.Collections.unmodifiableList(materials_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public int getMaterialsCount() {
        return materials_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterials(int index) {
        return materials_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder setMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialsIsMutable();
        materials_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder setMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureMaterialsIsMutable();
        materials_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder addMaterials(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialsIsMutable();
        materials_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder addMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialsIsMutable();
        materials_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder addMaterials(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureMaterialsIsMutable();
        materials_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder addMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureMaterialsIsMutable();
        materials_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder addAllMaterials(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> values) {
        ensureMaterialsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, materials_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder clearMaterials() {
        materials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair materials = 5;</code>
       */
      public Builder removeMaterials(int index) {
        ensureMaterialsIsMutable();
        materials_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> layerMaterials_ =
        java.util.Collections.emptyList();
      private void ensureLayerMaterialsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          layerMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>(layerMaterials_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getLayerMaterialsList() {
        return java.util.Collections.unmodifiableList(layerMaterials_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public int getLayerMaterialsCount() {
        return layerMaterials_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getLayerMaterials(int index) {
        return layerMaterials_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder setLayerMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayerMaterialsIsMutable();
        layerMaterials_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder setLayerMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureLayerMaterialsIsMutable();
        layerMaterials_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder addLayerMaterials(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayerMaterialsIsMutable();
        layerMaterials_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder addLayerMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayerMaterialsIsMutable();
        layerMaterials_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder addLayerMaterials(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureLayerMaterialsIsMutable();
        layerMaterials_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder addLayerMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureLayerMaterialsIsMutable();
        layerMaterials_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder addAllLayerMaterials(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> values) {
        ensureLayerMaterialsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, layerMaterials_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder clearLayerMaterials() {
        layerMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair layer_materials = 6;</code>
       */
      public Builder removeLayerMaterials(int index) {
        ensureLayerMaterialsIsMutable();
        layerMaterials_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> veinMaterials_ =
        java.util.Collections.emptyList();
      private void ensureVeinMaterialsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          veinMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>(veinMaterials_);
          bitField0_ |= 0x00000040;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getVeinMaterialsList() {
        return java.util.Collections.unmodifiableList(veinMaterials_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public int getVeinMaterialsCount() {
        return veinMaterials_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getVeinMaterials(int index) {
        return veinMaterials_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder setVeinMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVeinMaterialsIsMutable();
        veinMaterials_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder setVeinMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureVeinMaterialsIsMutable();
        veinMaterials_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder addVeinMaterials(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVeinMaterialsIsMutable();
        veinMaterials_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder addVeinMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVeinMaterialsIsMutable();
        veinMaterials_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder addVeinMaterials(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureVeinMaterialsIsMutable();
        veinMaterials_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder addVeinMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureVeinMaterialsIsMutable();
        veinMaterials_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder addAllVeinMaterials(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> values) {
        ensureVeinMaterialsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, veinMaterials_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder clearVeinMaterials() {
        veinMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair vein_materials = 7;</code>
       */
      public Builder removeVeinMaterials(int index) {
        ensureVeinMaterialsIsMutable();
        veinMaterials_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> baseMaterials_ =
        java.util.Collections.emptyList();
      private void ensureBaseMaterialsIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          baseMaterials_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>(baseMaterials_);
          bitField0_ |= 0x00000080;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getBaseMaterialsList() {
        return java.util.Collections.unmodifiableList(baseMaterials_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public int getBaseMaterialsCount() {
        return baseMaterials_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getBaseMaterials(int index) {
        return baseMaterials_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder setBaseMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBaseMaterialsIsMutable();
        baseMaterials_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder setBaseMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureBaseMaterialsIsMutable();
        baseMaterials_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder addBaseMaterials(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBaseMaterialsIsMutable();
        baseMaterials_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder addBaseMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBaseMaterialsIsMutable();
        baseMaterials_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder addBaseMaterials(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureBaseMaterialsIsMutable();
        baseMaterials_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder addBaseMaterials(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureBaseMaterialsIsMutable();
        baseMaterials_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder addAllBaseMaterials(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> values) {
        ensureBaseMaterialsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, baseMaterials_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder clearBaseMaterials() {
        baseMaterials_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair base_materials = 8;</code>
       */
      public Builder removeBaseMaterials(int index) {
        ensureBaseMaterialsIsMutable();
        baseMaterials_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> magma_ = java.util.Collections.emptyList();
      private void ensureMagmaIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          magma_ = new java.util.ArrayList<java.lang.Integer>(magma_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getMagmaList() {
        return java.util.Collections.unmodifiableList(magma_);
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public int getMagmaCount() {
        return magma_.size();
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public int getMagma(int index) {
        return magma_.get(index);
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public Builder setMagma(
          int index, int value) {
        ensureMagmaIsMutable();
        magma_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public Builder addMagma(int value) {
        ensureMagmaIsMutable();
        magma_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public Builder addAllMagma(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureMagmaIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, magma_);
        
        return this;
      }
      /**
       * <code>repeated int32 magma = 9;</code>
       */
      public Builder clearMagma() {
        magma_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        
        return this;
      }

      private java.util.List<java.lang.Integer> water_ = java.util.Collections.emptyList();
      private void ensureWaterIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          water_ = new java.util.ArrayList<java.lang.Integer>(water_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getWaterList() {
        return java.util.Collections.unmodifiableList(water_);
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public int getWaterCount() {
        return water_.size();
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public int getWater(int index) {
        return water_.get(index);
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public Builder setWater(
          int index, int value) {
        ensureWaterIsMutable();
        water_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public Builder addWater(int value) {
        ensureWaterIsMutable();
        water_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public Builder addAllWater(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWaterIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, water_);
        
        return this;
      }
      /**
       * <code>repeated int32 water = 10;</code>
       */
      public Builder clearWater() {
        water_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> hidden_ = java.util.Collections.emptyList();
      private void ensureHiddenIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          hidden_ = new java.util.ArrayList<java.lang.Boolean>(hidden_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public java.util.List<java.lang.Boolean>
          getHiddenList() {
        return java.util.Collections.unmodifiableList(hidden_);
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public int getHiddenCount() {
        return hidden_.size();
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public boolean getHidden(int index) {
        return hidden_.get(index);
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public Builder setHidden(
          int index, boolean value) {
        ensureHiddenIsMutable();
        hidden_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public Builder addHidden(boolean value) {
        ensureHiddenIsMutable();
        hidden_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public Builder addAllHidden(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureHiddenIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, hidden_);
        
        return this;
      }
      /**
       * <code>repeated bool hidden = 11;</code>
       */
      public Builder clearHidden() {
        hidden_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> light_ = java.util.Collections.emptyList();
      private void ensureLightIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          light_ = new java.util.ArrayList<java.lang.Boolean>(light_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public java.util.List<java.lang.Boolean>
          getLightList() {
        return java.util.Collections.unmodifiableList(light_);
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public int getLightCount() {
        return light_.size();
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public boolean getLight(int index) {
        return light_.get(index);
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public Builder setLight(
          int index, boolean value) {
        ensureLightIsMutable();
        light_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public Builder addLight(boolean value) {
        ensureLightIsMutable();
        light_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public Builder addAllLight(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureLightIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, light_);
        
        return this;
      }
      /**
       * <code>repeated bool light = 12;</code>
       */
      public Builder clearLight() {
        light_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> subterranean_ = java.util.Collections.emptyList();
      private void ensureSubterraneanIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          subterranean_ = new java.util.ArrayList<java.lang.Boolean>(subterranean_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public java.util.List<java.lang.Boolean>
          getSubterraneanList() {
        return java.util.Collections.unmodifiableList(subterranean_);
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public int getSubterraneanCount() {
        return subterranean_.size();
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public boolean getSubterranean(int index) {
        return subterranean_.get(index);
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public Builder setSubterranean(
          int index, boolean value) {
        ensureSubterraneanIsMutable();
        subterranean_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public Builder addSubterranean(boolean value) {
        ensureSubterraneanIsMutable();
        subterranean_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public Builder addAllSubterranean(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureSubterraneanIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, subterranean_);
        
        return this;
      }
      /**
       * <code>repeated bool subterranean = 13;</code>
       */
      public Builder clearSubterranean() {
        subterranean_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> outside_ = java.util.Collections.emptyList();
      private void ensureOutsideIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          outside_ = new java.util.ArrayList<java.lang.Boolean>(outside_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public java.util.List<java.lang.Boolean>
          getOutsideList() {
        return java.util.Collections.unmodifiableList(outside_);
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public int getOutsideCount() {
        return outside_.size();
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public boolean getOutside(int index) {
        return outside_.get(index);
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public Builder setOutside(
          int index, boolean value) {
        ensureOutsideIsMutable();
        outside_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public Builder addOutside(boolean value) {
        ensureOutsideIsMutable();
        outside_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public Builder addAllOutside(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureOutsideIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, outside_);
        
        return this;
      }
      /**
       * <code>repeated bool outside = 14;</code>
       */
      public Builder clearOutside() {
        outside_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> aquifer_ = java.util.Collections.emptyList();
      private void ensureAquiferIsMutable() {
        if (!((bitField0_ & 0x00004000) == 0x00004000)) {
          aquifer_ = new java.util.ArrayList<java.lang.Boolean>(aquifer_);
          bitField0_ |= 0x00004000;
         }
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public java.util.List<java.lang.Boolean>
          getAquiferList() {
        return java.util.Collections.unmodifiableList(aquifer_);
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public int getAquiferCount() {
        return aquifer_.size();
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public boolean getAquifer(int index) {
        return aquifer_.get(index);
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public Builder setAquifer(
          int index, boolean value) {
        ensureAquiferIsMutable();
        aquifer_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public Builder addAquifer(boolean value) {
        ensureAquiferIsMutable();
        aquifer_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public Builder addAllAquifer(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureAquiferIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aquifer_);
        
        return this;
      }
      /**
       * <code>repeated bool aquifer = 15;</code>
       */
      public Builder clearAquifer() {
        aquifer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00004000);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> waterStagnant_ = java.util.Collections.emptyList();
      private void ensureWaterStagnantIsMutable() {
        if (!((bitField0_ & 0x00008000) == 0x00008000)) {
          waterStagnant_ = new java.util.ArrayList<java.lang.Boolean>(waterStagnant_);
          bitField0_ |= 0x00008000;
         }
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public java.util.List<java.lang.Boolean>
          getWaterStagnantList() {
        return java.util.Collections.unmodifiableList(waterStagnant_);
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public int getWaterStagnantCount() {
        return waterStagnant_.size();
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public boolean getWaterStagnant(int index) {
        return waterStagnant_.get(index);
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public Builder setWaterStagnant(
          int index, boolean value) {
        ensureWaterStagnantIsMutable();
        waterStagnant_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public Builder addWaterStagnant(boolean value) {
        ensureWaterStagnantIsMutable();
        waterStagnant_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public Builder addAllWaterStagnant(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureWaterStagnantIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, waterStagnant_);
        
        return this;
      }
      /**
       * <code>repeated bool water_stagnant = 16;</code>
       */
      public Builder clearWaterStagnant() {
        waterStagnant_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00008000);
        
        return this;
      }

      private java.util.List<java.lang.Boolean> waterSalt_ = java.util.Collections.emptyList();
      private void ensureWaterSaltIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          waterSalt_ = new java.util.ArrayList<java.lang.Boolean>(waterSalt_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public java.util.List<java.lang.Boolean>
          getWaterSaltList() {
        return java.util.Collections.unmodifiableList(waterSalt_);
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public int getWaterSaltCount() {
        return waterSalt_.size();
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public boolean getWaterSalt(int index) {
        return waterSalt_.get(index);
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public Builder setWaterSalt(
          int index, boolean value) {
        ensureWaterSaltIsMutable();
        waterSalt_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public Builder addWaterSalt(boolean value) {
        ensureWaterSaltIsMutable();
        waterSalt_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public Builder addAllWaterSalt(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureWaterSaltIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, waterSalt_);
        
        return this;
      }
      /**
       * <code>repeated bool water_salt = 17;</code>
       */
      public Builder clearWaterSalt() {
        waterSalt_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> constructionItems_ =
        java.util.Collections.emptyList();
      private void ensureConstructionItemsIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          constructionItems_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair>(constructionItems_);
          bitField0_ |= 0x00020000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> getConstructionItemsList() {
        return java.util.Collections.unmodifiableList(constructionItems_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public int getConstructionItemsCount() {
        return constructionItems_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getConstructionItems(int index) {
        return constructionItems_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder setConstructionItems(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConstructionItemsIsMutable();
        constructionItems_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder setConstructionItems(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureConstructionItemsIsMutable();
        constructionItems_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder addConstructionItems(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConstructionItemsIsMutable();
        constructionItems_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder addConstructionItems(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConstructionItemsIsMutable();
        constructionItems_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder addConstructionItems(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureConstructionItemsIsMutable();
        constructionItems_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder addConstructionItems(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        ensureConstructionItemsIsMutable();
        constructionItems_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder addAllConstructionItems(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair> values) {
        ensureConstructionItemsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, constructionItems_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder clearConstructionItems() {
        constructionItems_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MatPair construction_items = 18;</code>
       */
      public Builder removeConstructionItems(int index) {
        ensureConstructionItemsIsMutable();
        constructionItems_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> buildings_ =
        java.util.Collections.emptyList();
      private void ensureBuildingsIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          buildings_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance>(buildings_);
          bitField0_ |= 0x00040000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> getBuildingsList() {
        return java.util.Collections.unmodifiableList(buildings_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public int getBuildingsCount() {
        return buildings_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance getBuildings(int index) {
        return buildings_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder setBuildings(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingsIsMutable();
        buildings_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder setBuildings(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.Builder builderForValue) {
        ensureBuildingsIsMutable();
        buildings_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder addBuildings(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingsIsMutable();
        buildings_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder addBuildings(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingsIsMutable();
        buildings_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder addBuildings(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.Builder builderForValue) {
        ensureBuildingsIsMutable();
        buildings_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder addBuildings(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance.Builder builderForValue) {
        ensureBuildingsIsMutable();
        buildings_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder addAllBuildings(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingInstance> values) {
        ensureBuildingsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buildings_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder clearBuildings() {
        buildings_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingInstance buildings = 19;</code>
       */
      public Builder removeBuildings(int index) {
        ensureBuildingsIsMutable();
        buildings_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> treePercent_ = java.util.Collections.emptyList();
      private void ensureTreePercentIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          treePercent_ = new java.util.ArrayList<java.lang.Integer>(treePercent_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public java.util.List<java.lang.Integer>
          getTreePercentList() {
        return java.util.Collections.unmodifiableList(treePercent_);
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public int getTreePercentCount() {
        return treePercent_.size();
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public int getTreePercent(int index) {
        return treePercent_.get(index);
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public Builder setTreePercent(
          int index, int value) {
        ensureTreePercentIsMutable();
        treePercent_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public Builder addTreePercent(int value) {
        ensureTreePercentIsMutable();
        treePercent_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public Builder addAllTreePercent(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTreePercentIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, treePercent_);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_percent = 20;</code>
       */
      public Builder clearTreePercent() {
        treePercent_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        
        return this;
      }

      private java.util.List<java.lang.Integer> treeX_ = java.util.Collections.emptyList();
      private void ensureTreeXIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          treeX_ = new java.util.ArrayList<java.lang.Integer>(treeX_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public java.util.List<java.lang.Integer>
          getTreeXList() {
        return java.util.Collections.unmodifiableList(treeX_);
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public int getTreeXCount() {
        return treeX_.size();
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public int getTreeX(int index) {
        return treeX_.get(index);
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public Builder setTreeX(
          int index, int value) {
        ensureTreeXIsMutable();
        treeX_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public Builder addTreeX(int value) {
        ensureTreeXIsMutable();
        treeX_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public Builder addAllTreeX(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTreeXIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, treeX_);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_x = 21;</code>
       */
      public Builder clearTreeX() {
        treeX_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        
        return this;
      }

      private java.util.List<java.lang.Integer> treeY_ = java.util.Collections.emptyList();
      private void ensureTreeYIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          treeY_ = new java.util.ArrayList<java.lang.Integer>(treeY_);
          bitField0_ |= 0x00200000;
         }
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public java.util.List<java.lang.Integer>
          getTreeYList() {
        return java.util.Collections.unmodifiableList(treeY_);
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public int getTreeYCount() {
        return treeY_.size();
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public int getTreeY(int index) {
        return treeY_.get(index);
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public Builder setTreeY(
          int index, int value) {
        ensureTreeYIsMutable();
        treeY_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public Builder addTreeY(int value) {
        ensureTreeYIsMutable();
        treeY_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public Builder addAllTreeY(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTreeYIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, treeY_);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_y = 22;</code>
       */
      public Builder clearTreeY() {
        treeY_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00200000);
        
        return this;
      }

      private java.util.List<java.lang.Integer> treeZ_ = java.util.Collections.emptyList();
      private void ensureTreeZIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          treeZ_ = new java.util.ArrayList<java.lang.Integer>(treeZ_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public java.util.List<java.lang.Integer>
          getTreeZList() {
        return java.util.Collections.unmodifiableList(treeZ_);
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public int getTreeZCount() {
        return treeZ_.size();
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public int getTreeZ(int index) {
        return treeZ_.get(index);
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public Builder setTreeZ(
          int index, int value) {
        ensureTreeZIsMutable();
        treeZ_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public Builder addTreeZ(int value) {
        ensureTreeZIsMutable();
        treeZ_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public Builder addAllTreeZ(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTreeZIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, treeZ_);
        
        return this;
      }
      /**
       * <code>repeated int32 tree_z = 23;</code>
       */
      public Builder clearTreeZ() {
        treeZ_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> tileDigDesignation_ =
        java.util.Collections.emptyList();
      private void ensureTileDigDesignationIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          tileDigDesignation_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation>(tileDigDesignation_);
          bitField0_ |= 0x00800000;
        }
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> getTileDigDesignationList() {
        return java.util.Collections.unmodifiableList(tileDigDesignation_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public int getTileDigDesignationCount() {
        return tileDigDesignation_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation getTileDigDesignation(int index) {
        return tileDigDesignation_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public Builder setTileDigDesignation(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTileDigDesignationIsMutable();
        tileDigDesignation_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public Builder addTileDigDesignation(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTileDigDesignationIsMutable();
        tileDigDesignation_.add(value);
        
        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public Builder addAllTileDigDesignation(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TileDigDesignation> values) {
        ensureTileDigDesignationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tileDigDesignation_);
        
        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TileDigDesignation tile_dig_designation = 24;</code>
       */
      public Builder clearTileDigDesignation() {
        tileDigDesignation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.MapBlock)
    }

    static {
      defaultInstance = new MapBlock(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.MapBlock)
  }

  public interface MatPairOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.MatPair)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 mat_type = 1;</code>
     */
    boolean hasMatType();
    /**
     * <code>required int32 mat_type = 1;</code>
     */
    int getMatType();

    /**
     * <code>required int32 mat_index = 2;</code>
     */
    boolean hasMatIndex();
    /**
     * <code>required int32 mat_index = 2;</code>
     */
    int getMatIndex();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MatPair}
   */
  public static final class MatPair extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.MatPair)
      MatPairOrBuilder {
    // Use MatPair.newBuilder() to construct.
    private MatPair(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MatPair(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final MatPair defaultInstance;
    public static MatPair getDefaultInstance() {
      return defaultInstance;
    }

    public MatPair getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private MatPair(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              matType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              matIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MatPair> PARSER =
        new com.google.protobuf.AbstractParser<MatPair>() {
      public MatPair parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MatPair(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MatPair> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAT_TYPE_FIELD_NUMBER = 1;
    private int matType_;
    /**
     * <code>required int32 mat_type = 1;</code>
     */
    public boolean hasMatType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 mat_type = 1;</code>
     */
    public int getMatType() {
      return matType_;
    }

    public static final int MAT_INDEX_FIELD_NUMBER = 2;
    private int matIndex_;
    /**
     * <code>required int32 mat_index = 2;</code>
     */
    public boolean hasMatIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 mat_index = 2;</code>
     */
    public int getMatIndex() {
      return matIndex_;
    }

    private void initFields() {
      matType_ = 0;
      matIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMatType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMatIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, matType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, matIndex_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, matType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, matIndex_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MatPair}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.MatPair)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPairOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        matType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        matIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.matType_ = matType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.matIndex_ = matIndex_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) return this;
        if (other.hasMatType()) {
          setMatType(other.getMatType());
        }
        if (other.hasMatIndex()) {
          setMatIndex(other.getMatIndex());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMatType()) {
          
          return false;
        }
        if (!hasMatIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int matType_ ;
      /**
       * <code>required int32 mat_type = 1;</code>
       */
      public boolean hasMatType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 mat_type = 1;</code>
       */
      public int getMatType() {
        return matType_;
      }
      /**
       * <code>required int32 mat_type = 1;</code>
       */
      public Builder setMatType(int value) {
        bitField0_ |= 0x00000001;
        matType_ = value;
        
        return this;
      }
      /**
       * <code>required int32 mat_type = 1;</code>
       */
      public Builder clearMatType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        matType_ = 0;
        
        return this;
      }

      private int matIndex_ ;
      /**
       * <code>required int32 mat_index = 2;</code>
       */
      public boolean hasMatIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 mat_index = 2;</code>
       */
      public int getMatIndex() {
        return matIndex_;
      }
      /**
       * <code>required int32 mat_index = 2;</code>
       */
      public Builder setMatIndex(int value) {
        bitField0_ |= 0x00000002;
        matIndex_ = value;
        
        return this;
      }
      /**
       * <code>required int32 mat_index = 2;</code>
       */
      public Builder clearMatIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        matIndex_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.MatPair)
    }

    static {
      defaultInstance = new MatPair(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.MatPair)
  }

  public interface ColorDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ColorDefinition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 red = 1;</code>
     */
    boolean hasRed();
    /**
     * <code>required int32 red = 1;</code>
     */
    int getRed();

    /**
     * <code>required int32 green = 2;</code>
     */
    boolean hasGreen();
    /**
     * <code>required int32 green = 2;</code>
     */
    int getGreen();

    /**
     * <code>required int32 blue = 3;</code>
     */
    boolean hasBlue();
    /**
     * <code>required int32 blue = 3;</code>
     */
    int getBlue();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ColorDefinition}
   */
  public static final class ColorDefinition extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ColorDefinition)
      ColorDefinitionOrBuilder {
    // Use ColorDefinition.newBuilder() to construct.
    private ColorDefinition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ColorDefinition(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ColorDefinition defaultInstance;
    public static ColorDefinition getDefaultInstance() {
      return defaultInstance;
    }

    public ColorDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ColorDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              red_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              green_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              blue_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ColorDefinition> PARSER =
        new com.google.protobuf.AbstractParser<ColorDefinition>() {
      public ColorDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColorDefinition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ColorDefinition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RED_FIELD_NUMBER = 1;
    private int red_;
    /**
     * <code>required int32 red = 1;</code>
     */
    public boolean hasRed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 red = 1;</code>
     */
    public int getRed() {
      return red_;
    }

    public static final int GREEN_FIELD_NUMBER = 2;
    private int green_;
    /**
     * <code>required int32 green = 2;</code>
     */
    public boolean hasGreen() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 green = 2;</code>
     */
    public int getGreen() {
      return green_;
    }

    public static final int BLUE_FIELD_NUMBER = 3;
    private int blue_;
    /**
     * <code>required int32 blue = 3;</code>
     */
    public boolean hasBlue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 blue = 3;</code>
     */
    public int getBlue() {
      return blue_;
    }

    private void initFields() {
      red_ = 0;
      green_ = 0;
      blue_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasRed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGreen()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBlue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, red_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, green_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, blue_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, red_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, green_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, blue_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ColorDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ColorDefinition)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinitionOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        red_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        green_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        blue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.red_ = red_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.green_ = green_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.blue_ = blue_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance()) return this;
        if (other.hasRed()) {
          setRed(other.getRed());
        }
        if (other.hasGreen()) {
          setGreen(other.getGreen());
        }
        if (other.hasBlue()) {
          setBlue(other.getBlue());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRed()) {
          
          return false;
        }
        if (!hasGreen()) {
          
          return false;
        }
        if (!hasBlue()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int red_ ;
      /**
       * <code>required int32 red = 1;</code>
       */
      public boolean hasRed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 red = 1;</code>
       */
      public int getRed() {
        return red_;
      }
      /**
       * <code>required int32 red = 1;</code>
       */
      public Builder setRed(int value) {
        bitField0_ |= 0x00000001;
        red_ = value;
        
        return this;
      }
      /**
       * <code>required int32 red = 1;</code>
       */
      public Builder clearRed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        red_ = 0;
        
        return this;
      }

      private int green_ ;
      /**
       * <code>required int32 green = 2;</code>
       */
      public boolean hasGreen() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 green = 2;</code>
       */
      public int getGreen() {
        return green_;
      }
      /**
       * <code>required int32 green = 2;</code>
       */
      public Builder setGreen(int value) {
        bitField0_ |= 0x00000002;
        green_ = value;
        
        return this;
      }
      /**
       * <code>required int32 green = 2;</code>
       */
      public Builder clearGreen() {
        bitField0_ = (bitField0_ & ~0x00000002);
        green_ = 0;
        
        return this;
      }

      private int blue_ ;
      /**
       * <code>required int32 blue = 3;</code>
       */
      public boolean hasBlue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 blue = 3;</code>
       */
      public int getBlue() {
        return blue_;
      }
      /**
       * <code>required int32 blue = 3;</code>
       */
      public Builder setBlue(int value) {
        bitField0_ |= 0x00000004;
        blue_ = value;
        
        return this;
      }
      /**
       * <code>required int32 blue = 3;</code>
       */
      public Builder clearBlue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        blue_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ColorDefinition)
    }

    static {
      defaultInstance = new ColorDefinition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ColorDefinition)
  }

  public interface MaterialDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
     */
    boolean hasMatPair();
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMatPair();

    /**
     * <code>optional string id = 2;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 2;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
     *
     * <pre>
     *Simplifying colors to assume room temperature.
     * </pre>
     */
    boolean hasStateColor();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
     *
     * <pre>
     *Simplifying colors to assume room temperature.
     * </pre>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getStateColor();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition}
   */
  public static final class MaterialDefinition extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition)
      MaterialDefinitionOrBuilder {
    // Use MaterialDefinition.newBuilder() to construct.
    private MaterialDefinition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MaterialDefinition(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final MaterialDefinition defaultInstance;
    public static MaterialDefinition getDefaultInstance() {
      return defaultInstance;
    }

    public MaterialDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private MaterialDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = matPair_.toBuilder();
              }
              matPair_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(matPair_);
                matPair_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              id_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = stateColor_.toBuilder();
              }
              stateColor_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stateColor_);
                stateColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MaterialDefinition> PARSER =
        new com.google.protobuf.AbstractParser<MaterialDefinition>() {
      public MaterialDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MaterialDefinition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MaterialDefinition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAT_PAIR_FIELD_NUMBER = 1;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair matPair_;
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
     */
    public boolean hasMatPair() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMatPair() {
      return matPair_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATE_COLOR_FIELD_NUMBER = 4;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition stateColor_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
     *
     * <pre>
     *Simplifying colors to assume room temperature.
     * </pre>
     */
    public boolean hasStateColor() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
     *
     * <pre>
     *Simplifying colors to assume room temperature.
     * </pre>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getStateColor() {
      return stateColor_;
    }

    private void initFields() {
      matPair_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      id_ = "";
      name_ = "";
      stateColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMatPair()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMatPair().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasStateColor()) {
        if (!getStateColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, matPair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, stateColor_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, matPair_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, stateColor_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinitionOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        matPair_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        stateColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.matPair_ = matPair_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stateColor_ = stateColor_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.getDefaultInstance()) return this;
        if (other.hasMatPair()) {
          mergeMatPair(other.getMatPair());
        }
        if (other.hasId()) {
          bitField0_ |= 0x00000002;
          id_ = other.id_;
          
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (other.hasStateColor()) {
          mergeStateColor(other.getStateColor());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMatPair()) {
          
          return false;
        }
        if (!getMatPair().isInitialized()) {
          
          return false;
        }
        if (hasStateColor()) {
          if (!getStateColor().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair matPair_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public boolean hasMatPair() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMatPair() {
        return matPair_;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public Builder setMatPair(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        matPair_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public Builder setMatPair(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        matPair_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public Builder mergeMatPair(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            matPair_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) {
          matPair_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder(matPair_).mergeFrom(value).buildPartial();
        } else {
          matPair_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.MatPair mat_pair = 1;</code>
       */
      public Builder clearMatPair() {
        matPair_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition stateColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public boolean hasStateColor() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getStateColor() {
        return stateColor_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public Builder setStateColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        stateColor_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public Builder setStateColor(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        stateColor_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public Builder mergeStateColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            stateColor_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance()) {
          stateColor_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.newBuilder(stateColor_).mergeFrom(value).buildPartial();
        } else {
          stateColor_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition state_color = 4;</code>
       *
       * <pre>
       *Simplifying colors to assume room temperature.
       * </pre>
       */
      public Builder clearStateColor() {
        stateColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition)
    }

    static {
      defaultInstance = new MaterialDefinition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition)
  }

  public interface BuildingTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BuildingType)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 building_type = 1;</code>
     */
    boolean hasBuildingType();
    /**
     * <code>required int32 building_type = 1;</code>
     */
    int getBuildingType();

    /**
     * <code>required int32 building_subtype = 2;</code>
     */
    boolean hasBuildingSubtype();
    /**
     * <code>required int32 building_subtype = 2;</code>
     */
    int getBuildingSubtype();

    /**
     * <code>required int32 building_custom = 3;</code>
     */
    boolean hasBuildingCustom();
    /**
     * <code>required int32 building_custom = 3;</code>
     */
    int getBuildingCustom();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingType}
   */
  public static final class BuildingType extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingType)
      BuildingTypeOrBuilder {
    // Use BuildingType.newBuilder() to construct.
    private BuildingType(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuildingType(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BuildingType defaultInstance;
    public static BuildingType getDefaultInstance() {
      return defaultInstance;
    }

    public BuildingType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BuildingType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              buildingType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              buildingSubtype_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              buildingCustom_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BuildingType> PARSER =
        new com.google.protobuf.AbstractParser<BuildingType>() {
      public BuildingType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildingType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuildingType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BUILDING_TYPE_FIELD_NUMBER = 1;
    private int buildingType_;
    /**
     * <code>required int32 building_type = 1;</code>
     */
    public boolean hasBuildingType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 building_type = 1;</code>
     */
    public int getBuildingType() {
      return buildingType_;
    }

    public static final int BUILDING_SUBTYPE_FIELD_NUMBER = 2;
    private int buildingSubtype_;
    /**
     * <code>required int32 building_subtype = 2;</code>
     */
    public boolean hasBuildingSubtype() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 building_subtype = 2;</code>
     */
    public int getBuildingSubtype() {
      return buildingSubtype_;
    }

    public static final int BUILDING_CUSTOM_FIELD_NUMBER = 3;
    private int buildingCustom_;
    /**
     * <code>required int32 building_custom = 3;</code>
     */
    public boolean hasBuildingCustom() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 building_custom = 3;</code>
     */
    public int getBuildingCustom() {
      return buildingCustom_;
    }

    private void initFields() {
      buildingType_ = 0;
      buildingSubtype_ = 0;
      buildingCustom_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasBuildingType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBuildingSubtype()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBuildingCustom()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, buildingType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, buildingSubtype_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, buildingCustom_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, buildingType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, buildingSubtype_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, buildingCustom_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingType)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingTypeOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        buildingType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        buildingSubtype_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        buildingCustom_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.buildingType_ = buildingType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.buildingSubtype_ = buildingSubtype_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.buildingCustom_ = buildingCustom_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance()) return this;
        if (other.hasBuildingType()) {
          setBuildingType(other.getBuildingType());
        }
        if (other.hasBuildingSubtype()) {
          setBuildingSubtype(other.getBuildingSubtype());
        }
        if (other.hasBuildingCustom()) {
          setBuildingCustom(other.getBuildingCustom());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBuildingType()) {
          
          return false;
        }
        if (!hasBuildingSubtype()) {
          
          return false;
        }
        if (!hasBuildingCustom()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int buildingType_ ;
      /**
       * <code>required int32 building_type = 1;</code>
       */
      public boolean hasBuildingType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 building_type = 1;</code>
       */
      public int getBuildingType() {
        return buildingType_;
      }
      /**
       * <code>required int32 building_type = 1;</code>
       */
      public Builder setBuildingType(int value) {
        bitField0_ |= 0x00000001;
        buildingType_ = value;
        
        return this;
      }
      /**
       * <code>required int32 building_type = 1;</code>
       */
      public Builder clearBuildingType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        buildingType_ = 0;
        
        return this;
      }

      private int buildingSubtype_ ;
      /**
       * <code>required int32 building_subtype = 2;</code>
       */
      public boolean hasBuildingSubtype() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 building_subtype = 2;</code>
       */
      public int getBuildingSubtype() {
        return buildingSubtype_;
      }
      /**
       * <code>required int32 building_subtype = 2;</code>
       */
      public Builder setBuildingSubtype(int value) {
        bitField0_ |= 0x00000002;
        buildingSubtype_ = value;
        
        return this;
      }
      /**
       * <code>required int32 building_subtype = 2;</code>
       */
      public Builder clearBuildingSubtype() {
        bitField0_ = (bitField0_ & ~0x00000002);
        buildingSubtype_ = 0;
        
        return this;
      }

      private int buildingCustom_ ;
      /**
       * <code>required int32 building_custom = 3;</code>
       */
      public boolean hasBuildingCustom() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 building_custom = 3;</code>
       */
      public int getBuildingCustom() {
        return buildingCustom_;
      }
      /**
       * <code>required int32 building_custom = 3;</code>
       */
      public Builder setBuildingCustom(int value) {
        bitField0_ |= 0x00000004;
        buildingCustom_ = value;
        
        return this;
      }
      /**
       * <code>required int32 building_custom = 3;</code>
       */
      public Builder clearBuildingCustom() {
        bitField0_ = (bitField0_ & ~0x00000004);
        buildingCustom_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingType)
    }

    static {
      defaultInstance = new BuildingType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingType)
  }

  public interface BuildingDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
     */
    boolean hasBuildingType();
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType();

    /**
     * <code>optional string id = 2;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 2;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition}
   */
  public static final class BuildingDefinition extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition)
      BuildingDefinitionOrBuilder {
    // Use BuildingDefinition.newBuilder() to construct.
    private BuildingDefinition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuildingDefinition(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BuildingDefinition defaultInstance;
    public static BuildingDefinition getDefaultInstance() {
      return defaultInstance;
    }

    public BuildingDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BuildingDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = buildingType_.toBuilder();
              }
              buildingType_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(buildingType_);
                buildingType_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              id_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BuildingDefinition> PARSER =
        new com.google.protobuf.AbstractParser<BuildingDefinition>() {
      public BuildingDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildingDefinition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuildingDefinition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BUILDING_TYPE_FIELD_NUMBER = 1;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType buildingType_;
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
     */
    public boolean hasBuildingType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType() {
      return buildingType_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
      id_ = "";
      name_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasBuildingType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getBuildingType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, buildingType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, buildingType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinitionOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.buildingType_ = buildingType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.getDefaultInstance()) return this;
        if (other.hasBuildingType()) {
          mergeBuildingType(other.getBuildingType());
        }
        if (other.hasId()) {
          bitField0_ |= 0x00000002;
          id_ = other.id_;
          
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasBuildingType()) {
          
          return false;
        }
        if (!getBuildingType().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public boolean hasBuildingType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType getBuildingType() {
        return buildingType_;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public Builder setBuildingType(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        buildingType_ = value;

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public Builder setBuildingType(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.Builder builderForValue) {
        buildingType_ = builderForValue.build();

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public Builder mergeBuildingType(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType value) {
        if (((bitField0_ & 0x00000001) == 0x00000001) &&
            buildingType_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance()) {
          buildingType_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.newBuilder(buildingType_).mergeFrom(value).buildPartial();
        } else {
          buildingType_ = value;
        }

        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .com.dfhack.protobuf.RemoteFortressReader.BuildingType building_type = 1;</code>
       */
      public Builder clearBuildingType() {
        buildingType_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingType.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition)
    }

    static {
      defaultInstance = new BuildingDefinition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition)
  }

  public interface BuildingListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BuildingList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> 
        getBuildingListList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition getBuildingList(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    int getBuildingListCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingList}
   */
  public static final class BuildingList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingList)
      BuildingListOrBuilder {
    // Use BuildingList.newBuilder() to construct.
    private BuildingList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BuildingList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BuildingList defaultInstance;
    public static BuildingList getDefaultInstance() {
      return defaultInstance;
    }

    public BuildingList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BuildingList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                buildingList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition>();
                mutable_bitField0_ |= 0x00000001;
              }
              buildingList_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          buildingList_ = java.util.Collections.unmodifiableList(buildingList_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BuildingList> PARSER =
        new com.google.protobuf.AbstractParser<BuildingList>() {
      public BuildingList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BuildingList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BuildingList> getParserForType() {
      return PARSER;
    }

    public static final int BUILDING_LIST_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> buildingList_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> getBuildingListList() {
      return buildingList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinitionOrBuilder> 
        getBuildingListOrBuilderList() {
      return buildingList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    public int getBuildingListCount() {
      return buildingList_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition getBuildingList(int index) {
      return buildingList_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinitionOrBuilder getBuildingListOrBuilder(
        int index) {
      return buildingList_.get(index);
    }

    private void initFields() {
      buildingList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getBuildingListCount(); i++) {
        if (!getBuildingList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < buildingList_.size(); i++) {
        output.writeMessage(1, buildingList_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < buildingList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, buildingList_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BuildingList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BuildingList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        buildingList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          buildingList_ = java.util.Collections.unmodifiableList(buildingList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.buildingList_ = buildingList_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList.getDefaultInstance()) return this;
        if (!other.buildingList_.isEmpty()) {
          if (buildingList_.isEmpty()) {
            buildingList_ = other.buildingList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBuildingListIsMutable();
            buildingList_.addAll(other.buildingList_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getBuildingListCount(); i++) {
          if (!getBuildingList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> buildingList_ =
        java.util.Collections.emptyList();
      private void ensureBuildingListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          buildingList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition>(buildingList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> getBuildingListList() {
        return java.util.Collections.unmodifiableList(buildingList_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public int getBuildingListCount() {
        return buildingList_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition getBuildingList(int index) {
        return buildingList_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder setBuildingList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingListIsMutable();
        buildingList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder setBuildingList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.Builder builderForValue) {
        ensureBuildingListIsMutable();
        buildingList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder addBuildingList(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingListIsMutable();
        buildingList_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder addBuildingList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBuildingListIsMutable();
        buildingList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder addBuildingList(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.Builder builderForValue) {
        ensureBuildingListIsMutable();
        buildingList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder addBuildingList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition.Builder builderForValue) {
        ensureBuildingListIsMutable();
        buildingList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder addAllBuildingList(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BuildingDefinition> values) {
        ensureBuildingListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buildingList_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder clearBuildingList() {
        buildingList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BuildingDefinition building_list = 1;</code>
       */
      public Builder removeBuildingList(int index) {
        ensureBuildingListIsMutable();
        buildingList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingList)
    }

    static {
      defaultInstance = new BuildingList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BuildingList)
  }

  public interface MaterialListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.MaterialList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> 
        getMaterialListList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition getMaterialList(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    int getMaterialListCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MaterialList}
   */
  public static final class MaterialList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.MaterialList)
      MaterialListOrBuilder {
    // Use MaterialList.newBuilder() to construct.
    private MaterialList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MaterialList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final MaterialList defaultInstance;
    public static MaterialList getDefaultInstance() {
      return defaultInstance;
    }

    public MaterialList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private MaterialList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                materialList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition>();
                mutable_bitField0_ |= 0x00000001;
              }
              materialList_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          materialList_ = java.util.Collections.unmodifiableList(materialList_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MaterialList> PARSER =
        new com.google.protobuf.AbstractParser<MaterialList>() {
      public MaterialList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MaterialList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MaterialList> getParserForType() {
      return PARSER;
    }

    public static final int MATERIAL_LIST_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> materialList_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> getMaterialListList() {
      return materialList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinitionOrBuilder> 
        getMaterialListOrBuilderList() {
      return materialList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    public int getMaterialListCount() {
      return materialList_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition getMaterialList(int index) {
      return materialList_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinitionOrBuilder getMaterialListOrBuilder(
        int index) {
      return materialList_.get(index);
    }

    private void initFields() {
      materialList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getMaterialListCount(); i++) {
        if (!getMaterialList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < materialList_.size(); i++) {
        output.writeMessage(1, materialList_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < materialList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, materialList_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MaterialList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.MaterialList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        materialList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          materialList_ = java.util.Collections.unmodifiableList(materialList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.materialList_ = materialList_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList.getDefaultInstance()) return this;
        if (!other.materialList_.isEmpty()) {
          if (materialList_.isEmpty()) {
            materialList_ = other.materialList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMaterialListIsMutable();
            materialList_.addAll(other.materialList_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getMaterialListCount(); i++) {
          if (!getMaterialList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> materialList_ =
        java.util.Collections.emptyList();
      private void ensureMaterialListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          materialList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition>(materialList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> getMaterialListList() {
        return java.util.Collections.unmodifiableList(materialList_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public int getMaterialListCount() {
        return materialList_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition getMaterialList(int index) {
        return materialList_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder setMaterialList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialListIsMutable();
        materialList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder setMaterialList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.Builder builderForValue) {
        ensureMaterialListIsMutable();
        materialList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder addMaterialList(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialListIsMutable();
        materialList_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder addMaterialList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMaterialListIsMutable();
        materialList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder addMaterialList(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.Builder builderForValue) {
        ensureMaterialListIsMutable();
        materialList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder addMaterialList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition.Builder builderForValue) {
        ensureMaterialListIsMutable();
        materialList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder addAllMaterialList(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MaterialDefinition> values) {
        ensureMaterialListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, materialList_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder clearMaterialList() {
        materialList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MaterialDefinition material_list = 1;</code>
       */
      public Builder removeMaterialList(int index) {
        ensureMaterialListIsMutable();
        materialList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.MaterialList)
    }

    static {
      defaultInstance = new MaterialList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.MaterialList)
  }

  public interface BodySizeInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 size_cur = 1;</code>
     */
    boolean hasSizeCur();
    /**
     * <code>optional int32 size_cur = 1;</code>
     */
    int getSizeCur();

    /**
     * <code>optional int32 size_base = 2;</code>
     */
    boolean hasSizeBase();
    /**
     * <code>optional int32 size_base = 2;</code>
     */
    int getSizeBase();

    /**
     * <code>optional int32 area_cur = 3;</code>
     *
     * <pre>
     *!&lt; size_cur^0.666 
     * </pre>
     */
    boolean hasAreaCur();
    /**
     * <code>optional int32 area_cur = 3;</code>
     *
     * <pre>
     *!&lt; size_cur^0.666 
     * </pre>
     */
    int getAreaCur();

    /**
     * <code>optional int32 area_base = 4;</code>
     *
     * <pre>
     *!&lt; size_base^0.666 
     * </pre>
     */
    boolean hasAreaBase();
    /**
     * <code>optional int32 area_base = 4;</code>
     *
     * <pre>
     *!&lt; size_base^0.666 
     * </pre>
     */
    int getAreaBase();

    /**
     * <code>optional int32 length_cur = 5;</code>
     *
     * <pre>
     *!&lt; (size_cur*10000)^0.333 
     * </pre>
     */
    boolean hasLengthCur();
    /**
     * <code>optional int32 length_cur = 5;</code>
     *
     * <pre>
     *!&lt; (size_cur*10000)^0.333 
     * </pre>
     */
    int getLengthCur();

    /**
     * <code>optional int32 length_base = 6;</code>
     *
     * <pre>
     *!&lt; (size_base*10000)^0.333 
     * </pre>
     */
    boolean hasLengthBase();
    /**
     * <code>optional int32 length_base = 6;</code>
     *
     * <pre>
     *!&lt; (size_base*10000)^0.333 
     * </pre>
     */
    int getLengthBase();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo}
   */
  public static final class BodySizeInfo extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo)
      BodySizeInfoOrBuilder {
    // Use BodySizeInfo.newBuilder() to construct.
    private BodySizeInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BodySizeInfo(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BodySizeInfo defaultInstance;
    public static BodySizeInfo getDefaultInstance() {
      return defaultInstance;
    }

    public BodySizeInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BodySizeInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sizeCur_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              sizeBase_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              areaCur_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              areaBase_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              lengthCur_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              lengthBase_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BodySizeInfo> PARSER =
        new com.google.protobuf.AbstractParser<BodySizeInfo>() {
      public BodySizeInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BodySizeInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BodySizeInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SIZE_CUR_FIELD_NUMBER = 1;
    private int sizeCur_;
    /**
     * <code>optional int32 size_cur = 1;</code>
     */
    public boolean hasSizeCur() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 size_cur = 1;</code>
     */
    public int getSizeCur() {
      return sizeCur_;
    }

    public static final int SIZE_BASE_FIELD_NUMBER = 2;
    private int sizeBase_;
    /**
     * <code>optional int32 size_base = 2;</code>
     */
    public boolean hasSizeBase() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 size_base = 2;</code>
     */
    public int getSizeBase() {
      return sizeBase_;
    }

    public static final int AREA_CUR_FIELD_NUMBER = 3;
    private int areaCur_;
    /**
     * <code>optional int32 area_cur = 3;</code>
     *
     * <pre>
     *!&lt; size_cur^0.666 
     * </pre>
     */
    public boolean hasAreaCur() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 area_cur = 3;</code>
     *
     * <pre>
     *!&lt; size_cur^0.666 
     * </pre>
     */
    public int getAreaCur() {
      return areaCur_;
    }

    public static final int AREA_BASE_FIELD_NUMBER = 4;
    private int areaBase_;
    /**
     * <code>optional int32 area_base = 4;</code>
     *
     * <pre>
     *!&lt; size_base^0.666 
     * </pre>
     */
    public boolean hasAreaBase() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 area_base = 4;</code>
     *
     * <pre>
     *!&lt; size_base^0.666 
     * </pre>
     */
    public int getAreaBase() {
      return areaBase_;
    }

    public static final int LENGTH_CUR_FIELD_NUMBER = 5;
    private int lengthCur_;
    /**
     * <code>optional int32 length_cur = 5;</code>
     *
     * <pre>
     *!&lt; (size_cur*10000)^0.333 
     * </pre>
     */
    public boolean hasLengthCur() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 length_cur = 5;</code>
     *
     * <pre>
     *!&lt; (size_cur*10000)^0.333 
     * </pre>
     */
    public int getLengthCur() {
      return lengthCur_;
    }

    public static final int LENGTH_BASE_FIELD_NUMBER = 6;
    private int lengthBase_;
    /**
     * <code>optional int32 length_base = 6;</code>
     *
     * <pre>
     *!&lt; (size_base*10000)^0.333 
     * </pre>
     */
    public boolean hasLengthBase() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 length_base = 6;</code>
     *
     * <pre>
     *!&lt; (size_base*10000)^0.333 
     * </pre>
     */
    public int getLengthBase() {
      return lengthBase_;
    }

    private void initFields() {
      sizeCur_ = 0;
      sizeBase_ = 0;
      areaCur_ = 0;
      areaBase_ = 0;
      lengthCur_ = 0;
      lengthBase_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, sizeCur_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, sizeBase_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, areaCur_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, areaBase_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, lengthCur_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, lengthBase_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, sizeCur_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, sizeBase_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, areaCur_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, areaBase_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, lengthCur_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, lengthBase_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfoOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sizeCur_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        sizeBase_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        areaCur_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        areaBase_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        lengthCur_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        lengthBase_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sizeCur_ = sizeCur_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sizeBase_ = sizeBase_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.areaCur_ = areaCur_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.areaBase_ = areaBase_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lengthCur_ = lengthCur_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.lengthBase_ = lengthBase_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance()) return this;
        if (other.hasSizeCur()) {
          setSizeCur(other.getSizeCur());
        }
        if (other.hasSizeBase()) {
          setSizeBase(other.getSizeBase());
        }
        if (other.hasAreaCur()) {
          setAreaCur(other.getAreaCur());
        }
        if (other.hasAreaBase()) {
          setAreaBase(other.getAreaBase());
        }
        if (other.hasLengthCur()) {
          setLengthCur(other.getLengthCur());
        }
        if (other.hasLengthBase()) {
          setLengthBase(other.getLengthBase());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int sizeCur_ ;
      /**
       * <code>optional int32 size_cur = 1;</code>
       */
      public boolean hasSizeCur() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 size_cur = 1;</code>
       */
      public int getSizeCur() {
        return sizeCur_;
      }
      /**
       * <code>optional int32 size_cur = 1;</code>
       */
      public Builder setSizeCur(int value) {
        bitField0_ |= 0x00000001;
        sizeCur_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 size_cur = 1;</code>
       */
      public Builder clearSizeCur() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sizeCur_ = 0;
        
        return this;
      }

      private int sizeBase_ ;
      /**
       * <code>optional int32 size_base = 2;</code>
       */
      public boolean hasSizeBase() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 size_base = 2;</code>
       */
      public int getSizeBase() {
        return sizeBase_;
      }
      /**
       * <code>optional int32 size_base = 2;</code>
       */
      public Builder setSizeBase(int value) {
        bitField0_ |= 0x00000002;
        sizeBase_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 size_base = 2;</code>
       */
      public Builder clearSizeBase() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sizeBase_ = 0;
        
        return this;
      }

      private int areaCur_ ;
      /**
       * <code>optional int32 area_cur = 3;</code>
       *
       * <pre>
       *!&lt; size_cur^0.666 
       * </pre>
       */
      public boolean hasAreaCur() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 area_cur = 3;</code>
       *
       * <pre>
       *!&lt; size_cur^0.666 
       * </pre>
       */
      public int getAreaCur() {
        return areaCur_;
      }
      /**
       * <code>optional int32 area_cur = 3;</code>
       *
       * <pre>
       *!&lt; size_cur^0.666 
       * </pre>
       */
      public Builder setAreaCur(int value) {
        bitField0_ |= 0x00000004;
        areaCur_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 area_cur = 3;</code>
       *
       * <pre>
       *!&lt; size_cur^0.666 
       * </pre>
       */
      public Builder clearAreaCur() {
        bitField0_ = (bitField0_ & ~0x00000004);
        areaCur_ = 0;
        
        return this;
      }

      private int areaBase_ ;
      /**
       * <code>optional int32 area_base = 4;</code>
       *
       * <pre>
       *!&lt; size_base^0.666 
       * </pre>
       */
      public boolean hasAreaBase() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 area_base = 4;</code>
       *
       * <pre>
       *!&lt; size_base^0.666 
       * </pre>
       */
      public int getAreaBase() {
        return areaBase_;
      }
      /**
       * <code>optional int32 area_base = 4;</code>
       *
       * <pre>
       *!&lt; size_base^0.666 
       * </pre>
       */
      public Builder setAreaBase(int value) {
        bitField0_ |= 0x00000008;
        areaBase_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 area_base = 4;</code>
       *
       * <pre>
       *!&lt; size_base^0.666 
       * </pre>
       */
      public Builder clearAreaBase() {
        bitField0_ = (bitField0_ & ~0x00000008);
        areaBase_ = 0;
        
        return this;
      }

      private int lengthCur_ ;
      /**
       * <code>optional int32 length_cur = 5;</code>
       *
       * <pre>
       *!&lt; (size_cur*10000)^0.333 
       * </pre>
       */
      public boolean hasLengthCur() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 length_cur = 5;</code>
       *
       * <pre>
       *!&lt; (size_cur*10000)^0.333 
       * </pre>
       */
      public int getLengthCur() {
        return lengthCur_;
      }
      /**
       * <code>optional int32 length_cur = 5;</code>
       *
       * <pre>
       *!&lt; (size_cur*10000)^0.333 
       * </pre>
       */
      public Builder setLengthCur(int value) {
        bitField0_ |= 0x00000010;
        lengthCur_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 length_cur = 5;</code>
       *
       * <pre>
       *!&lt; (size_cur*10000)^0.333 
       * </pre>
       */
      public Builder clearLengthCur() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lengthCur_ = 0;
        
        return this;
      }

      private int lengthBase_ ;
      /**
       * <code>optional int32 length_base = 6;</code>
       *
       * <pre>
       *!&lt; (size_base*10000)^0.333 
       * </pre>
       */
      public boolean hasLengthBase() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 length_base = 6;</code>
       *
       * <pre>
       *!&lt; (size_base*10000)^0.333 
       * </pre>
       */
      public int getLengthBase() {
        return lengthBase_;
      }
      /**
       * <code>optional int32 length_base = 6;</code>
       *
       * <pre>
       *!&lt; (size_base*10000)^0.333 
       * </pre>
       */
      public Builder setLengthBase(int value) {
        bitField0_ |= 0x00000020;
        lengthBase_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 length_base = 6;</code>
       *
       * <pre>
       *!&lt; (size_base*10000)^0.333 
       * </pre>
       */
      public Builder clearLengthBase() {
        bitField0_ = (bitField0_ & ~0x00000020);
        lengthBase_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo)
    }

    static {
      defaultInstance = new BodySizeInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo)
  }

  public interface UnitAppearanceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.UnitAppearance)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    java.util.List<java.lang.Integer> getBodyModifiersList();
    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    int getBodyModifiersCount();
    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    int getBodyModifiers(int index);

    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    java.util.List<java.lang.Integer> getBpModifiersList();
    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    int getBpModifiersCount();
    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    int getBpModifiers(int index);

    /**
     * <code>optional int32 size_modifier = 3;</code>
     */
    boolean hasSizeModifier();
    /**
     * <code>optional int32 size_modifier = 3;</code>
     */
    int getSizeModifier();

    /**
     * <code>repeated int32 colors = 4;</code>
     */
    java.util.List<java.lang.Integer> getColorsList();
    /**
     * <code>repeated int32 colors = 4;</code>
     */
    int getColorsCount();
    /**
     * <code>repeated int32 colors = 4;</code>
     */
    int getColors(int index);
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitAppearance}
   */
  public static final class UnitAppearance extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.UnitAppearance)
      UnitAppearanceOrBuilder {
    // Use UnitAppearance.newBuilder() to construct.
    private UnitAppearance(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UnitAppearance(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final UnitAppearance defaultInstance;
    public static UnitAppearance getDefaultInstance() {
      return defaultInstance;
    }

    public UnitAppearance getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private UnitAppearance(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                bodyModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              bodyModifiers_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                bodyModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                bodyModifiers_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bpModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              bpModifiers_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                bpModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bpModifiers_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              sizeModifier_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              colors_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                colors_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          bodyModifiers_ = java.util.Collections.unmodifiableList(bodyModifiers_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bpModifiers_ = java.util.Collections.unmodifiableList(bpModifiers_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<UnitAppearance> PARSER =
        new com.google.protobuf.AbstractParser<UnitAppearance>() {
      public UnitAppearance parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UnitAppearance(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UnitAppearance> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BODY_MODIFIERS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> bodyModifiers_;
    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getBodyModifiersList() {
      return bodyModifiers_;
    }
    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    public int getBodyModifiersCount() {
      return bodyModifiers_.size();
    }
    /**
     * <code>repeated int32 body_modifiers = 1;</code>
     */
    public int getBodyModifiers(int index) {
      return bodyModifiers_.get(index);
    }

    public static final int BP_MODIFIERS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> bpModifiers_;
    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getBpModifiersList() {
      return bpModifiers_;
    }
    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    public int getBpModifiersCount() {
      return bpModifiers_.size();
    }
    /**
     * <code>repeated int32 bp_modifiers = 2;</code>
     */
    public int getBpModifiers(int index) {
      return bpModifiers_.get(index);
    }

    public static final int SIZE_MODIFIER_FIELD_NUMBER = 3;
    private int sizeModifier_;
    /**
     * <code>optional int32 size_modifier = 3;</code>
     */
    public boolean hasSizeModifier() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 size_modifier = 3;</code>
     */
    public int getSizeModifier() {
      return sizeModifier_;
    }

    public static final int COLORS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> colors_;
    /**
     * <code>repeated int32 colors = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated int32 colors = 4;</code>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated int32 colors = 4;</code>
     */
    public int getColors(int index) {
      return colors_.get(index);
    }

    private void initFields() {
      bodyModifiers_ = java.util.Collections.emptyList();
      bpModifiers_ = java.util.Collections.emptyList();
      sizeModifier_ = 0;
      colors_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < bodyModifiers_.size(); i++) {
        output.writeInt32(1, bodyModifiers_.get(i));
      }
      for (int i = 0; i < bpModifiers_.size(); i++) {
        output.writeInt32(2, bpModifiers_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, sizeModifier_);
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeInt32(4, colors_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < bodyModifiers_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bodyModifiers_.get(i));
        }
        size += dataSize;
        size += 1 * getBodyModifiersList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bpModifiers_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bpModifiers_.get(i));
        }
        size += dataSize;
        size += 1 * getBpModifiersList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, sizeModifier_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < colors_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(colors_.get(i));
        }
        size += dataSize;
        size += 1 * getColorsList().size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitAppearance}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.UnitAppearance)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearanceOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bodyModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        bpModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        sizeModifier_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          bodyModifiers_ = java.util.Collections.unmodifiableList(bodyModifiers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.bodyModifiers_ = bodyModifiers_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          bpModifiers_ = java.util.Collections.unmodifiableList(bpModifiers_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bpModifiers_ = bpModifiers_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sizeModifier_ = sizeModifier_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.colors_ = colors_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance()) return this;
        if (!other.bodyModifiers_.isEmpty()) {
          if (bodyModifiers_.isEmpty()) {
            bodyModifiers_ = other.bodyModifiers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBodyModifiersIsMutable();
            bodyModifiers_.addAll(other.bodyModifiers_);
          }
          
        }
        if (!other.bpModifiers_.isEmpty()) {
          if (bpModifiers_.isEmpty()) {
            bpModifiers_ = other.bpModifiers_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBpModifiersIsMutable();
            bpModifiers_.addAll(other.bpModifiers_);
          }
          
        }
        if (other.hasSizeModifier()) {
          setSizeModifier(other.getSizeModifier());
        }
        if (!other.colors_.isEmpty()) {
          if (colors_.isEmpty()) {
            colors_ = other.colors_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureColorsIsMutable();
            colors_.addAll(other.colors_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> bodyModifiers_ = java.util.Collections.emptyList();
      private void ensureBodyModifiersIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          bodyModifiers_ = new java.util.ArrayList<java.lang.Integer>(bodyModifiers_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getBodyModifiersList() {
        return java.util.Collections.unmodifiableList(bodyModifiers_);
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public int getBodyModifiersCount() {
        return bodyModifiers_.size();
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public int getBodyModifiers(int index) {
        return bodyModifiers_.get(index);
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public Builder setBodyModifiers(
          int index, int value) {
        ensureBodyModifiersIsMutable();
        bodyModifiers_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public Builder addBodyModifiers(int value) {
        ensureBodyModifiersIsMutable();
        bodyModifiers_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public Builder addAllBodyModifiers(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBodyModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bodyModifiers_);
        
        return this;
      }
      /**
       * <code>repeated int32 body_modifiers = 1;</code>
       */
      public Builder clearBodyModifiers() {
        bodyModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        
        return this;
      }

      private java.util.List<java.lang.Integer> bpModifiers_ = java.util.Collections.emptyList();
      private void ensureBpModifiersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bpModifiers_ = new java.util.ArrayList<java.lang.Integer>(bpModifiers_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getBpModifiersList() {
        return java.util.Collections.unmodifiableList(bpModifiers_);
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public int getBpModifiersCount() {
        return bpModifiers_.size();
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public int getBpModifiers(int index) {
        return bpModifiers_.get(index);
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public Builder setBpModifiers(
          int index, int value) {
        ensureBpModifiersIsMutable();
        bpModifiers_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public Builder addBpModifiers(int value) {
        ensureBpModifiersIsMutable();
        bpModifiers_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public Builder addAllBpModifiers(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBpModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bpModifiers_);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 2;</code>
       */
      public Builder clearBpModifiers() {
        bpModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }

      private int sizeModifier_ ;
      /**
       * <code>optional int32 size_modifier = 3;</code>
       */
      public boolean hasSizeModifier() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 size_modifier = 3;</code>
       */
      public int getSizeModifier() {
        return sizeModifier_;
      }
      /**
       * <code>optional int32 size_modifier = 3;</code>
       */
      public Builder setSizeModifier(int value) {
        bitField0_ |= 0x00000004;
        sizeModifier_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 size_modifier = 3;</code>
       */
      public Builder clearSizeModifier() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sizeModifier_ = 0;
        
        return this;
      }

      private java.util.List<java.lang.Integer> colors_ = java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          colors_ = new java.util.ArrayList<java.lang.Integer>(colors_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getColorsList() {
        return java.util.Collections.unmodifiableList(colors_);
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public int getColorsCount() {
        return colors_.size();
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public int getColors(int index) {
        return colors_.get(index);
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public Builder setColors(
          int index, int value) {
        ensureColorsIsMutable();
        colors_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public Builder addColors(int value) {
        ensureColorsIsMutable();
        colors_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public Builder addAllColors(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureColorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, colors_);
        
        return this;
      }
      /**
       * <code>repeated int32 colors = 4;</code>
       */
      public Builder clearColors() {
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.UnitAppearance)
    }

    static {
      defaultInstance = new UnitAppearance(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.UnitAppearance)
  }

  public interface UnitDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.UnitDefinition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required int32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional bool isValid = 2;</code>
     */
    boolean hasIsValid();
    /**
     * <code>optional bool isValid = 2;</code>
     */
    boolean getIsValid();

    /**
     * <code>optional int32 pos_x = 3;</code>
     */
    boolean hasPosX();
    /**
     * <code>optional int32 pos_x = 3;</code>
     */
    int getPosX();

    /**
     * <code>optional int32 pos_y = 4;</code>
     */
    boolean hasPosY();
    /**
     * <code>optional int32 pos_y = 4;</code>
     */
    int getPosY();

    /**
     * <code>optional int32 pos_z = 5;</code>
     */
    boolean hasPosZ();
    /**
     * <code>optional int32 pos_z = 5;</code>
     */
    int getPosZ();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
     */
    boolean hasRace();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getRace();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
     */
    boolean hasProfessionColor();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getProfessionColor();

    /**
     * <code>optional uint32 flags1 = 8;</code>
     */
    boolean hasFlags1();
    /**
     * <code>optional uint32 flags1 = 8;</code>
     */
    int getFlags1();

    /**
     * <code>optional uint32 flags2 = 9;</code>
     */
    boolean hasFlags2();
    /**
     * <code>optional uint32 flags2 = 9;</code>
     */
    int getFlags2();

    /**
     * <code>optional uint32 flags3 = 10;</code>
     */
    boolean hasFlags3();
    /**
     * <code>optional uint32 flags3 = 10;</code>
     */
    int getFlags3();

    /**
     * <code>optional bool is_soldier = 11;</code>
     */
    boolean hasIsSoldier();
    /**
     * <code>optional bool is_soldier = 11;</code>
     */
    boolean getIsSoldier();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
     */
    boolean hasSizeInfo();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo getSizeInfo();

    /**
     * <code>optional string name = 13;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 13;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 13;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional int32 blood_max = 14;</code>
     */
    boolean hasBloodMax();
    /**
     * <code>optional int32 blood_max = 14;</code>
     */
    int getBloodMax();

    /**
     * <code>optional int32 blood_count = 15;</code>
     */
    boolean hasBloodCount();
    /**
     * <code>optional int32 blood_count = 15;</code>
     */
    int getBloodCount();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
     */
    boolean hasAppearance();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance getAppearance();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitDefinition}
   */
  public static final class UnitDefinition extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.UnitDefinition)
      UnitDefinitionOrBuilder {
    // Use UnitDefinition.newBuilder() to construct.
    private UnitDefinition(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UnitDefinition(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final UnitDefinition defaultInstance;
    public static UnitDefinition getDefaultInstance() {
      return defaultInstance;
    }

    public UnitDefinition getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private UnitDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              isValid_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              posX_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              posY_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              posZ_ = input.readInt32();
              break;
            }
            case 50: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = race_.toBuilder();
              }
              race_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(race_);
                race_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = professionColor_.toBuilder();
              }
              professionColor_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(professionColor_);
                professionColor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              flags1_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              flags2_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              flags3_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              isSoldier_ = input.readBool();
              break;
            }
            case 98: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = sizeInfo_.toBuilder();
              }
              sizeInfo_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sizeInfo_);
                sizeInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              name_ = bs;
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              bloodMax_ = input.readInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              bloodCount_ = input.readInt32();
              break;
            }
            case 130: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = appearance_.toBuilder();
              }
              appearance_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(appearance_);
                appearance_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<UnitDefinition> PARSER =
        new com.google.protobuf.AbstractParser<UnitDefinition>() {
      public UnitDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UnitDefinition(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UnitDefinition> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required int32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int ISVALID_FIELD_NUMBER = 2;
    private boolean isValid_;
    /**
     * <code>optional bool isValid = 2;</code>
     */
    public boolean hasIsValid() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool isValid = 2;</code>
     */
    public boolean getIsValid() {
      return isValid_;
    }

    public static final int POS_X_FIELD_NUMBER = 3;
    private int posX_;
    /**
     * <code>optional int32 pos_x = 3;</code>
     */
    public boolean hasPosX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 pos_x = 3;</code>
     */
    public int getPosX() {
      return posX_;
    }

    public static final int POS_Y_FIELD_NUMBER = 4;
    private int posY_;
    /**
     * <code>optional int32 pos_y = 4;</code>
     */
    public boolean hasPosY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pos_y = 4;</code>
     */
    public int getPosY() {
      return posY_;
    }

    public static final int POS_Z_FIELD_NUMBER = 5;
    private int posZ_;
    /**
     * <code>optional int32 pos_z = 5;</code>
     */
    public boolean hasPosZ() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pos_z = 5;</code>
     */
    public int getPosZ() {
      return posZ_;
    }

    public static final int RACE_FIELD_NUMBER = 6;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair race_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
     */
    public boolean hasRace() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getRace() {
      return race_;
    }

    public static final int PROFESSION_COLOR_FIELD_NUMBER = 7;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition professionColor_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
     */
    public boolean hasProfessionColor() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getProfessionColor() {
      return professionColor_;
    }

    public static final int FLAGS1_FIELD_NUMBER = 8;
    private int flags1_;
    /**
     * <code>optional uint32 flags1 = 8;</code>
     */
    public boolean hasFlags1() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 flags1 = 8;</code>
     */
    public int getFlags1() {
      return flags1_;
    }

    public static final int FLAGS2_FIELD_NUMBER = 9;
    private int flags2_;
    /**
     * <code>optional uint32 flags2 = 9;</code>
     */
    public boolean hasFlags2() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 flags2 = 9;</code>
     */
    public int getFlags2() {
      return flags2_;
    }

    public static final int FLAGS3_FIELD_NUMBER = 10;
    private int flags3_;
    /**
     * <code>optional uint32 flags3 = 10;</code>
     */
    public boolean hasFlags3() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 flags3 = 10;</code>
     */
    public int getFlags3() {
      return flags3_;
    }

    public static final int IS_SOLDIER_FIELD_NUMBER = 11;
    private boolean isSoldier_;
    /**
     * <code>optional bool is_soldier = 11;</code>
     */
    public boolean hasIsSoldier() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool is_soldier = 11;</code>
     */
    public boolean getIsSoldier() {
      return isSoldier_;
    }

    public static final int SIZE_INFO_FIELD_NUMBER = 12;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo sizeInfo_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
     */
    public boolean hasSizeInfo() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo getSizeInfo() {
      return sizeInfo_;
    }

    public static final int NAME_FIELD_NUMBER = 13;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 13;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional string name = 13;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 13;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BLOOD_MAX_FIELD_NUMBER = 14;
    private int bloodMax_;
    /**
     * <code>optional int32 blood_max = 14;</code>
     */
    public boolean hasBloodMax() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 blood_max = 14;</code>
     */
    public int getBloodMax() {
      return bloodMax_;
    }

    public static final int BLOOD_COUNT_FIELD_NUMBER = 15;
    private int bloodCount_;
    /**
     * <code>optional int32 blood_count = 15;</code>
     */
    public boolean hasBloodCount() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 blood_count = 15;</code>
     */
    public int getBloodCount() {
      return bloodCount_;
    }

    public static final int APPEARANCE_FIELD_NUMBER = 16;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance appearance_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
     */
    public boolean hasAppearance() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance getAppearance() {
      return appearance_;
    }

    private void initFields() {
      id_ = 0;
      isValid_ = false;
      posX_ = 0;
      posY_ = 0;
      posZ_ = 0;
      race_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      professionColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      flags1_ = 0;
      flags2_ = 0;
      flags3_ = 0;
      isSoldier_ = false;
      sizeInfo_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance();
      name_ = "";
      bloodMax_ = 0;
      bloodCount_ = 0;
      appearance_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRace()) {
        if (!getRace().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasProfessionColor()) {
        if (!getProfessionColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, isValid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, posX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, posY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, posZ_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, race_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, professionColor_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, flags1_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, flags2_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, flags3_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, isSoldier_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, sizeInfo_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, getNameBytes());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, bloodMax_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, bloodCount_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, appearance_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isValid_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, posX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, posY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, posZ_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, race_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, professionColor_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, flags1_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, flags2_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, flags3_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isSoldier_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, sizeInfo_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getNameBytes());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, bloodMax_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, bloodCount_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, appearance_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.UnitDefinition)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinitionOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isValid_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        posX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        posY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        posZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        race_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        professionColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        flags1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        flags2_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        flags3_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        isSoldier_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        sizeInfo_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000800);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        bloodMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        bloodCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        appearance_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.isValid_ = isValid_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.posX_ = posX_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.posY_ = posY_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.posZ_ = posZ_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.race_ = race_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.professionColor_ = professionColor_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.flags1_ = flags1_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.flags2_ = flags2_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.flags3_ = flags3_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isSoldier_ = isSoldier_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.sizeInfo_ = sizeInfo_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.bloodMax_ = bloodMax_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.bloodCount_ = bloodCount_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.appearance_ = appearance_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasIsValid()) {
          setIsValid(other.getIsValid());
        }
        if (other.hasPosX()) {
          setPosX(other.getPosX());
        }
        if (other.hasPosY()) {
          setPosY(other.getPosY());
        }
        if (other.hasPosZ()) {
          setPosZ(other.getPosZ());
        }
        if (other.hasRace()) {
          mergeRace(other.getRace());
        }
        if (other.hasProfessionColor()) {
          mergeProfessionColor(other.getProfessionColor());
        }
        if (other.hasFlags1()) {
          setFlags1(other.getFlags1());
        }
        if (other.hasFlags2()) {
          setFlags2(other.getFlags2());
        }
        if (other.hasFlags3()) {
          setFlags3(other.getFlags3());
        }
        if (other.hasIsSoldier()) {
          setIsSoldier(other.getIsSoldier());
        }
        if (other.hasSizeInfo()) {
          mergeSizeInfo(other.getSizeInfo());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00001000;
          name_ = other.name_;
          
        }
        if (other.hasBloodMax()) {
          setBloodMax(other.getBloodMax());
        }
        if (other.hasBloodCount()) {
          setBloodCount(other.getBloodCount());
        }
        if (other.hasAppearance()) {
          mergeAppearance(other.getAppearance());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (hasRace()) {
          if (!getRace().isInitialized()) {
            
            return false;
          }
        }
        if (hasProfessionColor()) {
          if (!getProfessionColor().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>required int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>required int32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      private boolean isValid_ ;
      /**
       * <code>optional bool isValid = 2;</code>
       */
      public boolean hasIsValid() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool isValid = 2;</code>
       */
      public boolean getIsValid() {
        return isValid_;
      }
      /**
       * <code>optional bool isValid = 2;</code>
       */
      public Builder setIsValid(boolean value) {
        bitField0_ |= 0x00000002;
        isValid_ = value;
        
        return this;
      }
      /**
       * <code>optional bool isValid = 2;</code>
       */
      public Builder clearIsValid() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isValid_ = false;
        
        return this;
      }

      private int posX_ ;
      /**
       * <code>optional int32 pos_x = 3;</code>
       */
      public boolean hasPosX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 pos_x = 3;</code>
       */
      public int getPosX() {
        return posX_;
      }
      /**
       * <code>optional int32 pos_x = 3;</code>
       */
      public Builder setPosX(int value) {
        bitField0_ |= 0x00000004;
        posX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_x = 3;</code>
       */
      public Builder clearPosX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        posX_ = 0;
        
        return this;
      }

      private int posY_ ;
      /**
       * <code>optional int32 pos_y = 4;</code>
       */
      public boolean hasPosY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 pos_y = 4;</code>
       */
      public int getPosY() {
        return posY_;
      }
      /**
       * <code>optional int32 pos_y = 4;</code>
       */
      public Builder setPosY(int value) {
        bitField0_ |= 0x00000008;
        posY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_y = 4;</code>
       */
      public Builder clearPosY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        posY_ = 0;
        
        return this;
      }

      private int posZ_ ;
      /**
       * <code>optional int32 pos_z = 5;</code>
       */
      public boolean hasPosZ() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 pos_z = 5;</code>
       */
      public int getPosZ() {
        return posZ_;
      }
      /**
       * <code>optional int32 pos_z = 5;</code>
       */
      public Builder setPosZ(int value) {
        bitField0_ |= 0x00000010;
        posZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_z = 5;</code>
       */
      public Builder clearPosZ() {
        bitField0_ = (bitField0_ & ~0x00000010);
        posZ_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair race_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public boolean hasRace() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getRace() {
        return race_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public Builder setRace(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        race_ = value;

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public Builder setRace(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        race_ = builderForValue.build();

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public Builder mergeRace(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            race_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) {
          race_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder(race_).mergeFrom(value).buildPartial();
        } else {
          race_ = value;
        }

        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair race = 6;</code>
       */
      public Builder clearRace() {
        race_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition professionColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public boolean hasProfessionColor() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getProfessionColor() {
        return professionColor_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public Builder setProfessionColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        professionColor_ = value;

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public Builder setProfessionColor(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        professionColor_ = builderForValue.build();

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public Builder mergeProfessionColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            professionColor_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance()) {
          professionColor_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.newBuilder(professionColor_).mergeFrom(value).buildPartial();
        } else {
          professionColor_ = value;
        }

        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition profession_color = 7;</code>
       */
      public Builder clearProfessionColor() {
        professionColor_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      private int flags1_ ;
      /**
       * <code>optional uint32 flags1 = 8;</code>
       */
      public boolean hasFlags1() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 flags1 = 8;</code>
       */
      public int getFlags1() {
        return flags1_;
      }
      /**
       * <code>optional uint32 flags1 = 8;</code>
       */
      public Builder setFlags1(int value) {
        bitField0_ |= 0x00000080;
        flags1_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 flags1 = 8;</code>
       */
      public Builder clearFlags1() {
        bitField0_ = (bitField0_ & ~0x00000080);
        flags1_ = 0;
        
        return this;
      }

      private int flags2_ ;
      /**
       * <code>optional uint32 flags2 = 9;</code>
       */
      public boolean hasFlags2() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 flags2 = 9;</code>
       */
      public int getFlags2() {
        return flags2_;
      }
      /**
       * <code>optional uint32 flags2 = 9;</code>
       */
      public Builder setFlags2(int value) {
        bitField0_ |= 0x00000100;
        flags2_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 flags2 = 9;</code>
       */
      public Builder clearFlags2() {
        bitField0_ = (bitField0_ & ~0x00000100);
        flags2_ = 0;
        
        return this;
      }

      private int flags3_ ;
      /**
       * <code>optional uint32 flags3 = 10;</code>
       */
      public boolean hasFlags3() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 flags3 = 10;</code>
       */
      public int getFlags3() {
        return flags3_;
      }
      /**
       * <code>optional uint32 flags3 = 10;</code>
       */
      public Builder setFlags3(int value) {
        bitField0_ |= 0x00000200;
        flags3_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 flags3 = 10;</code>
       */
      public Builder clearFlags3() {
        bitField0_ = (bitField0_ & ~0x00000200);
        flags3_ = 0;
        
        return this;
      }

      private boolean isSoldier_ ;
      /**
       * <code>optional bool is_soldier = 11;</code>
       */
      public boolean hasIsSoldier() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool is_soldier = 11;</code>
       */
      public boolean getIsSoldier() {
        return isSoldier_;
      }
      /**
       * <code>optional bool is_soldier = 11;</code>
       */
      public Builder setIsSoldier(boolean value) {
        bitField0_ |= 0x00000400;
        isSoldier_ = value;
        
        return this;
      }
      /**
       * <code>optional bool is_soldier = 11;</code>
       */
      public Builder clearIsSoldier() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isSoldier_ = false;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo sizeInfo_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public boolean hasSizeInfo() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo getSizeInfo() {
        return sizeInfo_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public Builder setSizeInfo(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        sizeInfo_ = value;

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public Builder setSizeInfo(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.Builder builderForValue) {
        sizeInfo_ = builderForValue.build();

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public Builder mergeSizeInfo(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo value) {
        if (((bitField0_ & 0x00000800) == 0x00000800) &&
            sizeInfo_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance()) {
          sizeInfo_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.newBuilder(sizeInfo_).mergeFrom(value).buildPartial();
        } else {
          sizeInfo_ = value;
        }

        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.BodySizeInfo size_info = 12;</code>
       */
      public Builder clearSizeInfo() {
        sizeInfo_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodySizeInfo.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 13;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional string name = 13;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 13;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 13;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 13;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00001000);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 13;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        name_ = value;
        
        return this;
      }

      private int bloodMax_ ;
      /**
       * <code>optional int32 blood_max = 14;</code>
       */
      public boolean hasBloodMax() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 blood_max = 14;</code>
       */
      public int getBloodMax() {
        return bloodMax_;
      }
      /**
       * <code>optional int32 blood_max = 14;</code>
       */
      public Builder setBloodMax(int value) {
        bitField0_ |= 0x00002000;
        bloodMax_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 blood_max = 14;</code>
       */
      public Builder clearBloodMax() {
        bitField0_ = (bitField0_ & ~0x00002000);
        bloodMax_ = 0;
        
        return this;
      }

      private int bloodCount_ ;
      /**
       * <code>optional int32 blood_count = 15;</code>
       */
      public boolean hasBloodCount() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 blood_count = 15;</code>
       */
      public int getBloodCount() {
        return bloodCount_;
      }
      /**
       * <code>optional int32 blood_count = 15;</code>
       */
      public Builder setBloodCount(int value) {
        bitField0_ |= 0x00004000;
        bloodCount_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 blood_count = 15;</code>
       */
      public Builder clearBloodCount() {
        bitField0_ = (bitField0_ & ~0x00004000);
        bloodCount_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance appearance_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public boolean hasAppearance() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance getAppearance() {
        return appearance_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public Builder setAppearance(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance value) {
        if (value == null) {
          throw new NullPointerException();
        }
        appearance_ = value;

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public Builder setAppearance(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.Builder builderForValue) {
        appearance_ = builderForValue.build();

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public Builder mergeAppearance(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance value) {
        if (((bitField0_ & 0x00008000) == 0x00008000) &&
            appearance_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance()) {
          appearance_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.newBuilder(appearance_).mergeFrom(value).buildPartial();
        } else {
          appearance_ = value;
        }

        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitAppearance appearance = 16;</code>
       */
      public Builder clearAppearance() {
        appearance_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitAppearance.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.UnitDefinition)
    }

    static {
      defaultInstance = new UnitDefinition(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.UnitDefinition)
  }

  public interface UnitListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.UnitList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> 
        getCreatureListList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getCreatureList(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    int getCreatureListCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitList}
   */
  public static final class UnitList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.UnitList)
      UnitListOrBuilder {
    // Use UnitList.newBuilder() to construct.
    private UnitList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private UnitList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final UnitList defaultInstance;
    public static UnitList getDefaultInstance() {
      return defaultInstance;
    }

    public UnitList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private UnitList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                creatureList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition>();
                mutable_bitField0_ |= 0x00000001;
              }
              creatureList_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          creatureList_ = java.util.Collections.unmodifiableList(creatureList_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<UnitList> PARSER =
        new com.google.protobuf.AbstractParser<UnitList>() {
      public UnitList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UnitList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<UnitList> getParserForType() {
      return PARSER;
    }

    public static final int CREATURE_LIST_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> creatureList_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> getCreatureListList() {
      return creatureList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinitionOrBuilder> 
        getCreatureListOrBuilderList() {
      return creatureList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    public int getCreatureListCount() {
      return creatureList_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getCreatureList(int index) {
      return creatureList_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinitionOrBuilder getCreatureListOrBuilder(
        int index) {
      return creatureList_.get(index);
    }

    private void initFields() {
      creatureList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getCreatureListCount(); i++) {
        if (!getCreatureList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < creatureList_.size(); i++) {
        output.writeMessage(1, creatureList_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < creatureList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, creatureList_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.UnitList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.UnitList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        creatureList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          creatureList_ = java.util.Collections.unmodifiableList(creatureList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.creatureList_ = creatureList_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList.getDefaultInstance()) return this;
        if (!other.creatureList_.isEmpty()) {
          if (creatureList_.isEmpty()) {
            creatureList_ = other.creatureList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCreatureListIsMutable();
            creatureList_.addAll(other.creatureList_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getCreatureListCount(); i++) {
          if (!getCreatureList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> creatureList_ =
        java.util.Collections.emptyList();
      private void ensureCreatureListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          creatureList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition>(creatureList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> getCreatureListList() {
        return java.util.Collections.unmodifiableList(creatureList_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public int getCreatureListCount() {
        return creatureList_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getCreatureList(int index) {
        return creatureList_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder setCreatureList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureListIsMutable();
        creatureList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder setCreatureList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureCreatureListIsMutable();
        creatureList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder addCreatureList(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureListIsMutable();
        creatureList_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder addCreatureList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureListIsMutable();
        creatureList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder addCreatureList(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureCreatureListIsMutable();
        creatureList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder addCreatureList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureCreatureListIsMutable();
        creatureList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder addAllCreatureList(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> values) {
        ensureCreatureListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, creatureList_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder clearCreatureList() {
        creatureList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition creature_list = 1;</code>
       */
      public Builder removeCreatureList(int index) {
        ensureCreatureListIsMutable();
        creatureList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.UnitList)
    }

    static {
      defaultInstance = new UnitList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.UnitList)
  }

  public interface BlockRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BlockRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 blocks_needed = 1;</code>
     */
    boolean hasBlocksNeeded();
    /**
     * <code>optional int32 blocks_needed = 1;</code>
     */
    int getBlocksNeeded();

    /**
     * <code>optional int32 min_x = 2;</code>
     */
    boolean hasMinX();
    /**
     * <code>optional int32 min_x = 2;</code>
     */
    int getMinX();

    /**
     * <code>optional int32 max_x = 3;</code>
     */
    boolean hasMaxX();
    /**
     * <code>optional int32 max_x = 3;</code>
     */
    int getMaxX();

    /**
     * <code>optional int32 min_y = 4;</code>
     */
    boolean hasMinY();
    /**
     * <code>optional int32 min_y = 4;</code>
     */
    int getMinY();

    /**
     * <code>optional int32 max_y = 5;</code>
     */
    boolean hasMaxY();
    /**
     * <code>optional int32 max_y = 5;</code>
     */
    int getMaxY();

    /**
     * <code>optional int32 min_z = 6;</code>
     */
    boolean hasMinZ();
    /**
     * <code>optional int32 min_z = 6;</code>
     */
    int getMinZ();

    /**
     * <code>optional int32 max_z = 7;</code>
     */
    boolean hasMaxZ();
    /**
     * <code>optional int32 max_z = 7;</code>
     */
    int getMaxZ();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BlockRequest}
   */
  public static final class BlockRequest extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BlockRequest)
      BlockRequestOrBuilder {
    // Use BlockRequest.newBuilder() to construct.
    private BlockRequest(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlockRequest(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BlockRequest defaultInstance;
    public static BlockRequest getDefaultInstance() {
      return defaultInstance;
    }

    public BlockRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BlockRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              blocksNeeded_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              minX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxX_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              minY_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              maxY_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              minZ_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              maxZ_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BlockRequest> PARSER =
        new com.google.protobuf.AbstractParser<BlockRequest>() {
      public BlockRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlockRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlockRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BLOCKS_NEEDED_FIELD_NUMBER = 1;
    private int blocksNeeded_;
    /**
     * <code>optional int32 blocks_needed = 1;</code>
     */
    public boolean hasBlocksNeeded() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 blocks_needed = 1;</code>
     */
    public int getBlocksNeeded() {
      return blocksNeeded_;
    }

    public static final int MIN_X_FIELD_NUMBER = 2;
    private int minX_;
    /**
     * <code>optional int32 min_x = 2;</code>
     */
    public boolean hasMinX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 min_x = 2;</code>
     */
    public int getMinX() {
      return minX_;
    }

    public static final int MAX_X_FIELD_NUMBER = 3;
    private int maxX_;
    /**
     * <code>optional int32 max_x = 3;</code>
     */
    public boolean hasMaxX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 max_x = 3;</code>
     */
    public int getMaxX() {
      return maxX_;
    }

    public static final int MIN_Y_FIELD_NUMBER = 4;
    private int minY_;
    /**
     * <code>optional int32 min_y = 4;</code>
     */
    public boolean hasMinY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 min_y = 4;</code>
     */
    public int getMinY() {
      return minY_;
    }

    public static final int MAX_Y_FIELD_NUMBER = 5;
    private int maxY_;
    /**
     * <code>optional int32 max_y = 5;</code>
     */
    public boolean hasMaxY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 max_y = 5;</code>
     */
    public int getMaxY() {
      return maxY_;
    }

    public static final int MIN_Z_FIELD_NUMBER = 6;
    private int minZ_;
    /**
     * <code>optional int32 min_z = 6;</code>
     */
    public boolean hasMinZ() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 min_z = 6;</code>
     */
    public int getMinZ() {
      return minZ_;
    }

    public static final int MAX_Z_FIELD_NUMBER = 7;
    private int maxZ_;
    /**
     * <code>optional int32 max_z = 7;</code>
     */
    public boolean hasMaxZ() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 max_z = 7;</code>
     */
    public int getMaxZ() {
      return maxZ_;
    }

    private void initFields() {
      blocksNeeded_ = 0;
      minX_ = 0;
      maxX_ = 0;
      minY_ = 0;
      maxY_ = 0;
      minZ_ = 0;
      maxZ_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, blocksNeeded_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, minX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, maxX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, minY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, maxY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, minZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, maxZ_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, blocksNeeded_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, minX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxX_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, minY_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, maxY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, minZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, maxZ_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BlockRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BlockRequest)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequestOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        blocksNeeded_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        minX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        minY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        minZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.blocksNeeded_ = blocksNeeded_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.minX_ = minX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxX_ = maxX_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.minY_ = minY_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxY_ = maxY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.minZ_ = minZ_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxZ_ = maxZ_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest.getDefaultInstance()) return this;
        if (other.hasBlocksNeeded()) {
          setBlocksNeeded(other.getBlocksNeeded());
        }
        if (other.hasMinX()) {
          setMinX(other.getMinX());
        }
        if (other.hasMaxX()) {
          setMaxX(other.getMaxX());
        }
        if (other.hasMinY()) {
          setMinY(other.getMinY());
        }
        if (other.hasMaxY()) {
          setMaxY(other.getMaxY());
        }
        if (other.hasMinZ()) {
          setMinZ(other.getMinZ());
        }
        if (other.hasMaxZ()) {
          setMaxZ(other.getMaxZ());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int blocksNeeded_ ;
      /**
       * <code>optional int32 blocks_needed = 1;</code>
       */
      public boolean hasBlocksNeeded() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 blocks_needed = 1;</code>
       */
      public int getBlocksNeeded() {
        return blocksNeeded_;
      }
      /**
       * <code>optional int32 blocks_needed = 1;</code>
       */
      public Builder setBlocksNeeded(int value) {
        bitField0_ |= 0x00000001;
        blocksNeeded_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 blocks_needed = 1;</code>
       */
      public Builder clearBlocksNeeded() {
        bitField0_ = (bitField0_ & ~0x00000001);
        blocksNeeded_ = 0;
        
        return this;
      }

      private int minX_ ;
      /**
       * <code>optional int32 min_x = 2;</code>
       */
      public boolean hasMinX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 min_x = 2;</code>
       */
      public int getMinX() {
        return minX_;
      }
      /**
       * <code>optional int32 min_x = 2;</code>
       */
      public Builder setMinX(int value) {
        bitField0_ |= 0x00000002;
        minX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 min_x = 2;</code>
       */
      public Builder clearMinX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minX_ = 0;
        
        return this;
      }

      private int maxX_ ;
      /**
       * <code>optional int32 max_x = 3;</code>
       */
      public boolean hasMaxX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 max_x = 3;</code>
       */
      public int getMaxX() {
        return maxX_;
      }
      /**
       * <code>optional int32 max_x = 3;</code>
       */
      public Builder setMaxX(int value) {
        bitField0_ |= 0x00000004;
        maxX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 max_x = 3;</code>
       */
      public Builder clearMaxX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxX_ = 0;
        
        return this;
      }

      private int minY_ ;
      /**
       * <code>optional int32 min_y = 4;</code>
       */
      public boolean hasMinY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 min_y = 4;</code>
       */
      public int getMinY() {
        return minY_;
      }
      /**
       * <code>optional int32 min_y = 4;</code>
       */
      public Builder setMinY(int value) {
        bitField0_ |= 0x00000008;
        minY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 min_y = 4;</code>
       */
      public Builder clearMinY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minY_ = 0;
        
        return this;
      }

      private int maxY_ ;
      /**
       * <code>optional int32 max_y = 5;</code>
       */
      public boolean hasMaxY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 max_y = 5;</code>
       */
      public int getMaxY() {
        return maxY_;
      }
      /**
       * <code>optional int32 max_y = 5;</code>
       */
      public Builder setMaxY(int value) {
        bitField0_ |= 0x00000010;
        maxY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 max_y = 5;</code>
       */
      public Builder clearMaxY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxY_ = 0;
        
        return this;
      }

      private int minZ_ ;
      /**
       * <code>optional int32 min_z = 6;</code>
       */
      public boolean hasMinZ() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 min_z = 6;</code>
       */
      public int getMinZ() {
        return minZ_;
      }
      /**
       * <code>optional int32 min_z = 6;</code>
       */
      public Builder setMinZ(int value) {
        bitField0_ |= 0x00000020;
        minZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 min_z = 6;</code>
       */
      public Builder clearMinZ() {
        bitField0_ = (bitField0_ & ~0x00000020);
        minZ_ = 0;
        
        return this;
      }

      private int maxZ_ ;
      /**
       * <code>optional int32 max_z = 7;</code>
       */
      public boolean hasMaxZ() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 max_z = 7;</code>
       */
      public int getMaxZ() {
        return maxZ_;
      }
      /**
       * <code>optional int32 max_z = 7;</code>
       */
      public Builder setMaxZ(int value) {
        bitField0_ |= 0x00000040;
        maxZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 max_z = 7;</code>
       */
      public Builder clearMaxZ() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxZ_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BlockRequest)
    }

    static {
      defaultInstance = new BlockRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BlockRequest)
  }

  public interface BlockListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BlockList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> 
        getMapBlocksList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock getMapBlocks(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    int getMapBlocksCount();

    /**
     * <code>optional int32 map_x = 2;</code>
     */
    boolean hasMapX();
    /**
     * <code>optional int32 map_x = 2;</code>
     */
    int getMapX();

    /**
     * <code>optional int32 map_y = 3;</code>
     */
    boolean hasMapY();
    /**
     * <code>optional int32 map_y = 3;</code>
     */
    int getMapY();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BlockList}
   */
  public static final class BlockList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BlockList)
      BlockListOrBuilder {
    // Use BlockList.newBuilder() to construct.
    private BlockList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlockList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BlockList defaultInstance;
    public static BlockList getDefaultInstance() {
      return defaultInstance;
    }

    public BlockList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BlockList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                mapBlocks_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock>();
                mutable_bitField0_ |= 0x00000001;
              }
              mapBlocks_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              mapX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              mapY_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          mapBlocks_ = java.util.Collections.unmodifiableList(mapBlocks_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BlockList> PARSER =
        new com.google.protobuf.AbstractParser<BlockList>() {
      public BlockList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlockList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlockList> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAP_BLOCKS_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> mapBlocks_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> getMapBlocksList() {
      return mapBlocks_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlockOrBuilder> 
        getMapBlocksOrBuilderList() {
      return mapBlocks_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    public int getMapBlocksCount() {
      return mapBlocks_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock getMapBlocks(int index) {
      return mapBlocks_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlockOrBuilder getMapBlocksOrBuilder(
        int index) {
      return mapBlocks_.get(index);
    }

    public static final int MAP_X_FIELD_NUMBER = 2;
    private int mapX_;
    /**
     * <code>optional int32 map_x = 2;</code>
     */
    public boolean hasMapX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 map_x = 2;</code>
     */
    public int getMapX() {
      return mapX_;
    }

    public static final int MAP_Y_FIELD_NUMBER = 3;
    private int mapY_;
    /**
     * <code>optional int32 map_y = 3;</code>
     */
    public boolean hasMapY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 map_y = 3;</code>
     */
    public int getMapY() {
      return mapY_;
    }

    private void initFields() {
      mapBlocks_ = java.util.Collections.emptyList();
      mapX_ = 0;
      mapY_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getMapBlocksCount(); i++) {
        if (!getMapBlocks(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < mapBlocks_.size(); i++) {
        output.writeMessage(1, mapBlocks_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, mapY_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < mapBlocks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, mapBlocks_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, mapY_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BlockList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BlockList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mapBlocks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        mapX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        mapY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          mapBlocks_ = java.util.Collections.unmodifiableList(mapBlocks_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.mapBlocks_ = mapBlocks_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mapX_ = mapX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mapY_ = mapY_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList.getDefaultInstance()) return this;
        if (!other.mapBlocks_.isEmpty()) {
          if (mapBlocks_.isEmpty()) {
            mapBlocks_ = other.mapBlocks_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMapBlocksIsMutable();
            mapBlocks_.addAll(other.mapBlocks_);
          }
          
        }
        if (other.hasMapX()) {
          setMapX(other.getMapX());
        }
        if (other.hasMapY()) {
          setMapY(other.getMapY());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getMapBlocksCount(); i++) {
          if (!getMapBlocks(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BlockList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> mapBlocks_ =
        java.util.Collections.emptyList();
      private void ensureMapBlocksIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          mapBlocks_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock>(mapBlocks_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> getMapBlocksList() {
        return java.util.Collections.unmodifiableList(mapBlocks_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public int getMapBlocksCount() {
        return mapBlocks_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock getMapBlocks(int index) {
        return mapBlocks_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder setMapBlocks(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMapBlocksIsMutable();
        mapBlocks_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder setMapBlocks(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.Builder builderForValue) {
        ensureMapBlocksIsMutable();
        mapBlocks_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder addMapBlocks(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMapBlocksIsMutable();
        mapBlocks_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder addMapBlocks(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMapBlocksIsMutable();
        mapBlocks_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder addMapBlocks(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.Builder builderForValue) {
        ensureMapBlocksIsMutable();
        mapBlocks_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder addMapBlocks(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock.Builder builderForValue) {
        ensureMapBlocksIsMutable();
        mapBlocks_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder addAllMapBlocks(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapBlock> values) {
        ensureMapBlocksIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, mapBlocks_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder clearMapBlocks() {
        mapBlocks_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.MapBlock map_blocks = 1;</code>
       */
      public Builder removeMapBlocks(int index) {
        ensureMapBlocksIsMutable();
        mapBlocks_.remove(index);

        return this;
      }

      private int mapX_ ;
      /**
       * <code>optional int32 map_x = 2;</code>
       */
      public boolean hasMapX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 map_x = 2;</code>
       */
      public int getMapX() {
        return mapX_;
      }
      /**
       * <code>optional int32 map_x = 2;</code>
       */
      public Builder setMapX(int value) {
        bitField0_ |= 0x00000002;
        mapX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_x = 2;</code>
       */
      public Builder clearMapX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mapX_ = 0;
        
        return this;
      }

      private int mapY_ ;
      /**
       * <code>optional int32 map_y = 3;</code>
       */
      public boolean hasMapY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 map_y = 3;</code>
       */
      public int getMapY() {
        return mapY_;
      }
      /**
       * <code>optional int32 map_y = 3;</code>
       */
      public Builder setMapY(int value) {
        bitField0_ |= 0x00000004;
        mapY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_y = 3;</code>
       */
      public Builder clearMapY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mapY_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BlockList)
    }

    static {
      defaultInstance = new BlockList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BlockList)
  }

  public interface PlantDefOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.PlantDef)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 pos_x = 1;</code>
     */
    boolean hasPosX();
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    int getPosX();

    /**
     * <code>required int32 pos_y = 2;</code>
     */
    boolean hasPosY();
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    int getPosY();

    /**
     * <code>required int32 pos_z = 3;</code>
     */
    boolean hasPosZ();
    /**
     * <code>required int32 pos_z = 3;</code>
     */
    int getPosZ();

    /**
     * <code>required int32 index = 4;</code>
     */
    boolean hasIndex();
    /**
     * <code>required int32 index = 4;</code>
     */
    int getIndex();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantDef}
   */
  public static final class PlantDef extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.PlantDef)
      PlantDefOrBuilder {
    // Use PlantDef.newBuilder() to construct.
    private PlantDef(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlantDef(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final PlantDef defaultInstance;
    public static PlantDef getDefaultInstance() {
      return defaultInstance;
    }

    public PlantDef getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private PlantDef(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              posX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              posY_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              posZ_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              index_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PlantDef> PARSER =
        new com.google.protobuf.AbstractParser<PlantDef>() {
      public PlantDef parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlantDef(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlantDef> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int POS_X_FIELD_NUMBER = 1;
    private int posX_;
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    public boolean hasPosX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 pos_x = 1;</code>
     */
    public int getPosX() {
      return posX_;
    }

    public static final int POS_Y_FIELD_NUMBER = 2;
    private int posY_;
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    public boolean hasPosY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 pos_y = 2;</code>
     */
    public int getPosY() {
      return posY_;
    }

    public static final int POS_Z_FIELD_NUMBER = 3;
    private int posZ_;
    /**
     * <code>required int32 pos_z = 3;</code>
     */
    public boolean hasPosZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 pos_z = 3;</code>
     */
    public int getPosZ() {
      return posZ_;
    }

    public static final int INDEX_FIELD_NUMBER = 4;
    private int index_;
    /**
     * <code>required int32 index = 4;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 index = 4;</code>
     */
    public int getIndex() {
      return index_;
    }

    private void initFields() {
      posX_ = 0;
      posY_ = 0;
      posZ_ = 0;
      index_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPosX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosZ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, posX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, posY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, posZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, index_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, posX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, posY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, posZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, index_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantDef}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.PlantDef)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDefOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        posX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        posY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        posZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.posX_ = posX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.posY_ = posY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.posZ_ = posZ_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.getDefaultInstance()) return this;
        if (other.hasPosX()) {
          setPosX(other.getPosX());
        }
        if (other.hasPosY()) {
          setPosY(other.getPosY());
        }
        if (other.hasPosZ()) {
          setPosZ(other.getPosZ());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPosX()) {
          
          return false;
        }
        if (!hasPosY()) {
          
          return false;
        }
        if (!hasPosZ()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int posX_ ;
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public boolean hasPosX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public int getPosX() {
        return posX_;
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public Builder setPosX(int value) {
        bitField0_ |= 0x00000001;
        posX_ = value;
        
        return this;
      }
      /**
       * <code>required int32 pos_x = 1;</code>
       */
      public Builder clearPosX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        posX_ = 0;
        
        return this;
      }

      private int posY_ ;
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public boolean hasPosY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public int getPosY() {
        return posY_;
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public Builder setPosY(int value) {
        bitField0_ |= 0x00000002;
        posY_ = value;
        
        return this;
      }
      /**
       * <code>required int32 pos_y = 2;</code>
       */
      public Builder clearPosY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        posY_ = 0;
        
        return this;
      }

      private int posZ_ ;
      /**
       * <code>required int32 pos_z = 3;</code>
       */
      public boolean hasPosZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 pos_z = 3;</code>
       */
      public int getPosZ() {
        return posZ_;
      }
      /**
       * <code>required int32 pos_z = 3;</code>
       */
      public Builder setPosZ(int value) {
        bitField0_ |= 0x00000004;
        posZ_ = value;
        
        return this;
      }
      /**
       * <code>required int32 pos_z = 3;</code>
       */
      public Builder clearPosZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        posZ_ = 0;
        
        return this;
      }

      private int index_ ;
      /**
       * <code>required int32 index = 4;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 index = 4;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required int32 index = 4;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000008;
        index_ = value;
        
        return this;
      }
      /**
       * <code>required int32 index = 4;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        index_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.PlantDef)
    }

    static {
      defaultInstance = new PlantDef(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.PlantDef)
  }

  public interface PlantListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.PlantList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> 
        getPlantListList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef getPlantList(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    int getPlantListCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantList}
   */
  public static final class PlantList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.PlantList)
      PlantListOrBuilder {
    // Use PlantList.newBuilder() to construct.
    private PlantList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlantList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final PlantList defaultInstance;
    public static PlantList getDefaultInstance() {
      return defaultInstance;
    }

    public PlantList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private PlantList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                plantList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef>();
                mutable_bitField0_ |= 0x00000001;
              }
              plantList_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          plantList_ = java.util.Collections.unmodifiableList(plantList_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PlantList> PARSER =
        new com.google.protobuf.AbstractParser<PlantList>() {
      public PlantList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlantList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlantList> getParserForType() {
      return PARSER;
    }

    public static final int PLANT_LIST_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> plantList_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> getPlantListList() {
      return plantList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDefOrBuilder> 
        getPlantListOrBuilderList() {
      return plantList_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    public int getPlantListCount() {
      return plantList_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef getPlantList(int index) {
      return plantList_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDefOrBuilder getPlantListOrBuilder(
        int index) {
      return plantList_.get(index);
    }

    private void initFields() {
      plantList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPlantListCount(); i++) {
        if (!getPlantList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < plantList_.size(); i++) {
        output.writeMessage(1, plantList_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < plantList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, plantList_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.PlantList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        plantList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          plantList_ = java.util.Collections.unmodifiableList(plantList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.plantList_ = plantList_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList.getDefaultInstance()) return this;
        if (!other.plantList_.isEmpty()) {
          if (plantList_.isEmpty()) {
            plantList_ = other.plantList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePlantListIsMutable();
            plantList_.addAll(other.plantList_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPlantListCount(); i++) {
          if (!getPlantList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> plantList_ =
        java.util.Collections.emptyList();
      private void ensurePlantListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          plantList_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef>(plantList_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> getPlantListList() {
        return java.util.Collections.unmodifiableList(plantList_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public int getPlantListCount() {
        return plantList_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef getPlantList(int index) {
        return plantList_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder setPlantList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantListIsMutable();
        plantList_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder setPlantList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.Builder builderForValue) {
        ensurePlantListIsMutable();
        plantList_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder addPlantList(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantListIsMutable();
        plantList_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder addPlantList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantListIsMutable();
        plantList_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder addPlantList(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.Builder builderForValue) {
        ensurePlantListIsMutable();
        plantList_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder addPlantList(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef.Builder builderForValue) {
        ensurePlantListIsMutable();
        plantList_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder addAllPlantList(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantDef> values) {
        ensurePlantListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, plantList_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder clearPlantList() {
        plantList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantDef plant_list = 1;</code>
       */
      public Builder removePlantList(int index) {
        ensurePlantListIsMutable();
        plantList_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.PlantList)
    }

    static {
      defaultInstance = new PlantList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.PlantList)
  }

  public interface ViewInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ViewInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 view_pos_x = 1;</code>
     */
    boolean hasViewPosX();
    /**
     * <code>optional int32 view_pos_x = 1;</code>
     */
    int getViewPosX();

    /**
     * <code>optional int32 view_pos_y = 2;</code>
     */
    boolean hasViewPosY();
    /**
     * <code>optional int32 view_pos_y = 2;</code>
     */
    int getViewPosY();

    /**
     * <code>optional int32 view_pos_z = 3;</code>
     */
    boolean hasViewPosZ();
    /**
     * <code>optional int32 view_pos_z = 3;</code>
     */
    int getViewPosZ();

    /**
     * <code>optional int32 view_size_x = 4;</code>
     */
    boolean hasViewSizeX();
    /**
     * <code>optional int32 view_size_x = 4;</code>
     */
    int getViewSizeX();

    /**
     * <code>optional int32 view_size_y = 5;</code>
     */
    boolean hasViewSizeY();
    /**
     * <code>optional int32 view_size_y = 5;</code>
     */
    int getViewSizeY();

    /**
     * <code>optional int32 cursor_pos_x = 6;</code>
     */
    boolean hasCursorPosX();
    /**
     * <code>optional int32 cursor_pos_x = 6;</code>
     */
    int getCursorPosX();

    /**
     * <code>optional int32 cursor_pos_y = 7;</code>
     */
    boolean hasCursorPosY();
    /**
     * <code>optional int32 cursor_pos_y = 7;</code>
     */
    int getCursorPosY();

    /**
     * <code>optional int32 cursor_pos_z = 8;</code>
     */
    boolean hasCursorPosZ();
    /**
     * <code>optional int32 cursor_pos_z = 8;</code>
     */
    int getCursorPosZ();

    /**
     * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
     */
    boolean hasFollowUnitId();
    /**
     * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
     */
    int getFollowUnitId();

    /**
     * <code>optional int32 follow_item_id = 10 [default = -1];</code>
     */
    boolean hasFollowItemId();
    /**
     * <code>optional int32 follow_item_id = 10 [default = -1];</code>
     */
    int getFollowItemId();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ViewInfo}
   */
  public static final class ViewInfo extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ViewInfo)
      ViewInfoOrBuilder {
    // Use ViewInfo.newBuilder() to construct.
    private ViewInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ViewInfo(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ViewInfo defaultInstance;
    public static ViewInfo getDefaultInstance() {
      return defaultInstance;
    }

    public ViewInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ViewInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              viewPosX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              viewPosY_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              viewPosZ_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              viewSizeX_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              viewSizeY_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              cursorPosX_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              cursorPosY_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              cursorPosZ_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              followUnitId_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              followItemId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ViewInfo> PARSER =
        new com.google.protobuf.AbstractParser<ViewInfo>() {
      public ViewInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ViewInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ViewInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VIEW_POS_X_FIELD_NUMBER = 1;
    private int viewPosX_;
    /**
     * <code>optional int32 view_pos_x = 1;</code>
     */
    public boolean hasViewPosX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 view_pos_x = 1;</code>
     */
    public int getViewPosX() {
      return viewPosX_;
    }

    public static final int VIEW_POS_Y_FIELD_NUMBER = 2;
    private int viewPosY_;
    /**
     * <code>optional int32 view_pos_y = 2;</code>
     */
    public boolean hasViewPosY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 view_pos_y = 2;</code>
     */
    public int getViewPosY() {
      return viewPosY_;
    }

    public static final int VIEW_POS_Z_FIELD_NUMBER = 3;
    private int viewPosZ_;
    /**
     * <code>optional int32 view_pos_z = 3;</code>
     */
    public boolean hasViewPosZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 view_pos_z = 3;</code>
     */
    public int getViewPosZ() {
      return viewPosZ_;
    }

    public static final int VIEW_SIZE_X_FIELD_NUMBER = 4;
    private int viewSizeX_;
    /**
     * <code>optional int32 view_size_x = 4;</code>
     */
    public boolean hasViewSizeX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 view_size_x = 4;</code>
     */
    public int getViewSizeX() {
      return viewSizeX_;
    }

    public static final int VIEW_SIZE_Y_FIELD_NUMBER = 5;
    private int viewSizeY_;
    /**
     * <code>optional int32 view_size_y = 5;</code>
     */
    public boolean hasViewSizeY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 view_size_y = 5;</code>
     */
    public int getViewSizeY() {
      return viewSizeY_;
    }

    public static final int CURSOR_POS_X_FIELD_NUMBER = 6;
    private int cursorPosX_;
    /**
     * <code>optional int32 cursor_pos_x = 6;</code>
     */
    public boolean hasCursorPosX() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 cursor_pos_x = 6;</code>
     */
    public int getCursorPosX() {
      return cursorPosX_;
    }

    public static final int CURSOR_POS_Y_FIELD_NUMBER = 7;
    private int cursorPosY_;
    /**
     * <code>optional int32 cursor_pos_y = 7;</code>
     */
    public boolean hasCursorPosY() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 cursor_pos_y = 7;</code>
     */
    public int getCursorPosY() {
      return cursorPosY_;
    }

    public static final int CURSOR_POS_Z_FIELD_NUMBER = 8;
    private int cursorPosZ_;
    /**
     * <code>optional int32 cursor_pos_z = 8;</code>
     */
    public boolean hasCursorPosZ() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 cursor_pos_z = 8;</code>
     */
    public int getCursorPosZ() {
      return cursorPosZ_;
    }

    public static final int FOLLOW_UNIT_ID_FIELD_NUMBER = 9;
    private int followUnitId_;
    /**
     * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
     */
    public boolean hasFollowUnitId() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
     */
    public int getFollowUnitId() {
      return followUnitId_;
    }

    public static final int FOLLOW_ITEM_ID_FIELD_NUMBER = 10;
    private int followItemId_;
    /**
     * <code>optional int32 follow_item_id = 10 [default = -1];</code>
     */
    public boolean hasFollowItemId() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 follow_item_id = 10 [default = -1];</code>
     */
    public int getFollowItemId() {
      return followItemId_;
    }

    private void initFields() {
      viewPosX_ = 0;
      viewPosY_ = 0;
      viewPosZ_ = 0;
      viewSizeX_ = 0;
      viewSizeY_ = 0;
      cursorPosX_ = 0;
      cursorPosY_ = 0;
      cursorPosZ_ = 0;
      followUnitId_ = -1;
      followItemId_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, viewPosX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, viewPosY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, viewPosZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, viewSizeX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, viewSizeY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, cursorPosX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, cursorPosY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, cursorPosZ_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, followUnitId_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, followItemId_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, viewPosX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, viewPosY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, viewPosZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, viewSizeX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, viewSizeY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, cursorPosX_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, cursorPosY_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, cursorPosZ_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, followUnitId_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, followItemId_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ViewInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ViewInfo)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfoOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        viewPosX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        viewPosY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        viewPosZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        viewSizeX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        viewSizeY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        cursorPosX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        cursorPosY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        cursorPosZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        followUnitId_ = -1;
        bitField0_ = (bitField0_ & ~0x00000100);
        followItemId_ = -1;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.viewPosX_ = viewPosX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.viewPosY_ = viewPosY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.viewPosZ_ = viewPosZ_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.viewSizeX_ = viewSizeX_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.viewSizeY_ = viewSizeY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.cursorPosX_ = cursorPosX_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.cursorPosY_ = cursorPosY_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cursorPosZ_ = cursorPosZ_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.followUnitId_ = followUnitId_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.followItemId_ = followItemId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo.getDefaultInstance()) return this;
        if (other.hasViewPosX()) {
          setViewPosX(other.getViewPosX());
        }
        if (other.hasViewPosY()) {
          setViewPosY(other.getViewPosY());
        }
        if (other.hasViewPosZ()) {
          setViewPosZ(other.getViewPosZ());
        }
        if (other.hasViewSizeX()) {
          setViewSizeX(other.getViewSizeX());
        }
        if (other.hasViewSizeY()) {
          setViewSizeY(other.getViewSizeY());
        }
        if (other.hasCursorPosX()) {
          setCursorPosX(other.getCursorPosX());
        }
        if (other.hasCursorPosY()) {
          setCursorPosY(other.getCursorPosY());
        }
        if (other.hasCursorPosZ()) {
          setCursorPosZ(other.getCursorPosZ());
        }
        if (other.hasFollowUnitId()) {
          setFollowUnitId(other.getFollowUnitId());
        }
        if (other.hasFollowItemId()) {
          setFollowItemId(other.getFollowItemId());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ViewInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int viewPosX_ ;
      /**
       * <code>optional int32 view_pos_x = 1;</code>
       */
      public boolean hasViewPosX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 view_pos_x = 1;</code>
       */
      public int getViewPosX() {
        return viewPosX_;
      }
      /**
       * <code>optional int32 view_pos_x = 1;</code>
       */
      public Builder setViewPosX(int value) {
        bitField0_ |= 0x00000001;
        viewPosX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 view_pos_x = 1;</code>
       */
      public Builder clearViewPosX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        viewPosX_ = 0;
        
        return this;
      }

      private int viewPosY_ ;
      /**
       * <code>optional int32 view_pos_y = 2;</code>
       */
      public boolean hasViewPosY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 view_pos_y = 2;</code>
       */
      public int getViewPosY() {
        return viewPosY_;
      }
      /**
       * <code>optional int32 view_pos_y = 2;</code>
       */
      public Builder setViewPosY(int value) {
        bitField0_ |= 0x00000002;
        viewPosY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 view_pos_y = 2;</code>
       */
      public Builder clearViewPosY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        viewPosY_ = 0;
        
        return this;
      }

      private int viewPosZ_ ;
      /**
       * <code>optional int32 view_pos_z = 3;</code>
       */
      public boolean hasViewPosZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 view_pos_z = 3;</code>
       */
      public int getViewPosZ() {
        return viewPosZ_;
      }
      /**
       * <code>optional int32 view_pos_z = 3;</code>
       */
      public Builder setViewPosZ(int value) {
        bitField0_ |= 0x00000004;
        viewPosZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 view_pos_z = 3;</code>
       */
      public Builder clearViewPosZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        viewPosZ_ = 0;
        
        return this;
      }

      private int viewSizeX_ ;
      /**
       * <code>optional int32 view_size_x = 4;</code>
       */
      public boolean hasViewSizeX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 view_size_x = 4;</code>
       */
      public int getViewSizeX() {
        return viewSizeX_;
      }
      /**
       * <code>optional int32 view_size_x = 4;</code>
       */
      public Builder setViewSizeX(int value) {
        bitField0_ |= 0x00000008;
        viewSizeX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 view_size_x = 4;</code>
       */
      public Builder clearViewSizeX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        viewSizeX_ = 0;
        
        return this;
      }

      private int viewSizeY_ ;
      /**
       * <code>optional int32 view_size_y = 5;</code>
       */
      public boolean hasViewSizeY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 view_size_y = 5;</code>
       */
      public int getViewSizeY() {
        return viewSizeY_;
      }
      /**
       * <code>optional int32 view_size_y = 5;</code>
       */
      public Builder setViewSizeY(int value) {
        bitField0_ |= 0x00000010;
        viewSizeY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 view_size_y = 5;</code>
       */
      public Builder clearViewSizeY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        viewSizeY_ = 0;
        
        return this;
      }

      private int cursorPosX_ ;
      /**
       * <code>optional int32 cursor_pos_x = 6;</code>
       */
      public boolean hasCursorPosX() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 cursor_pos_x = 6;</code>
       */
      public int getCursorPosX() {
        return cursorPosX_;
      }
      /**
       * <code>optional int32 cursor_pos_x = 6;</code>
       */
      public Builder setCursorPosX(int value) {
        bitField0_ |= 0x00000020;
        cursorPosX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 cursor_pos_x = 6;</code>
       */
      public Builder clearCursorPosX() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cursorPosX_ = 0;
        
        return this;
      }

      private int cursorPosY_ ;
      /**
       * <code>optional int32 cursor_pos_y = 7;</code>
       */
      public boolean hasCursorPosY() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 cursor_pos_y = 7;</code>
       */
      public int getCursorPosY() {
        return cursorPosY_;
      }
      /**
       * <code>optional int32 cursor_pos_y = 7;</code>
       */
      public Builder setCursorPosY(int value) {
        bitField0_ |= 0x00000040;
        cursorPosY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 cursor_pos_y = 7;</code>
       */
      public Builder clearCursorPosY() {
        bitField0_ = (bitField0_ & ~0x00000040);
        cursorPosY_ = 0;
        
        return this;
      }

      private int cursorPosZ_ ;
      /**
       * <code>optional int32 cursor_pos_z = 8;</code>
       */
      public boolean hasCursorPosZ() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 cursor_pos_z = 8;</code>
       */
      public int getCursorPosZ() {
        return cursorPosZ_;
      }
      /**
       * <code>optional int32 cursor_pos_z = 8;</code>
       */
      public Builder setCursorPosZ(int value) {
        bitField0_ |= 0x00000080;
        cursorPosZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 cursor_pos_z = 8;</code>
       */
      public Builder clearCursorPosZ() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cursorPosZ_ = 0;
        
        return this;
      }

      private int followUnitId_ = -1;
      /**
       * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
       */
      public boolean hasFollowUnitId() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
       */
      public int getFollowUnitId() {
        return followUnitId_;
      }
      /**
       * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
       */
      public Builder setFollowUnitId(int value) {
        bitField0_ |= 0x00000100;
        followUnitId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 follow_unit_id = 9 [default = -1];</code>
       */
      public Builder clearFollowUnitId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        followUnitId_ = -1;
        
        return this;
      }

      private int followItemId_ = -1;
      /**
       * <code>optional int32 follow_item_id = 10 [default = -1];</code>
       */
      public boolean hasFollowItemId() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 follow_item_id = 10 [default = -1];</code>
       */
      public int getFollowItemId() {
        return followItemId_;
      }
      /**
       * <code>optional int32 follow_item_id = 10 [default = -1];</code>
       */
      public Builder setFollowItemId(int value) {
        bitField0_ |= 0x00000200;
        followItemId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 follow_item_id = 10 [default = -1];</code>
       */
      public Builder clearFollowItemId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        followItemId_ = -1;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ViewInfo)
    }

    static {
      defaultInstance = new ViewInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ViewInfo)
  }

  public interface MapInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.MapInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 block_size_x = 1;</code>
     */
    boolean hasBlockSizeX();
    /**
     * <code>optional int32 block_size_x = 1;</code>
     */
    int getBlockSizeX();

    /**
     * <code>optional int32 block_size_y = 2;</code>
     */
    boolean hasBlockSizeY();
    /**
     * <code>optional int32 block_size_y = 2;</code>
     */
    int getBlockSizeY();

    /**
     * <code>optional int32 block_size_z = 3;</code>
     */
    boolean hasBlockSizeZ();
    /**
     * <code>optional int32 block_size_z = 3;</code>
     */
    int getBlockSizeZ();

    /**
     * <code>optional int32 block_pos_x = 4;</code>
     */
    boolean hasBlockPosX();
    /**
     * <code>optional int32 block_pos_x = 4;</code>
     */
    int getBlockPosX();

    /**
     * <code>optional int32 block_pos_y = 5;</code>
     */
    boolean hasBlockPosY();
    /**
     * <code>optional int32 block_pos_y = 5;</code>
     */
    int getBlockPosY();

    /**
     * <code>optional int32 block_pos_z = 6;</code>
     */
    boolean hasBlockPosZ();
    /**
     * <code>optional int32 block_pos_z = 6;</code>
     */
    int getBlockPosZ();

    /**
     * <code>optional string world_name = 7;</code>
     */
    boolean hasWorldName();
    /**
     * <code>optional string world_name = 7;</code>
     */
    java.lang.String getWorldName();
    /**
     * <code>optional string world_name = 7;</code>
     */
    com.google.protobuf.ByteString
        getWorldNameBytes();

    /**
     * <code>optional string world_name_english = 8;</code>
     */
    boolean hasWorldNameEnglish();
    /**
     * <code>optional string world_name_english = 8;</code>
     */
    java.lang.String getWorldNameEnglish();
    /**
     * <code>optional string world_name_english = 8;</code>
     */
    com.google.protobuf.ByteString
        getWorldNameEnglishBytes();

    /**
     * <code>optional string save_name = 9;</code>
     */
    boolean hasSaveName();
    /**
     * <code>optional string save_name = 9;</code>
     */
    java.lang.String getSaveName();
    /**
     * <code>optional string save_name = 9;</code>
     */
    com.google.protobuf.ByteString
        getSaveNameBytes();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MapInfo}
   */
  public static final class MapInfo extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.MapInfo)
      MapInfoOrBuilder {
    // Use MapInfo.newBuilder() to construct.
    private MapInfo(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MapInfo(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final MapInfo defaultInstance;
    public static MapInfo getDefaultInstance() {
      return defaultInstance;
    }

    public MapInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private MapInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              blockSizeX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              blockSizeY_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              blockSizeZ_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              blockPosX_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              blockPosY_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              blockPosZ_ = input.readInt32();
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              worldName_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              worldNameEnglish_ = bs;
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              saveName_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<MapInfo> PARSER =
        new com.google.protobuf.AbstractParser<MapInfo>() {
      public MapInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MapInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MapInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BLOCK_SIZE_X_FIELD_NUMBER = 1;
    private int blockSizeX_;
    /**
     * <code>optional int32 block_size_x = 1;</code>
     */
    public boolean hasBlockSizeX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 block_size_x = 1;</code>
     */
    public int getBlockSizeX() {
      return blockSizeX_;
    }

    public static final int BLOCK_SIZE_Y_FIELD_NUMBER = 2;
    private int blockSizeY_;
    /**
     * <code>optional int32 block_size_y = 2;</code>
     */
    public boolean hasBlockSizeY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 block_size_y = 2;</code>
     */
    public int getBlockSizeY() {
      return blockSizeY_;
    }

    public static final int BLOCK_SIZE_Z_FIELD_NUMBER = 3;
    private int blockSizeZ_;
    /**
     * <code>optional int32 block_size_z = 3;</code>
     */
    public boolean hasBlockSizeZ() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 block_size_z = 3;</code>
     */
    public int getBlockSizeZ() {
      return blockSizeZ_;
    }

    public static final int BLOCK_POS_X_FIELD_NUMBER = 4;
    private int blockPosX_;
    /**
     * <code>optional int32 block_pos_x = 4;</code>
     */
    public boolean hasBlockPosX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 block_pos_x = 4;</code>
     */
    public int getBlockPosX() {
      return blockPosX_;
    }

    public static final int BLOCK_POS_Y_FIELD_NUMBER = 5;
    private int blockPosY_;
    /**
     * <code>optional int32 block_pos_y = 5;</code>
     */
    public boolean hasBlockPosY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 block_pos_y = 5;</code>
     */
    public int getBlockPosY() {
      return blockPosY_;
    }

    public static final int BLOCK_POS_Z_FIELD_NUMBER = 6;
    private int blockPosZ_;
    /**
     * <code>optional int32 block_pos_z = 6;</code>
     */
    public boolean hasBlockPosZ() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 block_pos_z = 6;</code>
     */
    public int getBlockPosZ() {
      return blockPosZ_;
    }

    public static final int WORLD_NAME_FIELD_NUMBER = 7;
    private java.lang.Object worldName_;
    /**
     * <code>optional string world_name = 7;</code>
     */
    public boolean hasWorldName() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string world_name = 7;</code>
     */
    public java.lang.String getWorldName() {
      java.lang.Object ref = worldName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          worldName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string world_name = 7;</code>
     */
    public com.google.protobuf.ByteString
        getWorldNameBytes() {
      java.lang.Object ref = worldName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        worldName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WORLD_NAME_ENGLISH_FIELD_NUMBER = 8;
    private java.lang.Object worldNameEnglish_;
    /**
     * <code>optional string world_name_english = 8;</code>
     */
    public boolean hasWorldNameEnglish() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string world_name_english = 8;</code>
     */
    public java.lang.String getWorldNameEnglish() {
      java.lang.Object ref = worldNameEnglish_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          worldNameEnglish_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string world_name_english = 8;</code>
     */
    public com.google.protobuf.ByteString
        getWorldNameEnglishBytes() {
      java.lang.Object ref = worldNameEnglish_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        worldNameEnglish_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SAVE_NAME_FIELD_NUMBER = 9;
    private java.lang.Object saveName_;
    /**
     * <code>optional string save_name = 9;</code>
     */
    public boolean hasSaveName() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string save_name = 9;</code>
     */
    public java.lang.String getSaveName() {
      java.lang.Object ref = saveName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          saveName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string save_name = 9;</code>
     */
    public com.google.protobuf.ByteString
        getSaveNameBytes() {
      java.lang.Object ref = saveName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        saveName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      blockSizeX_ = 0;
      blockSizeY_ = 0;
      blockSizeZ_ = 0;
      blockPosX_ = 0;
      blockPosY_ = 0;
      blockPosZ_ = 0;
      worldName_ = "";
      worldNameEnglish_ = "";
      saveName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, blockSizeX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, blockSizeY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, blockSizeZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, blockPosX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, blockPosY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, blockPosZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getWorldNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getWorldNameEnglishBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, getSaveNameBytes());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, blockSizeX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, blockSizeY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, blockSizeZ_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, blockPosX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, blockPosY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, blockPosZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getWorldNameBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getWorldNameEnglishBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getSaveNameBytes());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.MapInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.MapInfo)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfoOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        blockSizeX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        blockSizeY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        blockSizeZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        blockPosX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        blockPosY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        blockPosZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        worldName_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        worldNameEnglish_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        saveName_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.blockSizeX_ = blockSizeX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.blockSizeY_ = blockSizeY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.blockSizeZ_ = blockSizeZ_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.blockPosX_ = blockPosX_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.blockPosY_ = blockPosY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.blockPosZ_ = blockPosZ_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.worldName_ = worldName_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.worldNameEnglish_ = worldNameEnglish_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.saveName_ = saveName_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo.getDefaultInstance()) return this;
        if (other.hasBlockSizeX()) {
          setBlockSizeX(other.getBlockSizeX());
        }
        if (other.hasBlockSizeY()) {
          setBlockSizeY(other.getBlockSizeY());
        }
        if (other.hasBlockSizeZ()) {
          setBlockSizeZ(other.getBlockSizeZ());
        }
        if (other.hasBlockPosX()) {
          setBlockPosX(other.getBlockPosX());
        }
        if (other.hasBlockPosY()) {
          setBlockPosY(other.getBlockPosY());
        }
        if (other.hasBlockPosZ()) {
          setBlockPosZ(other.getBlockPosZ());
        }
        if (other.hasWorldName()) {
          bitField0_ |= 0x00000040;
          worldName_ = other.worldName_;
          
        }
        if (other.hasWorldNameEnglish()) {
          bitField0_ |= 0x00000080;
          worldNameEnglish_ = other.worldNameEnglish_;
          
        }
        if (other.hasSaveName()) {
          bitField0_ |= 0x00000100;
          saveName_ = other.saveName_;
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MapInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int blockSizeX_ ;
      /**
       * <code>optional int32 block_size_x = 1;</code>
       */
      public boolean hasBlockSizeX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 block_size_x = 1;</code>
       */
      public int getBlockSizeX() {
        return blockSizeX_;
      }
      /**
       * <code>optional int32 block_size_x = 1;</code>
       */
      public Builder setBlockSizeX(int value) {
        bitField0_ |= 0x00000001;
        blockSizeX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_size_x = 1;</code>
       */
      public Builder clearBlockSizeX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        blockSizeX_ = 0;
        
        return this;
      }

      private int blockSizeY_ ;
      /**
       * <code>optional int32 block_size_y = 2;</code>
       */
      public boolean hasBlockSizeY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 block_size_y = 2;</code>
       */
      public int getBlockSizeY() {
        return blockSizeY_;
      }
      /**
       * <code>optional int32 block_size_y = 2;</code>
       */
      public Builder setBlockSizeY(int value) {
        bitField0_ |= 0x00000002;
        blockSizeY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_size_y = 2;</code>
       */
      public Builder clearBlockSizeY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        blockSizeY_ = 0;
        
        return this;
      }

      private int blockSizeZ_ ;
      /**
       * <code>optional int32 block_size_z = 3;</code>
       */
      public boolean hasBlockSizeZ() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 block_size_z = 3;</code>
       */
      public int getBlockSizeZ() {
        return blockSizeZ_;
      }
      /**
       * <code>optional int32 block_size_z = 3;</code>
       */
      public Builder setBlockSizeZ(int value) {
        bitField0_ |= 0x00000004;
        blockSizeZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_size_z = 3;</code>
       */
      public Builder clearBlockSizeZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        blockSizeZ_ = 0;
        
        return this;
      }

      private int blockPosX_ ;
      /**
       * <code>optional int32 block_pos_x = 4;</code>
       */
      public boolean hasBlockPosX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 block_pos_x = 4;</code>
       */
      public int getBlockPosX() {
        return blockPosX_;
      }
      /**
       * <code>optional int32 block_pos_x = 4;</code>
       */
      public Builder setBlockPosX(int value) {
        bitField0_ |= 0x00000008;
        blockPosX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_pos_x = 4;</code>
       */
      public Builder clearBlockPosX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        blockPosX_ = 0;
        
        return this;
      }

      private int blockPosY_ ;
      /**
       * <code>optional int32 block_pos_y = 5;</code>
       */
      public boolean hasBlockPosY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 block_pos_y = 5;</code>
       */
      public int getBlockPosY() {
        return blockPosY_;
      }
      /**
       * <code>optional int32 block_pos_y = 5;</code>
       */
      public Builder setBlockPosY(int value) {
        bitField0_ |= 0x00000010;
        blockPosY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_pos_y = 5;</code>
       */
      public Builder clearBlockPosY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        blockPosY_ = 0;
        
        return this;
      }

      private int blockPosZ_ ;
      /**
       * <code>optional int32 block_pos_z = 6;</code>
       */
      public boolean hasBlockPosZ() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 block_pos_z = 6;</code>
       */
      public int getBlockPosZ() {
        return blockPosZ_;
      }
      /**
       * <code>optional int32 block_pos_z = 6;</code>
       */
      public Builder setBlockPosZ(int value) {
        bitField0_ |= 0x00000020;
        blockPosZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 block_pos_z = 6;</code>
       */
      public Builder clearBlockPosZ() {
        bitField0_ = (bitField0_ & ~0x00000020);
        blockPosZ_ = 0;
        
        return this;
      }

      private java.lang.Object worldName_ = "";
      /**
       * <code>optional string world_name = 7;</code>
       */
      public boolean hasWorldName() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string world_name = 7;</code>
       */
      public java.lang.String getWorldName() {
        java.lang.Object ref = worldName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            worldName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string world_name = 7;</code>
       */
      public com.google.protobuf.ByteString
          getWorldNameBytes() {
        java.lang.Object ref = worldName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          worldName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string world_name = 7;</code>
       */
      public Builder setWorldName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        worldName_ = value;
        
        return this;
      }
      /**
       * <code>optional string world_name = 7;</code>
       */
      public Builder clearWorldName() {
        bitField0_ = (bitField0_ & ~0x00000040);
        worldName_ = getDefaultInstance().getWorldName();
        
        return this;
      }
      /**
       * <code>optional string world_name = 7;</code>
       */
      public Builder setWorldNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        worldName_ = value;
        
        return this;
      }

      private java.lang.Object worldNameEnglish_ = "";
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public boolean hasWorldNameEnglish() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public java.lang.String getWorldNameEnglish() {
        java.lang.Object ref = worldNameEnglish_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            worldNameEnglish_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public com.google.protobuf.ByteString
          getWorldNameEnglishBytes() {
        java.lang.Object ref = worldNameEnglish_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          worldNameEnglish_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public Builder setWorldNameEnglish(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        worldNameEnglish_ = value;
        
        return this;
      }
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public Builder clearWorldNameEnglish() {
        bitField0_ = (bitField0_ & ~0x00000080);
        worldNameEnglish_ = getDefaultInstance().getWorldNameEnglish();
        
        return this;
      }
      /**
       * <code>optional string world_name_english = 8;</code>
       */
      public Builder setWorldNameEnglishBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        worldNameEnglish_ = value;
        
        return this;
      }

      private java.lang.Object saveName_ = "";
      /**
       * <code>optional string save_name = 9;</code>
       */
      public boolean hasSaveName() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string save_name = 9;</code>
       */
      public java.lang.String getSaveName() {
        java.lang.Object ref = saveName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            saveName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string save_name = 9;</code>
       */
      public com.google.protobuf.ByteString
          getSaveNameBytes() {
        java.lang.Object ref = saveName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          saveName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string save_name = 9;</code>
       */
      public Builder setSaveName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        saveName_ = value;
        
        return this;
      }
      /**
       * <code>optional string save_name = 9;</code>
       */
      public Builder clearSaveName() {
        bitField0_ = (bitField0_ & ~0x00000100);
        saveName_ = getDefaultInstance().getSaveName();
        
        return this;
      }
      /**
       * <code>optional string save_name = 9;</code>
       */
      public Builder setSaveNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        saveName_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.MapInfo)
    }

    static {
      defaultInstance = new MapInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.MapInfo)
  }

  public interface CloudOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.Cloud)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
     */
    boolean hasFront();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType getFront();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
     */
    boolean hasCumulus();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType getCumulus();

    /**
     * <code>optional bool cirrus = 3;</code>
     */
    boolean hasCirrus();
    /**
     * <code>optional bool cirrus = 3;</code>
     */
    boolean getCirrus();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
     */
    boolean hasStratus();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType getStratus();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
     */
    boolean hasFog();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType getFog();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Cloud}
   */
  public static final class Cloud extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.Cloud)
      CloudOrBuilder {
    // Use Cloud.newBuilder() to construct.
    private Cloud(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Cloud(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final Cloud defaultInstance;
    public static Cloud getDefaultInstance() {
      return defaultInstance;
    }

    public Cloud getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private Cloud(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000001;
                front_ = value;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000002;
                cumulus_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cirrus_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000008;
                stratus_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000010;
                fog_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Cloud> PARSER =
        new com.google.protobuf.AbstractParser<Cloud>() {
      public Cloud parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Cloud(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Cloud> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FRONT_FIELD_NUMBER = 1;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType front_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
     */
    public boolean hasFront() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType getFront() {
      return front_;
    }

    public static final int CUMULUS_FIELD_NUMBER = 2;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType cumulus_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
     */
    public boolean hasCumulus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType getCumulus() {
      return cumulus_;
    }

    public static final int CIRRUS_FIELD_NUMBER = 3;
    private boolean cirrus_;
    /**
     * <code>optional bool cirrus = 3;</code>
     */
    public boolean hasCirrus() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool cirrus = 3;</code>
     */
    public boolean getCirrus() {
      return cirrus_;
    }

    public static final int STRATUS_FIELD_NUMBER = 4;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType stratus_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
     */
    public boolean hasStratus() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType getStratus() {
      return stratus_;
    }

    public static final int FOG_FIELD_NUMBER = 5;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType fog_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
     */
    public boolean hasFog() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType getFog() {
      return fog_;
    }

    private void initFields() {
      front_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType.FRONT_NONE;
      cumulus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType.CUMULUS_NONE;
      cirrus_ = false;
      stratus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType.STRATUS_NONE;
      fog_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType.FOG_NONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, front_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, cumulus_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, cirrus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, stratus_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, fog_.getNumber());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, front_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, cumulus_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, cirrus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, stratus_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, fog_.getNumber());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Cloud}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.Cloud)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CloudOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        front_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType.FRONT_NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        cumulus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType.CUMULUS_NONE;
        bitField0_ = (bitField0_ & ~0x00000002);
        cirrus_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        stratus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType.STRATUS_NONE;
        bitField0_ = (bitField0_ & ~0x00000008);
        fog_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType.FOG_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.front_ = front_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cumulus_ = cumulus_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cirrus_ = cirrus_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stratus_ = stratus_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.fog_ = fog_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.getDefaultInstance()) return this;
        if (other.hasFront()) {
          setFront(other.getFront());
        }
        if (other.hasCumulus()) {
          setCumulus(other.getCumulus());
        }
        if (other.hasCirrus()) {
          setCirrus(other.getCirrus());
        }
        if (other.hasStratus()) {
          setStratus(other.getStratus());
        }
        if (other.hasFog()) {
          setFog(other.getFog());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType front_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType.FRONT_NONE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
       */
      public boolean hasFront() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType getFront() {
        return front_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
       */
      public Builder setFront(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        front_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FrontType front = 1;</code>
       */
      public Builder clearFront() {
        bitField0_ = (bitField0_ & ~0x00000001);
        front_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FrontType.FRONT_NONE;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType cumulus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType.CUMULUS_NONE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
       */
      public boolean hasCumulus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType getCumulus() {
        return cumulus_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
       */
      public Builder setCumulus(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        cumulus_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.CumulusType cumulus = 2;</code>
       */
      public Builder clearCumulus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cumulus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CumulusType.CUMULUS_NONE;
        
        return this;
      }

      private boolean cirrus_ ;
      /**
       * <code>optional bool cirrus = 3;</code>
       */
      public boolean hasCirrus() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool cirrus = 3;</code>
       */
      public boolean getCirrus() {
        return cirrus_;
      }
      /**
       * <code>optional bool cirrus = 3;</code>
       */
      public Builder setCirrus(boolean value) {
        bitField0_ |= 0x00000004;
        cirrus_ = value;
        
        return this;
      }
      /**
       * <code>optional bool cirrus = 3;</code>
       */
      public Builder clearCirrus() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cirrus_ = false;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType stratus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType.STRATUS_NONE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
       */
      public boolean hasStratus() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType getStratus() {
        return stratus_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
       */
      public Builder setStratus(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        stratus_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.StratusType stratus = 4;</code>
       */
      public Builder clearStratus() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stratus_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.StratusType.STRATUS_NONE;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType fog_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType.FOG_NONE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
       */
      public boolean hasFog() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType getFog() {
        return fog_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
       */
      public Builder setFog(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        fog_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.FogType fog = 5;</code>
       */
      public Builder clearFog() {
        bitField0_ = (bitField0_ & ~0x00000010);
        fog_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.FogType.FOG_NONE;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.Cloud)
    }

    static {
      defaultInstance = new Cloud(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.Cloud)
  }

  public interface WorldMapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.WorldMap)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 world_width = 1;</code>
     */
    boolean hasWorldWidth();
    /**
     * <code>required int32 world_width = 1;</code>
     */
    int getWorldWidth();

    /**
     * <code>required int32 world_height = 2;</code>
     */
    boolean hasWorldHeight();
    /**
     * <code>required int32 world_height = 2;</code>
     */
    int getWorldHeight();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string name_english = 4;</code>
     */
    boolean hasNameEnglish();
    /**
     * <code>optional string name_english = 4;</code>
     */
    java.lang.String getNameEnglish();
    /**
     * <code>optional string name_english = 4;</code>
     */
    com.google.protobuf.ByteString
        getNameEnglishBytes();

    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    java.util.List<java.lang.Integer> getElevationList();
    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    int getElevationCount();
    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    int getElevation(int index);

    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    java.util.List<java.lang.Integer> getRainfallList();
    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    int getRainfallCount();
    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    int getRainfall(int index);

    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    java.util.List<java.lang.Integer> getVegetationList();
    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    int getVegetationCount();
    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    int getVegetation(int index);

    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    java.util.List<java.lang.Integer> getTemperatureList();
    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    int getTemperatureCount();
    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    int getTemperature(int index);

    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    java.util.List<java.lang.Integer> getEvilnessList();
    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    int getEvilnessCount();
    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    int getEvilness(int index);

    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    java.util.List<java.lang.Integer> getDrainageList();
    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    int getDrainageCount();
    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    int getDrainage(int index);

    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    java.util.List<java.lang.Integer> getVolcanismList();
    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    int getVolcanismCount();
    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    int getVolcanism(int index);

    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    java.util.List<java.lang.Integer> getSavageryList();
    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    int getSavageryCount();
    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    int getSavagery(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> 
        getCloudsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud getClouds(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    int getCloudsCount();

    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    java.util.List<java.lang.Integer> getSalinityList();
    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    int getSalinityCount();
    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    int getSalinity(int index);

    /**
     * <code>optional int32 map_x = 15;</code>
     */
    boolean hasMapX();
    /**
     * <code>optional int32 map_x = 15;</code>
     */
    int getMapX();

    /**
     * <code>optional int32 map_y = 16;</code>
     */
    boolean hasMapY();
    /**
     * <code>optional int32 map_y = 16;</code>
     */
    int getMapY();

    /**
     * <code>optional int32 center_x = 17;</code>
     */
    boolean hasCenterX();
    /**
     * <code>optional int32 center_x = 17;</code>
     */
    int getCenterX();

    /**
     * <code>optional int32 center_y = 18;</code>
     */
    boolean hasCenterY();
    /**
     * <code>optional int32 center_y = 18;</code>
     */
    int getCenterY();

    /**
     * <code>optional int32 center_z = 19;</code>
     */
    boolean hasCenterZ();
    /**
     * <code>optional int32 center_z = 19;</code>
     */
    int getCenterZ();

    /**
     * <code>optional int32 cur_year = 20;</code>
     */
    boolean hasCurYear();
    /**
     * <code>optional int32 cur_year = 20;</code>
     */
    int getCurYear();

    /**
     * <code>optional int32 cur_year_tick = 21;</code>
     */
    boolean hasCurYearTick();
    /**
     * <code>optional int32 cur_year_tick = 21;</code>
     */
    int getCurYearTick();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
     */
    boolean hasWorldPoles();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles getWorldPoles();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> 
        getRiverTilesList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    int getRiverTilesCount();

    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    java.util.List<java.lang.Integer> getWaterElevationList();
    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    int getWaterElevationCount();
    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    int getWaterElevation(int index);
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.WorldMap}
   */
  public static final class WorldMap extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.WorldMap)
      WorldMapOrBuilder {
    // Use WorldMap.newBuilder() to construct.
    private WorldMap(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WorldMap(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final WorldMap defaultInstance;
    public static WorldMap getDefaultInstance() {
      return defaultInstance;
    }

    public WorldMap getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private WorldMap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              worldWidth_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              worldHeight_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              nameEnglish_ = bs;
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                elevation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              elevation_.add(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                elevation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                elevation_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                rainfall_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              rainfall_.add(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                rainfall_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                rainfall_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                vegetation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              vegetation_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                vegetation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                vegetation_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                temperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              temperature_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                temperature_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                temperature_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                evilness_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              evilness_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                evilness_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                evilness_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                drainage_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              drainage_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                drainage_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                drainage_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                volcanism_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              volcanism_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                volcanism_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                volcanism_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                savagery_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              savagery_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                savagery_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                savagery_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                clouds_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud>();
                mutable_bitField0_ |= 0x00001000;
              }
              clouds_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.PARSER, extensionRegistry));
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                salinity_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              salinity_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                salinity_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                salinity_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              bitField0_ |= 0x00000010;
              mapX_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000020;
              mapY_ = input.readInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00000040;
              centerX_ = input.readInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00000080;
              centerY_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000100;
              centerZ_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00000200;
              curYear_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00000400;
              curYearTick_ = input.readInt32();
              break;
            }
            case 176: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000800;
                worldPoles_ = value;
              }
              break;
            }
            case 186: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                riverTiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile>();
                mutable_bitField0_ |= 0x00400000;
              }
              riverTiles_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.PARSER, extensionRegistry));
              break;
            }
            case 192: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                waterElevation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              waterElevation_.add(input.readInt32());
              break;
            }
            case 194: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                waterElevation_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                waterElevation_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          elevation_ = java.util.Collections.unmodifiableList(elevation_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          rainfall_ = java.util.Collections.unmodifiableList(rainfall_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          vegetation_ = java.util.Collections.unmodifiableList(vegetation_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          temperature_ = java.util.Collections.unmodifiableList(temperature_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          evilness_ = java.util.Collections.unmodifiableList(evilness_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          drainage_ = java.util.Collections.unmodifiableList(drainage_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          volcanism_ = java.util.Collections.unmodifiableList(volcanism_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          savagery_ = java.util.Collections.unmodifiableList(savagery_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          clouds_ = java.util.Collections.unmodifiableList(clouds_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          salinity_ = java.util.Collections.unmodifiableList(salinity_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          riverTiles_ = java.util.Collections.unmodifiableList(riverTiles_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          waterElevation_ = java.util.Collections.unmodifiableList(waterElevation_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<WorldMap> PARSER =
        new com.google.protobuf.AbstractParser<WorldMap>() {
      public WorldMap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorldMap(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WorldMap> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int WORLD_WIDTH_FIELD_NUMBER = 1;
    private int worldWidth_;
    /**
     * <code>required int32 world_width = 1;</code>
     */
    public boolean hasWorldWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 world_width = 1;</code>
     */
    public int getWorldWidth() {
      return worldWidth_;
    }

    public static final int WORLD_HEIGHT_FIELD_NUMBER = 2;
    private int worldHeight_;
    /**
     * <code>required int32 world_height = 2;</code>
     */
    public boolean hasWorldHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 world_height = 2;</code>
     */
    public int getWorldHeight() {
      return worldHeight_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_ENGLISH_FIELD_NUMBER = 4;
    private java.lang.Object nameEnglish_;
    /**
     * <code>optional string name_english = 4;</code>
     */
    public boolean hasNameEnglish() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string name_english = 4;</code>
     */
    public java.lang.String getNameEnglish() {
      java.lang.Object ref = nameEnglish_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          nameEnglish_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name_english = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNameEnglishBytes() {
      java.lang.Object ref = nameEnglish_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nameEnglish_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ELEVATION_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> elevation_;
    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getElevationList() {
      return elevation_;
    }
    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    public int getElevationCount() {
      return elevation_.size();
    }
    /**
     * <code>repeated int32 elevation = 5;</code>
     */
    public int getElevation(int index) {
      return elevation_.get(index);
    }

    public static final int RAINFALL_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> rainfall_;
    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getRainfallList() {
      return rainfall_;
    }
    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    public int getRainfallCount() {
      return rainfall_.size();
    }
    /**
     * <code>repeated int32 rainfall = 6;</code>
     */
    public int getRainfall(int index) {
      return rainfall_.get(index);
    }

    public static final int VEGETATION_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> vegetation_;
    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getVegetationList() {
      return vegetation_;
    }
    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    public int getVegetationCount() {
      return vegetation_.size();
    }
    /**
     * <code>repeated int32 vegetation = 7;</code>
     */
    public int getVegetation(int index) {
      return vegetation_.get(index);
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> temperature_;
    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    public java.util.List<java.lang.Integer>
        getTemperatureList() {
      return temperature_;
    }
    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    public int getTemperatureCount() {
      return temperature_.size();
    }
    /**
     * <code>repeated int32 temperature = 8;</code>
     */
    public int getTemperature(int index) {
      return temperature_.get(index);
    }

    public static final int EVILNESS_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> evilness_;
    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getEvilnessList() {
      return evilness_;
    }
    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    public int getEvilnessCount() {
      return evilness_.size();
    }
    /**
     * <code>repeated int32 evilness = 9;</code>
     */
    public int getEvilness(int index) {
      return evilness_.get(index);
    }

    public static final int DRAINAGE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> drainage_;
    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getDrainageList() {
      return drainage_;
    }
    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    public int getDrainageCount() {
      return drainage_.size();
    }
    /**
     * <code>repeated int32 drainage = 10;</code>
     */
    public int getDrainage(int index) {
      return drainage_.get(index);
    }

    public static final int VOLCANISM_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> volcanism_;
    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    public java.util.List<java.lang.Integer>
        getVolcanismList() {
      return volcanism_;
    }
    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    public int getVolcanismCount() {
      return volcanism_.size();
    }
    /**
     * <code>repeated int32 volcanism = 11;</code>
     */
    public int getVolcanism(int index) {
      return volcanism_.get(index);
    }

    public static final int SAVAGERY_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> savagery_;
    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    public java.util.List<java.lang.Integer>
        getSavageryList() {
      return savagery_;
    }
    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    public int getSavageryCount() {
      return savagery_.size();
    }
    /**
     * <code>repeated int32 savagery = 12;</code>
     */
    public int getSavagery(int index) {
      return savagery_.get(index);
    }

    public static final int CLOUDS_FIELD_NUMBER = 13;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> clouds_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> getCloudsList() {
      return clouds_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CloudOrBuilder> 
        getCloudsOrBuilderList() {
      return clouds_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    public int getCloudsCount() {
      return clouds_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud getClouds(int index) {
      return clouds_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CloudOrBuilder getCloudsOrBuilder(
        int index) {
      return clouds_.get(index);
    }

    public static final int SALINITY_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> salinity_;
    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    public java.util.List<java.lang.Integer>
        getSalinityList() {
      return salinity_;
    }
    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    public int getSalinityCount() {
      return salinity_.size();
    }
    /**
     * <code>repeated int32 salinity = 14;</code>
     */
    public int getSalinity(int index) {
      return salinity_.get(index);
    }

    public static final int MAP_X_FIELD_NUMBER = 15;
    private int mapX_;
    /**
     * <code>optional int32 map_x = 15;</code>
     */
    public boolean hasMapX() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 map_x = 15;</code>
     */
    public int getMapX() {
      return mapX_;
    }

    public static final int MAP_Y_FIELD_NUMBER = 16;
    private int mapY_;
    /**
     * <code>optional int32 map_y = 16;</code>
     */
    public boolean hasMapY() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 map_y = 16;</code>
     */
    public int getMapY() {
      return mapY_;
    }

    public static final int CENTER_X_FIELD_NUMBER = 17;
    private int centerX_;
    /**
     * <code>optional int32 center_x = 17;</code>
     */
    public boolean hasCenterX() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 center_x = 17;</code>
     */
    public int getCenterX() {
      return centerX_;
    }

    public static final int CENTER_Y_FIELD_NUMBER = 18;
    private int centerY_;
    /**
     * <code>optional int32 center_y = 18;</code>
     */
    public boolean hasCenterY() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 center_y = 18;</code>
     */
    public int getCenterY() {
      return centerY_;
    }

    public static final int CENTER_Z_FIELD_NUMBER = 19;
    private int centerZ_;
    /**
     * <code>optional int32 center_z = 19;</code>
     */
    public boolean hasCenterZ() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 center_z = 19;</code>
     */
    public int getCenterZ() {
      return centerZ_;
    }

    public static final int CUR_YEAR_FIELD_NUMBER = 20;
    private int curYear_;
    /**
     * <code>optional int32 cur_year = 20;</code>
     */
    public boolean hasCurYear() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 cur_year = 20;</code>
     */
    public int getCurYear() {
      return curYear_;
    }

    public static final int CUR_YEAR_TICK_FIELD_NUMBER = 21;
    private int curYearTick_;
    /**
     * <code>optional int32 cur_year_tick = 21;</code>
     */
    public boolean hasCurYearTick() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 cur_year_tick = 21;</code>
     */
    public int getCurYearTick() {
      return curYearTick_;
    }

    public static final int WORLD_POLES_FIELD_NUMBER = 22;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles worldPoles_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
     */
    public boolean hasWorldPoles() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles getWorldPoles() {
      return worldPoles_;
    }

    public static final int RIVER_TILES_FIELD_NUMBER = 23;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> riverTiles_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> getRiverTilesList() {
      return riverTiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTileOrBuilder> 
        getRiverTilesOrBuilderList() {
      return riverTiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    public int getRiverTilesCount() {
      return riverTiles_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles(int index) {
      return riverTiles_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTileOrBuilder getRiverTilesOrBuilder(
        int index) {
      return riverTiles_.get(index);
    }

    public static final int WATER_ELEVATION_FIELD_NUMBER = 24;
    private java.util.List<java.lang.Integer> waterElevation_;
    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    public java.util.List<java.lang.Integer>
        getWaterElevationList() {
      return waterElevation_;
    }
    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    public int getWaterElevationCount() {
      return waterElevation_.size();
    }
    /**
     * <code>repeated int32 water_elevation = 24;</code>
     */
    public int getWaterElevation(int index) {
      return waterElevation_.get(index);
    }

    private void initFields() {
      worldWidth_ = 0;
      worldHeight_ = 0;
      name_ = "";
      nameEnglish_ = "";
      elevation_ = java.util.Collections.emptyList();
      rainfall_ = java.util.Collections.emptyList();
      vegetation_ = java.util.Collections.emptyList();
      temperature_ = java.util.Collections.emptyList();
      evilness_ = java.util.Collections.emptyList();
      drainage_ = java.util.Collections.emptyList();
      volcanism_ = java.util.Collections.emptyList();
      savagery_ = java.util.Collections.emptyList();
      clouds_ = java.util.Collections.emptyList();
      salinity_ = java.util.Collections.emptyList();
      mapX_ = 0;
      mapY_ = 0;
      centerX_ = 0;
      centerY_ = 0;
      centerZ_ = 0;
      curYear_ = 0;
      curYearTick_ = 0;
      worldPoles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles.NO_POLES;
      riverTiles_ = java.util.Collections.emptyList();
      waterElevation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasWorldWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWorldHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, worldWidth_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, worldHeight_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getNameEnglishBytes());
      }
      for (int i = 0; i < elevation_.size(); i++) {
        output.writeInt32(5, elevation_.get(i));
      }
      for (int i = 0; i < rainfall_.size(); i++) {
        output.writeInt32(6, rainfall_.get(i));
      }
      for (int i = 0; i < vegetation_.size(); i++) {
        output.writeInt32(7, vegetation_.get(i));
      }
      for (int i = 0; i < temperature_.size(); i++) {
        output.writeInt32(8, temperature_.get(i));
      }
      for (int i = 0; i < evilness_.size(); i++) {
        output.writeInt32(9, evilness_.get(i));
      }
      for (int i = 0; i < drainage_.size(); i++) {
        output.writeInt32(10, drainage_.get(i));
      }
      for (int i = 0; i < volcanism_.size(); i++) {
        output.writeInt32(11, volcanism_.get(i));
      }
      for (int i = 0; i < savagery_.size(); i++) {
        output.writeInt32(12, savagery_.get(i));
      }
      for (int i = 0; i < clouds_.size(); i++) {
        output.writeMessage(13, clouds_.get(i));
      }
      for (int i = 0; i < salinity_.size(); i++) {
        output.writeInt32(14, salinity_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(15, mapX_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(16, mapY_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(17, centerX_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(18, centerY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(19, centerZ_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(20, curYear_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(21, curYearTick_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(22, worldPoles_.getNumber());
      }
      for (int i = 0; i < riverTiles_.size(); i++) {
        output.writeMessage(23, riverTiles_.get(i));
      }
      for (int i = 0; i < waterElevation_.size(); i++) {
        output.writeInt32(24, waterElevation_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, worldWidth_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, worldHeight_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getNameEnglishBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < elevation_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(elevation_.get(i));
        }
        size += dataSize;
        size += 1 * getElevationList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rainfall_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(rainfall_.get(i));
        }
        size += dataSize;
        size += 1 * getRainfallList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < vegetation_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(vegetation_.get(i));
        }
        size += dataSize;
        size += 1 * getVegetationList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < temperature_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(temperature_.get(i));
        }
        size += dataSize;
        size += 1 * getTemperatureList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < evilness_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(evilness_.get(i));
        }
        size += dataSize;
        size += 1 * getEvilnessList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < drainage_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(drainage_.get(i));
        }
        size += dataSize;
        size += 1 * getDrainageList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < volcanism_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(volcanism_.get(i));
        }
        size += dataSize;
        size += 1 * getVolcanismList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < savagery_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(savagery_.get(i));
        }
        size += dataSize;
        size += 1 * getSavageryList().size();
      }
      for (int i = 0; i < clouds_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, clouds_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < salinity_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(salinity_.get(i));
        }
        size += dataSize;
        size += 1 * getSalinityList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, mapX_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, mapY_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(17, centerX_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, centerY_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, centerZ_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, curYear_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, curYearTick_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(22, worldPoles_.getNumber());
      }
      for (int i = 0; i < riverTiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, riverTiles_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < waterElevation_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(waterElevation_.get(i));
        }
        size += dataSize;
        size += 2 * getWaterElevationList().size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.WorldMap}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.WorldMap)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMapOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        worldWidth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        worldHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        nameEnglish_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        elevation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        rainfall_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        vegetation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        temperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        evilness_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        drainage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        volcanism_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        savagery_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        clouds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        salinity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        mapX_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        mapY_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        centerX_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        centerY_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        centerZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        curYear_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        curYearTick_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        worldPoles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles.NO_POLES;
        bitField0_ = (bitField0_ & ~0x00200000);
        riverTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        waterElevation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.worldWidth_ = worldWidth_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.worldHeight_ = worldHeight_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nameEnglish_ = nameEnglish_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          elevation_ = java.util.Collections.unmodifiableList(elevation_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.elevation_ = elevation_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          rainfall_ = java.util.Collections.unmodifiableList(rainfall_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.rainfall_ = rainfall_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          vegetation_ = java.util.Collections.unmodifiableList(vegetation_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.vegetation_ = vegetation_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          temperature_ = java.util.Collections.unmodifiableList(temperature_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.temperature_ = temperature_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          evilness_ = java.util.Collections.unmodifiableList(evilness_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.evilness_ = evilness_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          drainage_ = java.util.Collections.unmodifiableList(drainage_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.drainage_ = drainage_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          volcanism_ = java.util.Collections.unmodifiableList(volcanism_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.volcanism_ = volcanism_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          savagery_ = java.util.Collections.unmodifiableList(savagery_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.savagery_ = savagery_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          clouds_ = java.util.Collections.unmodifiableList(clouds_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.clouds_ = clouds_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          salinity_ = java.util.Collections.unmodifiableList(salinity_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.salinity_ = salinity_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mapX_ = mapX_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mapY_ = mapY_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000040;
        }
        result.centerX_ = centerX_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00000080;
        }
        result.centerY_ = centerY_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00000100;
        }
        result.centerZ_ = centerZ_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.curYear_ = curYear_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.curYearTick_ = curYearTick_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.worldPoles_ = worldPoles_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          riverTiles_ = java.util.Collections.unmodifiableList(riverTiles_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.riverTiles_ = riverTiles_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          waterElevation_ = java.util.Collections.unmodifiableList(waterElevation_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.waterElevation_ = waterElevation_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.getDefaultInstance()) return this;
        if (other.hasWorldWidth()) {
          setWorldWidth(other.getWorldWidth());
        }
        if (other.hasWorldHeight()) {
          setWorldHeight(other.getWorldHeight());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (other.hasNameEnglish()) {
          bitField0_ |= 0x00000008;
          nameEnglish_ = other.nameEnglish_;
          
        }
        if (!other.elevation_.isEmpty()) {
          if (elevation_.isEmpty()) {
            elevation_ = other.elevation_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureElevationIsMutable();
            elevation_.addAll(other.elevation_);
          }
          
        }
        if (!other.rainfall_.isEmpty()) {
          if (rainfall_.isEmpty()) {
            rainfall_ = other.rainfall_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureRainfallIsMutable();
            rainfall_.addAll(other.rainfall_);
          }
          
        }
        if (!other.vegetation_.isEmpty()) {
          if (vegetation_.isEmpty()) {
            vegetation_ = other.vegetation_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureVegetationIsMutable();
            vegetation_.addAll(other.vegetation_);
          }
          
        }
        if (!other.temperature_.isEmpty()) {
          if (temperature_.isEmpty()) {
            temperature_ = other.temperature_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureTemperatureIsMutable();
            temperature_.addAll(other.temperature_);
          }
          
        }
        if (!other.evilness_.isEmpty()) {
          if (evilness_.isEmpty()) {
            evilness_ = other.evilness_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureEvilnessIsMutable();
            evilness_.addAll(other.evilness_);
          }
          
        }
        if (!other.drainage_.isEmpty()) {
          if (drainage_.isEmpty()) {
            drainage_ = other.drainage_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureDrainageIsMutable();
            drainage_.addAll(other.drainage_);
          }
          
        }
        if (!other.volcanism_.isEmpty()) {
          if (volcanism_.isEmpty()) {
            volcanism_ = other.volcanism_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureVolcanismIsMutable();
            volcanism_.addAll(other.volcanism_);
          }
          
        }
        if (!other.savagery_.isEmpty()) {
          if (savagery_.isEmpty()) {
            savagery_ = other.savagery_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureSavageryIsMutable();
            savagery_.addAll(other.savagery_);
          }
          
        }
        if (!other.clouds_.isEmpty()) {
          if (clouds_.isEmpty()) {
            clouds_ = other.clouds_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureCloudsIsMutable();
            clouds_.addAll(other.clouds_);
          }
          
        }
        if (!other.salinity_.isEmpty()) {
          if (salinity_.isEmpty()) {
            salinity_ = other.salinity_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureSalinityIsMutable();
            salinity_.addAll(other.salinity_);
          }
          
        }
        if (other.hasMapX()) {
          setMapX(other.getMapX());
        }
        if (other.hasMapY()) {
          setMapY(other.getMapY());
        }
        if (other.hasCenterX()) {
          setCenterX(other.getCenterX());
        }
        if (other.hasCenterY()) {
          setCenterY(other.getCenterY());
        }
        if (other.hasCenterZ()) {
          setCenterZ(other.getCenterZ());
        }
        if (other.hasCurYear()) {
          setCurYear(other.getCurYear());
        }
        if (other.hasCurYearTick()) {
          setCurYearTick(other.getCurYearTick());
        }
        if (other.hasWorldPoles()) {
          setWorldPoles(other.getWorldPoles());
        }
        if (!other.riverTiles_.isEmpty()) {
          if (riverTiles_.isEmpty()) {
            riverTiles_ = other.riverTiles_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureRiverTilesIsMutable();
            riverTiles_.addAll(other.riverTiles_);
          }
          
        }
        if (!other.waterElevation_.isEmpty()) {
          if (waterElevation_.isEmpty()) {
            waterElevation_ = other.waterElevation_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureWaterElevationIsMutable();
            waterElevation_.addAll(other.waterElevation_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWorldWidth()) {
          
          return false;
        }
        if (!hasWorldHeight()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int worldWidth_ ;
      /**
       * <code>required int32 world_width = 1;</code>
       */
      public boolean hasWorldWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 world_width = 1;</code>
       */
      public int getWorldWidth() {
        return worldWidth_;
      }
      /**
       * <code>required int32 world_width = 1;</code>
       */
      public Builder setWorldWidth(int value) {
        bitField0_ |= 0x00000001;
        worldWidth_ = value;
        
        return this;
      }
      /**
       * <code>required int32 world_width = 1;</code>
       */
      public Builder clearWorldWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        worldWidth_ = 0;
        
        return this;
      }

      private int worldHeight_ ;
      /**
       * <code>required int32 world_height = 2;</code>
       */
      public boolean hasWorldHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 world_height = 2;</code>
       */
      public int getWorldHeight() {
        return worldHeight_;
      }
      /**
       * <code>required int32 world_height = 2;</code>
       */
      public Builder setWorldHeight(int value) {
        bitField0_ |= 0x00000002;
        worldHeight_ = value;
        
        return this;
      }
      /**
       * <code>required int32 world_height = 2;</code>
       */
      public Builder clearWorldHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        worldHeight_ = 0;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      private java.lang.Object nameEnglish_ = "";
      /**
       * <code>optional string name_english = 4;</code>
       */
      public boolean hasNameEnglish() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public java.lang.String getNameEnglish() {
        java.lang.Object ref = nameEnglish_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            nameEnglish_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNameEnglishBytes() {
        java.lang.Object ref = nameEnglish_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nameEnglish_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder setNameEnglish(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nameEnglish_ = value;
        
        return this;
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder clearNameEnglish() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nameEnglish_ = getDefaultInstance().getNameEnglish();
        
        return this;
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder setNameEnglishBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nameEnglish_ = value;
        
        return this;
      }

      private java.util.List<java.lang.Integer> elevation_ = java.util.Collections.emptyList();
      private void ensureElevationIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          elevation_ = new java.util.ArrayList<java.lang.Integer>(elevation_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getElevationList() {
        return java.util.Collections.unmodifiableList(elevation_);
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public int getElevationCount() {
        return elevation_.size();
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public int getElevation(int index) {
        return elevation_.get(index);
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public Builder setElevation(
          int index, int value) {
        ensureElevationIsMutable();
        elevation_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public Builder addElevation(int value) {
        ensureElevationIsMutable();
        elevation_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public Builder addAllElevation(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureElevationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, elevation_);
        
        return this;
      }
      /**
       * <code>repeated int32 elevation = 5;</code>
       */
      public Builder clearElevation() {
        elevation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }

      private java.util.List<java.lang.Integer> rainfall_ = java.util.Collections.emptyList();
      private void ensureRainfallIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          rainfall_ = new java.util.ArrayList<java.lang.Integer>(rainfall_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getRainfallList() {
        return java.util.Collections.unmodifiableList(rainfall_);
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public int getRainfallCount() {
        return rainfall_.size();
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public int getRainfall(int index) {
        return rainfall_.get(index);
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public Builder setRainfall(
          int index, int value) {
        ensureRainfallIsMutable();
        rainfall_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public Builder addRainfall(int value) {
        ensureRainfallIsMutable();
        rainfall_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public Builder addAllRainfall(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRainfallIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rainfall_);
        
        return this;
      }
      /**
       * <code>repeated int32 rainfall = 6;</code>
       */
      public Builder clearRainfall() {
        rainfall_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        
        return this;
      }

      private java.util.List<java.lang.Integer> vegetation_ = java.util.Collections.emptyList();
      private void ensureVegetationIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          vegetation_ = new java.util.ArrayList<java.lang.Integer>(vegetation_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getVegetationList() {
        return java.util.Collections.unmodifiableList(vegetation_);
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public int getVegetationCount() {
        return vegetation_.size();
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public int getVegetation(int index) {
        return vegetation_.get(index);
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public Builder setVegetation(
          int index, int value) {
        ensureVegetationIsMutable();
        vegetation_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public Builder addVegetation(int value) {
        ensureVegetationIsMutable();
        vegetation_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public Builder addAllVegetation(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVegetationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, vegetation_);
        
        return this;
      }
      /**
       * <code>repeated int32 vegetation = 7;</code>
       */
      public Builder clearVegetation() {
        vegetation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        
        return this;
      }

      private java.util.List<java.lang.Integer> temperature_ = java.util.Collections.emptyList();
      private void ensureTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          temperature_ = new java.util.ArrayList<java.lang.Integer>(temperature_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public java.util.List<java.lang.Integer>
          getTemperatureList() {
        return java.util.Collections.unmodifiableList(temperature_);
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public int getTemperatureCount() {
        return temperature_.size();
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public int getTemperature(int index) {
        return temperature_.get(index);
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public Builder setTemperature(
          int index, int value) {
        ensureTemperatureIsMutable();
        temperature_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public Builder addTemperature(int value) {
        ensureTemperatureIsMutable();
        temperature_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public Builder addAllTemperature(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, temperature_);
        
        return this;
      }
      /**
       * <code>repeated int32 temperature = 8;</code>
       */
      public Builder clearTemperature() {
        temperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        
        return this;
      }

      private java.util.List<java.lang.Integer> evilness_ = java.util.Collections.emptyList();
      private void ensureEvilnessIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          evilness_ = new java.util.ArrayList<java.lang.Integer>(evilness_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getEvilnessList() {
        return java.util.Collections.unmodifiableList(evilness_);
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public int getEvilnessCount() {
        return evilness_.size();
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public int getEvilness(int index) {
        return evilness_.get(index);
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public Builder setEvilness(
          int index, int value) {
        ensureEvilnessIsMutable();
        evilness_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public Builder addEvilness(int value) {
        ensureEvilnessIsMutable();
        evilness_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public Builder addAllEvilness(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureEvilnessIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, evilness_);
        
        return this;
      }
      /**
       * <code>repeated int32 evilness = 9;</code>
       */
      public Builder clearEvilness() {
        evilness_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        
        return this;
      }

      private java.util.List<java.lang.Integer> drainage_ = java.util.Collections.emptyList();
      private void ensureDrainageIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          drainage_ = new java.util.ArrayList<java.lang.Integer>(drainage_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getDrainageList() {
        return java.util.Collections.unmodifiableList(drainage_);
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public int getDrainageCount() {
        return drainage_.size();
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public int getDrainage(int index) {
        return drainage_.get(index);
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public Builder setDrainage(
          int index, int value) {
        ensureDrainageIsMutable();
        drainage_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public Builder addDrainage(int value) {
        ensureDrainageIsMutable();
        drainage_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public Builder addAllDrainage(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDrainageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, drainage_);
        
        return this;
      }
      /**
       * <code>repeated int32 drainage = 10;</code>
       */
      public Builder clearDrainage() {
        drainage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        
        return this;
      }

      private java.util.List<java.lang.Integer> volcanism_ = java.util.Collections.emptyList();
      private void ensureVolcanismIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          volcanism_ = new java.util.ArrayList<java.lang.Integer>(volcanism_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public java.util.List<java.lang.Integer>
          getVolcanismList() {
        return java.util.Collections.unmodifiableList(volcanism_);
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public int getVolcanismCount() {
        return volcanism_.size();
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public int getVolcanism(int index) {
        return volcanism_.get(index);
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public Builder setVolcanism(
          int index, int value) {
        ensureVolcanismIsMutable();
        volcanism_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public Builder addVolcanism(int value) {
        ensureVolcanismIsMutable();
        volcanism_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public Builder addAllVolcanism(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureVolcanismIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, volcanism_);
        
        return this;
      }
      /**
       * <code>repeated int32 volcanism = 11;</code>
       */
      public Builder clearVolcanism() {
        volcanism_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        
        return this;
      }

      private java.util.List<java.lang.Integer> savagery_ = java.util.Collections.emptyList();
      private void ensureSavageryIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          savagery_ = new java.util.ArrayList<java.lang.Integer>(savagery_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public java.util.List<java.lang.Integer>
          getSavageryList() {
        return java.util.Collections.unmodifiableList(savagery_);
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public int getSavageryCount() {
        return savagery_.size();
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public int getSavagery(int index) {
        return savagery_.get(index);
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public Builder setSavagery(
          int index, int value) {
        ensureSavageryIsMutable();
        savagery_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public Builder addSavagery(int value) {
        ensureSavageryIsMutable();
        savagery_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public Builder addAllSavagery(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSavageryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, savagery_);
        
        return this;
      }
      /**
       * <code>repeated int32 savagery = 12;</code>
       */
      public Builder clearSavagery() {
        savagery_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> clouds_ =
        java.util.Collections.emptyList();
      private void ensureCloudsIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          clouds_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud>(clouds_);
          bitField0_ |= 0x00001000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> getCloudsList() {
        return java.util.Collections.unmodifiableList(clouds_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public int getCloudsCount() {
        return clouds_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud getClouds(int index) {
        return clouds_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder setClouds(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCloudsIsMutable();
        clouds_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder setClouds(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.Builder builderForValue) {
        ensureCloudsIsMutable();
        clouds_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder addClouds(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCloudsIsMutable();
        clouds_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder addClouds(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCloudsIsMutable();
        clouds_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder addClouds(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.Builder builderForValue) {
        ensureCloudsIsMutable();
        clouds_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder addClouds(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud.Builder builderForValue) {
        ensureCloudsIsMutable();
        clouds_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder addAllClouds(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Cloud> values) {
        ensureCloudsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, clouds_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder clearClouds() {
        clouds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Cloud clouds = 13;</code>
       */
      public Builder removeClouds(int index) {
        ensureCloudsIsMutable();
        clouds_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> salinity_ = java.util.Collections.emptyList();
      private void ensureSalinityIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          salinity_ = new java.util.ArrayList<java.lang.Integer>(salinity_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public java.util.List<java.lang.Integer>
          getSalinityList() {
        return java.util.Collections.unmodifiableList(salinity_);
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public int getSalinityCount() {
        return salinity_.size();
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public int getSalinity(int index) {
        return salinity_.get(index);
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public Builder setSalinity(
          int index, int value) {
        ensureSalinityIsMutable();
        salinity_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public Builder addSalinity(int value) {
        ensureSalinityIsMutable();
        salinity_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public Builder addAllSalinity(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureSalinityIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, salinity_);
        
        return this;
      }
      /**
       * <code>repeated int32 salinity = 14;</code>
       */
      public Builder clearSalinity() {
        salinity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        
        return this;
      }

      private int mapX_ ;
      /**
       * <code>optional int32 map_x = 15;</code>
       */
      public boolean hasMapX() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 map_x = 15;</code>
       */
      public int getMapX() {
        return mapX_;
      }
      /**
       * <code>optional int32 map_x = 15;</code>
       */
      public Builder setMapX(int value) {
        bitField0_ |= 0x00004000;
        mapX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_x = 15;</code>
       */
      public Builder clearMapX() {
        bitField0_ = (bitField0_ & ~0x00004000);
        mapX_ = 0;
        
        return this;
      }

      private int mapY_ ;
      /**
       * <code>optional int32 map_y = 16;</code>
       */
      public boolean hasMapY() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 map_y = 16;</code>
       */
      public int getMapY() {
        return mapY_;
      }
      /**
       * <code>optional int32 map_y = 16;</code>
       */
      public Builder setMapY(int value) {
        bitField0_ |= 0x00008000;
        mapY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_y = 16;</code>
       */
      public Builder clearMapY() {
        bitField0_ = (bitField0_ & ~0x00008000);
        mapY_ = 0;
        
        return this;
      }

      private int centerX_ ;
      /**
       * <code>optional int32 center_x = 17;</code>
       */
      public boolean hasCenterX() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int32 center_x = 17;</code>
       */
      public int getCenterX() {
        return centerX_;
      }
      /**
       * <code>optional int32 center_x = 17;</code>
       */
      public Builder setCenterX(int value) {
        bitField0_ |= 0x00010000;
        centerX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 center_x = 17;</code>
       */
      public Builder clearCenterX() {
        bitField0_ = (bitField0_ & ~0x00010000);
        centerX_ = 0;
        
        return this;
      }

      private int centerY_ ;
      /**
       * <code>optional int32 center_y = 18;</code>
       */
      public boolean hasCenterY() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional int32 center_y = 18;</code>
       */
      public int getCenterY() {
        return centerY_;
      }
      /**
       * <code>optional int32 center_y = 18;</code>
       */
      public Builder setCenterY(int value) {
        bitField0_ |= 0x00020000;
        centerY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 center_y = 18;</code>
       */
      public Builder clearCenterY() {
        bitField0_ = (bitField0_ & ~0x00020000);
        centerY_ = 0;
        
        return this;
      }

      private int centerZ_ ;
      /**
       * <code>optional int32 center_z = 19;</code>
       */
      public boolean hasCenterZ() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 center_z = 19;</code>
       */
      public int getCenterZ() {
        return centerZ_;
      }
      /**
       * <code>optional int32 center_z = 19;</code>
       */
      public Builder setCenterZ(int value) {
        bitField0_ |= 0x00040000;
        centerZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 center_z = 19;</code>
       */
      public Builder clearCenterZ() {
        bitField0_ = (bitField0_ & ~0x00040000);
        centerZ_ = 0;
        
        return this;
      }

      private int curYear_ ;
      /**
       * <code>optional int32 cur_year = 20;</code>
       */
      public boolean hasCurYear() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 cur_year = 20;</code>
       */
      public int getCurYear() {
        return curYear_;
      }
      /**
       * <code>optional int32 cur_year = 20;</code>
       */
      public Builder setCurYear(int value) {
        bitField0_ |= 0x00080000;
        curYear_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 cur_year = 20;</code>
       */
      public Builder clearCurYear() {
        bitField0_ = (bitField0_ & ~0x00080000);
        curYear_ = 0;
        
        return this;
      }

      private int curYearTick_ ;
      /**
       * <code>optional int32 cur_year_tick = 21;</code>
       */
      public boolean hasCurYearTick() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 cur_year_tick = 21;</code>
       */
      public int getCurYearTick() {
        return curYearTick_;
      }
      /**
       * <code>optional int32 cur_year_tick = 21;</code>
       */
      public Builder setCurYearTick(int value) {
        bitField0_ |= 0x00100000;
        curYearTick_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 cur_year_tick = 21;</code>
       */
      public Builder clearCurYearTick() {
        bitField0_ = (bitField0_ & ~0x00100000);
        curYearTick_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles worldPoles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles.NO_POLES;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
       */
      public boolean hasWorldPoles() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles getWorldPoles() {
        return worldPoles_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
       */
      public Builder setWorldPoles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00200000;
        worldPoles_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.WorldPoles world_poles = 22;</code>
       */
      public Builder clearWorldPoles() {
        bitField0_ = (bitField0_ & ~0x00200000);
        worldPoles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldPoles.NO_POLES;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> riverTiles_ =
        java.util.Collections.emptyList();
      private void ensureRiverTilesIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          riverTiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile>(riverTiles_);
          bitField0_ |= 0x00400000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> getRiverTilesList() {
        return java.util.Collections.unmodifiableList(riverTiles_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public int getRiverTilesCount() {
        return riverTiles_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles(int index) {
        return riverTiles_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder setRiverTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRiverTilesIsMutable();
        riverTiles_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder setRiverTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.Builder builderForValue) {
        ensureRiverTilesIsMutable();
        riverTiles_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder addRiverTiles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRiverTilesIsMutable();
        riverTiles_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder addRiverTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRiverTilesIsMutable();
        riverTiles_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder addRiverTiles(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.Builder builderForValue) {
        ensureRiverTilesIsMutable();
        riverTiles_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder addRiverTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.Builder builderForValue) {
        ensureRiverTilesIsMutable();
        riverTiles_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder addAllRiverTiles(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile> values) {
        ensureRiverTilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, riverTiles_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder clearRiverTiles() {
        riverTiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 23;</code>
       */
      public Builder removeRiverTiles(int index) {
        ensureRiverTilesIsMutable();
        riverTiles_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> waterElevation_ = java.util.Collections.emptyList();
      private void ensureWaterElevationIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          waterElevation_ = new java.util.ArrayList<java.lang.Integer>(waterElevation_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public java.util.List<java.lang.Integer>
          getWaterElevationList() {
        return java.util.Collections.unmodifiableList(waterElevation_);
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public int getWaterElevationCount() {
        return waterElevation_.size();
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public int getWaterElevation(int index) {
        return waterElevation_.get(index);
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public Builder setWaterElevation(
          int index, int value) {
        ensureWaterElevationIsMutable();
        waterElevation_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public Builder addWaterElevation(int value) {
        ensureWaterElevationIsMutable();
        waterElevation_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public Builder addAllWaterElevation(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureWaterElevationIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, waterElevation_);
        
        return this;
      }
      /**
       * <code>repeated int32 water_elevation = 24;</code>
       */
      public Builder clearWaterElevation() {
        waterElevation_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.WorldMap)
    }

    static {
      defaultInstance = new WorldMap(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.WorldMap)
  }

  public interface RegionTileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.RegionTile)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 elevation = 1;</code>
     */
    boolean hasElevation();
    /**
     * <code>optional int32 elevation = 1;</code>
     */
    int getElevation();

    /**
     * <code>optional int32 rainfall = 2;</code>
     */
    boolean hasRainfall();
    /**
     * <code>optional int32 rainfall = 2;</code>
     */
    int getRainfall();

    /**
     * <code>optional int32 vegetation = 3;</code>
     */
    boolean hasVegetation();
    /**
     * <code>optional int32 vegetation = 3;</code>
     */
    int getVegetation();

    /**
     * <code>optional int32 temperature = 4;</code>
     */
    boolean hasTemperature();
    /**
     * <code>optional int32 temperature = 4;</code>
     */
    int getTemperature();

    /**
     * <code>optional int32 evilness = 5;</code>
     */
    boolean hasEvilness();
    /**
     * <code>optional int32 evilness = 5;</code>
     */
    int getEvilness();

    /**
     * <code>optional int32 drainage = 6;</code>
     */
    boolean hasDrainage();
    /**
     * <code>optional int32 drainage = 6;</code>
     */
    int getDrainage();

    /**
     * <code>optional int32 volcanism = 7;</code>
     */
    boolean hasVolcanism();
    /**
     * <code>optional int32 volcanism = 7;</code>
     */
    int getVolcanism();

    /**
     * <code>optional int32 savagery = 8;</code>
     */
    boolean hasSavagery();
    /**
     * <code>optional int32 savagery = 8;</code>
     */
    int getSavagery();

    /**
     * <code>optional int32 salinity = 9;</code>
     */
    boolean hasSalinity();
    /**
     * <code>optional int32 salinity = 9;</code>
     */
    int getSalinity();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
     */
    boolean hasRiverTiles();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles();

    /**
     * <code>optional int32 water_elevation = 11;</code>
     */
    boolean hasWaterElevation();
    /**
     * <code>optional int32 water_elevation = 11;</code>
     */
    int getWaterElevation();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionTile}
   */
  public static final class RegionTile extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.RegionTile)
      RegionTileOrBuilder {
    // Use RegionTile.newBuilder() to construct.
    private RegionTile(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RegionTile(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final RegionTile defaultInstance;
    public static RegionTile getDefaultInstance() {
      return defaultInstance;
    }

    public RegionTile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private RegionTile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              elevation_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rainfall_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              vegetation_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              temperature_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              evilness_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              drainage_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              volcanism_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              savagery_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              salinity_ = input.readInt32();
              break;
            }
            case 82: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = riverTiles_.toBuilder();
              }
              riverTiles_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(riverTiles_);
                riverTiles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              waterElevation_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionTile> PARSER =
        new com.google.protobuf.AbstractParser<RegionTile>() {
      public RegionTile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionTile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionTile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ELEVATION_FIELD_NUMBER = 1;
    private int elevation_;
    /**
     * <code>optional int32 elevation = 1;</code>
     */
    public boolean hasElevation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 elevation = 1;</code>
     */
    public int getElevation() {
      return elevation_;
    }

    public static final int RAINFALL_FIELD_NUMBER = 2;
    private int rainfall_;
    /**
     * <code>optional int32 rainfall = 2;</code>
     */
    public boolean hasRainfall() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 rainfall = 2;</code>
     */
    public int getRainfall() {
      return rainfall_;
    }

    public static final int VEGETATION_FIELD_NUMBER = 3;
    private int vegetation_;
    /**
     * <code>optional int32 vegetation = 3;</code>
     */
    public boolean hasVegetation() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 vegetation = 3;</code>
     */
    public int getVegetation() {
      return vegetation_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 4;
    private int temperature_;
    /**
     * <code>optional int32 temperature = 4;</code>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 temperature = 4;</code>
     */
    public int getTemperature() {
      return temperature_;
    }

    public static final int EVILNESS_FIELD_NUMBER = 5;
    private int evilness_;
    /**
     * <code>optional int32 evilness = 5;</code>
     */
    public boolean hasEvilness() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 evilness = 5;</code>
     */
    public int getEvilness() {
      return evilness_;
    }

    public static final int DRAINAGE_FIELD_NUMBER = 6;
    private int drainage_;
    /**
     * <code>optional int32 drainage = 6;</code>
     */
    public boolean hasDrainage() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 drainage = 6;</code>
     */
    public int getDrainage() {
      return drainage_;
    }

    public static final int VOLCANISM_FIELD_NUMBER = 7;
    private int volcanism_;
    /**
     * <code>optional int32 volcanism = 7;</code>
     */
    public boolean hasVolcanism() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 volcanism = 7;</code>
     */
    public int getVolcanism() {
      return volcanism_;
    }

    public static final int SAVAGERY_FIELD_NUMBER = 8;
    private int savagery_;
    /**
     * <code>optional int32 savagery = 8;</code>
     */
    public boolean hasSavagery() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 savagery = 8;</code>
     */
    public int getSavagery() {
      return savagery_;
    }

    public static final int SALINITY_FIELD_NUMBER = 9;
    private int salinity_;
    /**
     * <code>optional int32 salinity = 9;</code>
     */
    public boolean hasSalinity() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 salinity = 9;</code>
     */
    public int getSalinity() {
      return salinity_;
    }

    public static final int RIVER_TILES_FIELD_NUMBER = 10;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile riverTiles_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
     */
    public boolean hasRiverTiles() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles() {
      return riverTiles_;
    }

    public static final int WATER_ELEVATION_FIELD_NUMBER = 11;
    private int waterElevation_;
    /**
     * <code>optional int32 water_elevation = 11;</code>
     */
    public boolean hasWaterElevation() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 water_elevation = 11;</code>
     */
    public int getWaterElevation() {
      return waterElevation_;
    }

    private void initFields() {
      elevation_ = 0;
      rainfall_ = 0;
      vegetation_ = 0;
      temperature_ = 0;
      evilness_ = 0;
      drainage_ = 0;
      volcanism_ = 0;
      savagery_ = 0;
      salinity_ = 0;
      riverTiles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance();
      waterElevation_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, elevation_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, rainfall_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, vegetation_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, temperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, evilness_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, drainage_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, volcanism_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, savagery_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, salinity_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, riverTiles_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, waterElevation_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, elevation_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rainfall_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, vegetation_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, temperature_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, evilness_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, drainage_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, volcanism_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, savagery_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, salinity_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, riverTiles_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, waterElevation_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionTile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.RegionTile)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTileOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        elevation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rainfall_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        vegetation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        temperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        evilness_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        drainage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        volcanism_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        savagery_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        salinity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        riverTiles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000200);
        waterElevation_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.elevation_ = elevation_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rainfall_ = rainfall_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.vegetation_ = vegetation_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.temperature_ = temperature_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.evilness_ = evilness_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.drainage_ = drainage_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.volcanism_ = volcanism_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.savagery_ = savagery_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.salinity_ = salinity_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.riverTiles_ = riverTiles_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.waterElevation_ = waterElevation_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.getDefaultInstance()) return this;
        if (other.hasElevation()) {
          setElevation(other.getElevation());
        }
        if (other.hasRainfall()) {
          setRainfall(other.getRainfall());
        }
        if (other.hasVegetation()) {
          setVegetation(other.getVegetation());
        }
        if (other.hasTemperature()) {
          setTemperature(other.getTemperature());
        }
        if (other.hasEvilness()) {
          setEvilness(other.getEvilness());
        }
        if (other.hasDrainage()) {
          setDrainage(other.getDrainage());
        }
        if (other.hasVolcanism()) {
          setVolcanism(other.getVolcanism());
        }
        if (other.hasSavagery()) {
          setSavagery(other.getSavagery());
        }
        if (other.hasSalinity()) {
          setSalinity(other.getSalinity());
        }
        if (other.hasRiverTiles()) {
          mergeRiverTiles(other.getRiverTiles());
        }
        if (other.hasWaterElevation()) {
          setWaterElevation(other.getWaterElevation());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int elevation_ ;
      /**
       * <code>optional int32 elevation = 1;</code>
       */
      public boolean hasElevation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 elevation = 1;</code>
       */
      public int getElevation() {
        return elevation_;
      }
      /**
       * <code>optional int32 elevation = 1;</code>
       */
      public Builder setElevation(int value) {
        bitField0_ |= 0x00000001;
        elevation_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 elevation = 1;</code>
       */
      public Builder clearElevation() {
        bitField0_ = (bitField0_ & ~0x00000001);
        elevation_ = 0;
        
        return this;
      }

      private int rainfall_ ;
      /**
       * <code>optional int32 rainfall = 2;</code>
       */
      public boolean hasRainfall() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 rainfall = 2;</code>
       */
      public int getRainfall() {
        return rainfall_;
      }
      /**
       * <code>optional int32 rainfall = 2;</code>
       */
      public Builder setRainfall(int value) {
        bitField0_ |= 0x00000002;
        rainfall_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 rainfall = 2;</code>
       */
      public Builder clearRainfall() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rainfall_ = 0;
        
        return this;
      }

      private int vegetation_ ;
      /**
       * <code>optional int32 vegetation = 3;</code>
       */
      public boolean hasVegetation() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 vegetation = 3;</code>
       */
      public int getVegetation() {
        return vegetation_;
      }
      /**
       * <code>optional int32 vegetation = 3;</code>
       */
      public Builder setVegetation(int value) {
        bitField0_ |= 0x00000004;
        vegetation_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 vegetation = 3;</code>
       */
      public Builder clearVegetation() {
        bitField0_ = (bitField0_ & ~0x00000004);
        vegetation_ = 0;
        
        return this;
      }

      private int temperature_ ;
      /**
       * <code>optional int32 temperature = 4;</code>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 temperature = 4;</code>
       */
      public int getTemperature() {
        return temperature_;
      }
      /**
       * <code>optional int32 temperature = 4;</code>
       */
      public Builder setTemperature(int value) {
        bitField0_ |= 0x00000008;
        temperature_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 temperature = 4;</code>
       */
      public Builder clearTemperature() {
        bitField0_ = (bitField0_ & ~0x00000008);
        temperature_ = 0;
        
        return this;
      }

      private int evilness_ ;
      /**
       * <code>optional int32 evilness = 5;</code>
       */
      public boolean hasEvilness() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 evilness = 5;</code>
       */
      public int getEvilness() {
        return evilness_;
      }
      /**
       * <code>optional int32 evilness = 5;</code>
       */
      public Builder setEvilness(int value) {
        bitField0_ |= 0x00000010;
        evilness_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 evilness = 5;</code>
       */
      public Builder clearEvilness() {
        bitField0_ = (bitField0_ & ~0x00000010);
        evilness_ = 0;
        
        return this;
      }

      private int drainage_ ;
      /**
       * <code>optional int32 drainage = 6;</code>
       */
      public boolean hasDrainage() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 drainage = 6;</code>
       */
      public int getDrainage() {
        return drainage_;
      }
      /**
       * <code>optional int32 drainage = 6;</code>
       */
      public Builder setDrainage(int value) {
        bitField0_ |= 0x00000020;
        drainage_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 drainage = 6;</code>
       */
      public Builder clearDrainage() {
        bitField0_ = (bitField0_ & ~0x00000020);
        drainage_ = 0;
        
        return this;
      }

      private int volcanism_ ;
      /**
       * <code>optional int32 volcanism = 7;</code>
       */
      public boolean hasVolcanism() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 volcanism = 7;</code>
       */
      public int getVolcanism() {
        return volcanism_;
      }
      /**
       * <code>optional int32 volcanism = 7;</code>
       */
      public Builder setVolcanism(int value) {
        bitField0_ |= 0x00000040;
        volcanism_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 volcanism = 7;</code>
       */
      public Builder clearVolcanism() {
        bitField0_ = (bitField0_ & ~0x00000040);
        volcanism_ = 0;
        
        return this;
      }

      private int savagery_ ;
      /**
       * <code>optional int32 savagery = 8;</code>
       */
      public boolean hasSavagery() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 savagery = 8;</code>
       */
      public int getSavagery() {
        return savagery_;
      }
      /**
       * <code>optional int32 savagery = 8;</code>
       */
      public Builder setSavagery(int value) {
        bitField0_ |= 0x00000080;
        savagery_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 savagery = 8;</code>
       */
      public Builder clearSavagery() {
        bitField0_ = (bitField0_ & ~0x00000080);
        savagery_ = 0;
        
        return this;
      }

      private int salinity_ ;
      /**
       * <code>optional int32 salinity = 9;</code>
       */
      public boolean hasSalinity() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 salinity = 9;</code>
       */
      public int getSalinity() {
        return salinity_;
      }
      /**
       * <code>optional int32 salinity = 9;</code>
       */
      public Builder setSalinity(int value) {
        bitField0_ |= 0x00000100;
        salinity_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 salinity = 9;</code>
       */
      public Builder clearSalinity() {
        bitField0_ = (bitField0_ & ~0x00000100);
        salinity_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile riverTiles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public boolean hasRiverTiles() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile getRiverTiles() {
        return riverTiles_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public Builder setRiverTiles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        riverTiles_ = value;

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public Builder setRiverTiles(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.Builder builderForValue) {
        riverTiles_ = builderForValue.build();

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public Builder mergeRiverTiles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile value) {
        if (((bitField0_ & 0x00000200) == 0x00000200) &&
            riverTiles_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance()) {
          riverTiles_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.newBuilder(riverTiles_).mergeFrom(value).buildPartial();
        } else {
          riverTiles_ = value;
        }

        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.RiverTile river_tiles = 10;</code>
       */
      public Builder clearRiverTiles() {
        riverTiles_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RiverTile.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      private int waterElevation_ ;
      /**
       * <code>optional int32 water_elevation = 11;</code>
       */
      public boolean hasWaterElevation() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 water_elevation = 11;</code>
       */
      public int getWaterElevation() {
        return waterElevation_;
      }
      /**
       * <code>optional int32 water_elevation = 11;</code>
       */
      public Builder setWaterElevation(int value) {
        bitField0_ |= 0x00000400;
        waterElevation_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 water_elevation = 11;</code>
       */
      public Builder clearWaterElevation() {
        bitField0_ = (bitField0_ & ~0x00000400);
        waterElevation_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.RegionTile)
    }

    static {
      defaultInstance = new RegionTile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.RegionTile)
  }

  public interface RegionMapOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.RegionMap)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 map_x = 1;</code>
     */
    boolean hasMapX();
    /**
     * <code>optional int32 map_x = 1;</code>
     */
    int getMapX();

    /**
     * <code>optional int32 map_y = 2;</code>
     */
    boolean hasMapY();
    /**
     * <code>optional int32 map_y = 2;</code>
     */
    int getMapY();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string name_english = 4;</code>
     */
    boolean hasNameEnglish();
    /**
     * <code>optional string name_english = 4;</code>
     */
    java.lang.String getNameEnglish();
    /**
     * <code>optional string name_english = 4;</code>
     */
    com.google.protobuf.ByteString
        getNameEnglishBytes();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> 
        getTilesList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile getTiles(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    int getTilesCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionMap}
   */
  public static final class RegionMap extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.RegionMap)
      RegionMapOrBuilder {
    // Use RegionMap.newBuilder() to construct.
    private RegionMap(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RegionMap(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final RegionMap defaultInstance;
    public static RegionMap getDefaultInstance() {
      return defaultInstance;
    }

    public RegionMap getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private RegionMap(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mapX_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              mapY_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              nameEnglish_ = bs;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                tiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile>();
                mutable_bitField0_ |= 0x00000010;
              }
              tiles_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionMap> PARSER =
        new com.google.protobuf.AbstractParser<RegionMap>() {
      public RegionMap parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionMap(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionMap> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAP_X_FIELD_NUMBER = 1;
    private int mapX_;
    /**
     * <code>optional int32 map_x = 1;</code>
     */
    public boolean hasMapX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 map_x = 1;</code>
     */
    public int getMapX() {
      return mapX_;
    }

    public static final int MAP_Y_FIELD_NUMBER = 2;
    private int mapY_;
    /**
     * <code>optional int32 map_y = 2;</code>
     */
    public boolean hasMapY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 map_y = 2;</code>
     */
    public int getMapY() {
      return mapY_;
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_ENGLISH_FIELD_NUMBER = 4;
    private java.lang.Object nameEnglish_;
    /**
     * <code>optional string name_english = 4;</code>
     */
    public boolean hasNameEnglish() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string name_english = 4;</code>
     */
    public java.lang.String getNameEnglish() {
      java.lang.Object ref = nameEnglish_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          nameEnglish_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name_english = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNameEnglishBytes() {
      java.lang.Object ref = nameEnglish_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nameEnglish_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TILES_FIELD_NUMBER = 5;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> tiles_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTileOrBuilder> 
        getTilesOrBuilderList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile getTiles(int index) {
      return tiles_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTileOrBuilder getTilesOrBuilder(
        int index) {
      return tiles_.get(index);
    }

    private void initFields() {
      mapX_ = 0;
      mapY_ = 0;
      name_ = "";
      nameEnglish_ = "";
      tiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, mapY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getNameEnglishBytes());
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeMessage(5, tiles_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mapX_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, mapY_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getNameEnglishBytes());
      }
      for (int i = 0; i < tiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, tiles_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionMap}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.RegionMap)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMapOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mapX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        mapY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        nameEnglish_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mapX_ = mapX_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mapY_ = mapY_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nameEnglish_ = nameEnglish_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.tiles_ = tiles_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.getDefaultInstance()) return this;
        if (other.hasMapX()) {
          setMapX(other.getMapX());
        }
        if (other.hasMapY()) {
          setMapY(other.getMapY());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (other.hasNameEnglish()) {
          bitField0_ |= 0x00000008;
          nameEnglish_ = other.nameEnglish_;
          
        }
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int mapX_ ;
      /**
       * <code>optional int32 map_x = 1;</code>
       */
      public boolean hasMapX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 map_x = 1;</code>
       */
      public int getMapX() {
        return mapX_;
      }
      /**
       * <code>optional int32 map_x = 1;</code>
       */
      public Builder setMapX(int value) {
        bitField0_ |= 0x00000001;
        mapX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_x = 1;</code>
       */
      public Builder clearMapX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mapX_ = 0;
        
        return this;
      }

      private int mapY_ ;
      /**
       * <code>optional int32 map_y = 2;</code>
       */
      public boolean hasMapY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 map_y = 2;</code>
       */
      public int getMapY() {
        return mapY_;
      }
      /**
       * <code>optional int32 map_y = 2;</code>
       */
      public Builder setMapY(int value) {
        bitField0_ |= 0x00000002;
        mapY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 map_y = 2;</code>
       */
      public Builder clearMapY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mapY_ = 0;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      private java.lang.Object nameEnglish_ = "";
      /**
       * <code>optional string name_english = 4;</code>
       */
      public boolean hasNameEnglish() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public java.lang.String getNameEnglish() {
        java.lang.Object ref = nameEnglish_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            nameEnglish_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNameEnglishBytes() {
        java.lang.Object ref = nameEnglish_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nameEnglish_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder setNameEnglish(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nameEnglish_ = value;
        
        return this;
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder clearNameEnglish() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nameEnglish_ = getDefaultInstance().getNameEnglish();
        
        return this;
      }
      /**
       * <code>optional string name_english = 4;</code>
       */
      public Builder setNameEnglishBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        nameEnglish_ = value;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> tiles_ =
        java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          tiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile>(tiles_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder setTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder setTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder addTiles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder addTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder addTiles(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder addTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionTile> values) {
        ensureTilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tiles_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionTile tiles = 5;</code>
       */
      public Builder removeTiles(int index) {
        ensureTilesIsMutable();
        tiles_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.RegionMap)
    }

    static {
      defaultInstance = new RegionMap(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.RegionMap)
  }

  public interface RegionMapsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.RegionMaps)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> 
        getWorldMapsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap getWorldMaps(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    int getWorldMapsCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> 
        getRegionMapsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap getRegionMaps(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    int getRegionMapsCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionMaps}
   */
  public static final class RegionMaps extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.RegionMaps)
      RegionMapsOrBuilder {
    // Use RegionMaps.newBuilder() to construct.
    private RegionMaps(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RegionMaps(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final RegionMaps defaultInstance;
    public static RegionMaps getDefaultInstance() {
      return defaultInstance;
    }

    public RegionMaps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private RegionMaps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                worldMaps_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap>();
                mutable_bitField0_ |= 0x00000001;
              }
              worldMaps_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                regionMaps_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap>();
                mutable_bitField0_ |= 0x00000002;
              }
              regionMaps_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          worldMaps_ = java.util.Collections.unmodifiableList(worldMaps_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          regionMaps_ = java.util.Collections.unmodifiableList(regionMaps_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<RegionMaps> PARSER =
        new com.google.protobuf.AbstractParser<RegionMaps>() {
      public RegionMaps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RegionMaps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RegionMaps> getParserForType() {
      return PARSER;
    }

    public static final int WORLD_MAPS_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> worldMaps_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> getWorldMapsList() {
      return worldMaps_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMapOrBuilder> 
        getWorldMapsOrBuilderList() {
      return worldMaps_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    public int getWorldMapsCount() {
      return worldMaps_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap getWorldMaps(int index) {
      return worldMaps_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMapOrBuilder getWorldMapsOrBuilder(
        int index) {
      return worldMaps_.get(index);
    }

    public static final int REGION_MAPS_FIELD_NUMBER = 2;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> regionMaps_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> getRegionMapsList() {
      return regionMaps_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMapOrBuilder> 
        getRegionMapsOrBuilderList() {
      return regionMaps_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    public int getRegionMapsCount() {
      return regionMaps_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap getRegionMaps(int index) {
      return regionMaps_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMapOrBuilder getRegionMapsOrBuilder(
        int index) {
      return regionMaps_.get(index);
    }

    private void initFields() {
      worldMaps_ = java.util.Collections.emptyList();
      regionMaps_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getWorldMapsCount(); i++) {
        if (!getWorldMaps(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < worldMaps_.size(); i++) {
        output.writeMessage(1, worldMaps_.get(i));
      }
      for (int i = 0; i < regionMaps_.size(); i++) {
        output.writeMessage(2, regionMaps_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < worldMaps_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, worldMaps_.get(i));
      }
      for (int i = 0; i < regionMaps_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, regionMaps_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.RegionMaps}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.RegionMaps)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMapsOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        worldMaps_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        regionMaps_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          worldMaps_ = java.util.Collections.unmodifiableList(worldMaps_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.worldMaps_ = worldMaps_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          regionMaps_ = java.util.Collections.unmodifiableList(regionMaps_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.regionMaps_ = regionMaps_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps.getDefaultInstance()) return this;
        if (!other.worldMaps_.isEmpty()) {
          if (worldMaps_.isEmpty()) {
            worldMaps_ = other.worldMaps_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureWorldMapsIsMutable();
            worldMaps_.addAll(other.worldMaps_);
          }
          
        }
        if (!other.regionMaps_.isEmpty()) {
          if (regionMaps_.isEmpty()) {
            regionMaps_ = other.regionMaps_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRegionMapsIsMutable();
            regionMaps_.addAll(other.regionMaps_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getWorldMapsCount(); i++) {
          if (!getWorldMaps(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMaps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> worldMaps_ =
        java.util.Collections.emptyList();
      private void ensureWorldMapsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          worldMaps_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap>(worldMaps_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> getWorldMapsList() {
        return java.util.Collections.unmodifiableList(worldMaps_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public int getWorldMapsCount() {
        return worldMaps_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap getWorldMaps(int index) {
        return worldMaps_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder setWorldMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorldMapsIsMutable();
        worldMaps_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder setWorldMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.Builder builderForValue) {
        ensureWorldMapsIsMutable();
        worldMaps_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder addWorldMaps(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorldMapsIsMutable();
        worldMaps_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder addWorldMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWorldMapsIsMutable();
        worldMaps_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder addWorldMaps(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.Builder builderForValue) {
        ensureWorldMapsIsMutable();
        worldMaps_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder addWorldMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap.Builder builderForValue) {
        ensureWorldMapsIsMutable();
        worldMaps_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder addAllWorldMaps(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.WorldMap> values) {
        ensureWorldMapsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, worldMaps_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder clearWorldMaps() {
        worldMaps_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.WorldMap world_maps = 1;</code>
       */
      public Builder removeWorldMaps(int index) {
        ensureWorldMapsIsMutable();
        worldMaps_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> regionMaps_ =
        java.util.Collections.emptyList();
      private void ensureRegionMapsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          regionMaps_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap>(regionMaps_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> getRegionMapsList() {
        return java.util.Collections.unmodifiableList(regionMaps_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public int getRegionMapsCount() {
        return regionMaps_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap getRegionMaps(int index) {
        return regionMaps_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder setRegionMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionMapsIsMutable();
        regionMaps_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder setRegionMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.Builder builderForValue) {
        ensureRegionMapsIsMutable();
        regionMaps_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder addRegionMaps(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionMapsIsMutable();
        regionMaps_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder addRegionMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRegionMapsIsMutable();
        regionMaps_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder addRegionMaps(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.Builder builderForValue) {
        ensureRegionMapsIsMutable();
        regionMaps_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder addRegionMaps(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap.Builder builderForValue) {
        ensureRegionMapsIsMutable();
        regionMaps_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder addAllRegionMaps(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.RegionMap> values) {
        ensureRegionMapsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, regionMaps_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder clearRegionMaps() {
        regionMaps_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.RegionMap region_maps = 2;</code>
       */
      public Builder removeRegionMaps(int index) {
        ensureRegionMapsIsMutable();
        regionMaps_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.RegionMaps)
    }

    static {
      defaultInstance = new RegionMaps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.RegionMaps)
  }

  public interface PatternDescriptorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> 
        getColorsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColors(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    int getColorsCount();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
     */
    boolean hasPattern();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType getPattern();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor}
   */
  public static final class PatternDescriptor extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor)
      PatternDescriptorOrBuilder {
    // Use PatternDescriptor.newBuilder() to construct.
    private PatternDescriptor(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PatternDescriptor(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final PatternDescriptor defaultInstance;
    public static PatternDescriptor getDefaultInstance() {
      return defaultInstance;
    }

    public PatternDescriptor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private PatternDescriptor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              id_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                colors_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition>();
                mutable_bitField0_ |= 0x00000002;
              }
              colors_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.PARSER, extensionRegistry));
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType value = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType.valueOf(rawValue);
              if (value == null) {
                unknownFieldsCodedOutput.writeRawVarint32(tag);
                unknownFieldsCodedOutput.writeRawVarint32(rawValue);
              } else {
                bitField0_ |= 0x00000002;
                pattern_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PatternDescriptor> PARSER =
        new com.google.protobuf.AbstractParser<PatternDescriptor>() {
      public PatternDescriptor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PatternDescriptor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PatternDescriptor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COLORS_FIELD_NUMBER = 2;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> colors_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinitionOrBuilder> 
        getColorsOrBuilderList() {
      return colors_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColors(int index) {
      return colors_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinitionOrBuilder getColorsOrBuilder(
        int index) {
      return colors_.get(index);
    }

    public static final int PATTERN_FIELD_NUMBER = 3;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType pattern_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
     */
    public boolean hasPattern() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType getPattern() {
      return pattern_;
    }

    private void initFields() {
      id_ = "";
      colors_ = java.util.Collections.emptyList();
      pattern_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType.MONOTONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getColorsCount(); i++) {
        if (!getColors(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIdBytes());
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeMessage(2, colors_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(3, pattern_.getNumber());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIdBytes());
      }
      for (int i = 0; i < colors_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, colors_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, pattern_.getNumber());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptorOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        pattern_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType.MONOTONE;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.colors_ = colors_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pattern_ = pattern_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.getDefaultInstance()) return this;
        if (other.hasId()) {
          bitField0_ |= 0x00000001;
          id_ = other.id_;
          
        }
        if (!other.colors_.isEmpty()) {
          if (colors_.isEmpty()) {
            colors_ = other.colors_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureColorsIsMutable();
            colors_.addAll(other.colors_);
          }
          
        }
        if (other.hasPattern()) {
          setPattern(other.getPattern());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getColorsCount(); i++) {
          if (!getColors(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> colors_ =
        java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          colors_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition>(colors_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> getColorsList() {
        return java.util.Collections.unmodifiableList(colors_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public int getColorsCount() {
        return colors_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColors(int index) {
        return colors_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder setColors(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorsIsMutable();
        colors_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder setColors(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        ensureColorsIsMutable();
        colors_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder addColors(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorsIsMutable();
        colors_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder addColors(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorsIsMutable();
        colors_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder addColors(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        ensureColorsIsMutable();
        colors_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder addColors(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        ensureColorsIsMutable();
        colors_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder addAllColors(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition> values) {
        ensureColorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, colors_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder clearColors() {
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition colors = 2;</code>
       */
      public Builder removeColors(int index) {
        ensureColorsIsMutable();
        colors_.remove(index);

        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType pattern_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType.MONOTONE;
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
       */
      public boolean hasPattern() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType getPattern() {
        return pattern_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
       */
      public Builder setPattern(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        pattern_ = value;
        
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.PatternType pattern = 3;</code>
       */
      public Builder clearPattern() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pattern_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternType.MONOTONE;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor)
    }

    static {
      defaultInstance = new PatternDescriptor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor)
  }

  public interface ColorModifierRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> 
        getPatternsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor getPatterns(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    int getPatternsCount();

    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    java.util.List<java.lang.Integer> getBodyPartIdList();
    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    int getBodyPartIdCount();
    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    int getBodyPartId(int index);

    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    java.util.List<java.lang.Integer> getTissueLayerIdList();
    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    int getTissueLayerIdCount();
    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    int getTissueLayerId(int index);

    /**
     * <code>optional int32 start_date = 4;</code>
     */
    boolean hasStartDate();
    /**
     * <code>optional int32 start_date = 4;</code>
     */
    int getStartDate();

    /**
     * <code>optional int32 end_date = 5;</code>
     */
    boolean hasEndDate();
    /**
     * <code>optional int32 end_date = 5;</code>
     */
    int getEndDate();

    /**
     * <code>optional string part = 6;</code>
     */
    boolean hasPart();
    /**
     * <code>optional string part = 6;</code>
     */
    java.lang.String getPart();
    /**
     * <code>optional string part = 6;</code>
     */
    com.google.protobuf.ByteString
        getPartBytes();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw}
   */
  public static final class ColorModifierRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw)
      ColorModifierRawOrBuilder {
    // Use ColorModifierRaw.newBuilder() to construct.
    private ColorModifierRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ColorModifierRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ColorModifierRaw defaultInstance;
    public static ColorModifierRaw getDefaultInstance() {
      return defaultInstance;
    }

    public ColorModifierRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ColorModifierRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                patterns_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor>();
                mutable_bitField0_ |= 0x00000001;
              }
              patterns_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bodyPartId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              bodyPartId_.add(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                bodyPartId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bodyPartId_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tissueLayerId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              tissueLayerId_.add(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                tissueLayerId_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                tissueLayerId_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              bitField0_ |= 0x00000001;
              startDate_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              endDate_ = input.readInt32();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              part_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          patterns_ = java.util.Collections.unmodifiableList(patterns_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bodyPartId_ = java.util.Collections.unmodifiableList(bodyPartId_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          tissueLayerId_ = java.util.Collections.unmodifiableList(tissueLayerId_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ColorModifierRaw> PARSER =
        new com.google.protobuf.AbstractParser<ColorModifierRaw>() {
      public ColorModifierRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColorModifierRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ColorModifierRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PATTERNS_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> patterns_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> getPatternsList() {
      return patterns_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptorOrBuilder> 
        getPatternsOrBuilderList() {
      return patterns_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    public int getPatternsCount() {
      return patterns_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor getPatterns(int index) {
      return patterns_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptorOrBuilder getPatternsOrBuilder(
        int index) {
      return patterns_.get(index);
    }

    public static final int BODY_PART_ID_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> bodyPartId_;
    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getBodyPartIdList() {
      return bodyPartId_;
    }
    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    public int getBodyPartIdCount() {
      return bodyPartId_.size();
    }
    /**
     * <code>repeated int32 body_part_id = 2;</code>
     */
    public int getBodyPartId(int index) {
      return bodyPartId_.get(index);
    }

    public static final int TISSUE_LAYER_ID_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> tissueLayerId_;
    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getTissueLayerIdList() {
      return tissueLayerId_;
    }
    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    public int getTissueLayerIdCount() {
      return tissueLayerId_.size();
    }
    /**
     * <code>repeated int32 tissue_layer_id = 3;</code>
     */
    public int getTissueLayerId(int index) {
      return tissueLayerId_.get(index);
    }

    public static final int START_DATE_FIELD_NUMBER = 4;
    private int startDate_;
    /**
     * <code>optional int32 start_date = 4;</code>
     */
    public boolean hasStartDate() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 start_date = 4;</code>
     */
    public int getStartDate() {
      return startDate_;
    }

    public static final int END_DATE_FIELD_NUMBER = 5;
    private int endDate_;
    /**
     * <code>optional int32 end_date = 5;</code>
     */
    public boolean hasEndDate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 end_date = 5;</code>
     */
    public int getEndDate() {
      return endDate_;
    }

    public static final int PART_FIELD_NUMBER = 6;
    private java.lang.Object part_;
    /**
     * <code>optional string part = 6;</code>
     */
    public boolean hasPart() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string part = 6;</code>
     */
    public java.lang.String getPart() {
      java.lang.Object ref = part_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          part_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string part = 6;</code>
     */
    public com.google.protobuf.ByteString
        getPartBytes() {
      java.lang.Object ref = part_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        part_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      patterns_ = java.util.Collections.emptyList();
      bodyPartId_ = java.util.Collections.emptyList();
      tissueLayerId_ = java.util.Collections.emptyList();
      startDate_ = 0;
      endDate_ = 0;
      part_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPatternsCount(); i++) {
        if (!getPatterns(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < patterns_.size(); i++) {
        output.writeMessage(1, patterns_.get(i));
      }
      for (int i = 0; i < bodyPartId_.size(); i++) {
        output.writeInt32(2, bodyPartId_.get(i));
      }
      for (int i = 0; i < tissueLayerId_.size(); i++) {
        output.writeInt32(3, tissueLayerId_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(4, startDate_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(5, endDate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(6, getPartBytes());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < patterns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, patterns_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bodyPartId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bodyPartId_.get(i));
        }
        size += dataSize;
        size += 1 * getBodyPartIdList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tissueLayerId_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(tissueLayerId_.get(i));
        }
        size += dataSize;
        size += 1 * getTissueLayerIdList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, startDate_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, endDate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getPartBytes());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        patterns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        bodyPartId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        tissueLayerId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        startDate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        endDate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        part_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          patterns_ = java.util.Collections.unmodifiableList(patterns_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.patterns_ = patterns_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          bodyPartId_ = java.util.Collections.unmodifiableList(bodyPartId_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bodyPartId_ = bodyPartId_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          tissueLayerId_ = java.util.Collections.unmodifiableList(tissueLayerId_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.tissueLayerId_ = tissueLayerId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startDate_ = startDate_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.endDate_ = endDate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.part_ = part_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.getDefaultInstance()) return this;
        if (!other.patterns_.isEmpty()) {
          if (patterns_.isEmpty()) {
            patterns_ = other.patterns_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePatternsIsMutable();
            patterns_.addAll(other.patterns_);
          }
          
        }
        if (!other.bodyPartId_.isEmpty()) {
          if (bodyPartId_.isEmpty()) {
            bodyPartId_ = other.bodyPartId_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBodyPartIdIsMutable();
            bodyPartId_.addAll(other.bodyPartId_);
          }
          
        }
        if (!other.tissueLayerId_.isEmpty()) {
          if (tissueLayerId_.isEmpty()) {
            tissueLayerId_ = other.tissueLayerId_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTissueLayerIdIsMutable();
            tissueLayerId_.addAll(other.tissueLayerId_);
          }
          
        }
        if (other.hasStartDate()) {
          setStartDate(other.getStartDate());
        }
        if (other.hasEndDate()) {
          setEndDate(other.getEndDate());
        }
        if (other.hasPart()) {
          bitField0_ |= 0x00000020;
          part_ = other.part_;
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPatternsCount(); i++) {
          if (!getPatterns(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> patterns_ =
        java.util.Collections.emptyList();
      private void ensurePatternsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          patterns_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor>(patterns_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> getPatternsList() {
        return java.util.Collections.unmodifiableList(patterns_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public int getPatternsCount() {
        return patterns_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor getPatterns(int index) {
        return patterns_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder setPatterns(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePatternsIsMutable();
        patterns_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder setPatterns(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.Builder builderForValue) {
        ensurePatternsIsMutable();
        patterns_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder addPatterns(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePatternsIsMutable();
        patterns_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder addPatterns(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePatternsIsMutable();
        patterns_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder addPatterns(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.Builder builderForValue) {
        ensurePatternsIsMutable();
        patterns_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder addPatterns(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor.Builder builderForValue) {
        ensurePatternsIsMutable();
        patterns_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder addAllPatterns(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PatternDescriptor> values) {
        ensurePatternsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, patterns_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder clearPatterns() {
        patterns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PatternDescriptor patterns = 1;</code>
       */
      public Builder removePatterns(int index) {
        ensurePatternsIsMutable();
        patterns_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> bodyPartId_ = java.util.Collections.emptyList();
      private void ensureBodyPartIdIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bodyPartId_ = new java.util.ArrayList<java.lang.Integer>(bodyPartId_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getBodyPartIdList() {
        return java.util.Collections.unmodifiableList(bodyPartId_);
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public int getBodyPartIdCount() {
        return bodyPartId_.size();
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public int getBodyPartId(int index) {
        return bodyPartId_.get(index);
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public Builder setBodyPartId(
          int index, int value) {
        ensureBodyPartIdIsMutable();
        bodyPartId_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public Builder addBodyPartId(int value) {
        ensureBodyPartIdIsMutable();
        bodyPartId_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public Builder addAllBodyPartId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBodyPartIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bodyPartId_);
        
        return this;
      }
      /**
       * <code>repeated int32 body_part_id = 2;</code>
       */
      public Builder clearBodyPartId() {
        bodyPartId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }

      private java.util.List<java.lang.Integer> tissueLayerId_ = java.util.Collections.emptyList();
      private void ensureTissueLayerIdIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          tissueLayerId_ = new java.util.ArrayList<java.lang.Integer>(tissueLayerId_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getTissueLayerIdList() {
        return java.util.Collections.unmodifiableList(tissueLayerId_);
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public int getTissueLayerIdCount() {
        return tissueLayerId_.size();
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public int getTissueLayerId(int index) {
        return tissueLayerId_.get(index);
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public Builder setTissueLayerId(
          int index, int value) {
        ensureTissueLayerIdIsMutable();
        tissueLayerId_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public Builder addTissueLayerId(int value) {
        ensureTissueLayerIdIsMutable();
        tissueLayerId_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public Builder addAllTissueLayerId(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTissueLayerIdIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tissueLayerId_);
        
        return this;
      }
      /**
       * <code>repeated int32 tissue_layer_id = 3;</code>
       */
      public Builder clearTissueLayerId() {
        tissueLayerId_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }

      private int startDate_ ;
      /**
       * <code>optional int32 start_date = 4;</code>
       */
      public boolean hasStartDate() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 start_date = 4;</code>
       */
      public int getStartDate() {
        return startDate_;
      }
      /**
       * <code>optional int32 start_date = 4;</code>
       */
      public Builder setStartDate(int value) {
        bitField0_ |= 0x00000008;
        startDate_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 start_date = 4;</code>
       */
      public Builder clearStartDate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        startDate_ = 0;
        
        return this;
      }

      private int endDate_ ;
      /**
       * <code>optional int32 end_date = 5;</code>
       */
      public boolean hasEndDate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 end_date = 5;</code>
       */
      public int getEndDate() {
        return endDate_;
      }
      /**
       * <code>optional int32 end_date = 5;</code>
       */
      public Builder setEndDate(int value) {
        bitField0_ |= 0x00000010;
        endDate_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 end_date = 5;</code>
       */
      public Builder clearEndDate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        endDate_ = 0;
        
        return this;
      }

      private java.lang.Object part_ = "";
      /**
       * <code>optional string part = 6;</code>
       */
      public boolean hasPart() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string part = 6;</code>
       */
      public java.lang.String getPart() {
        java.lang.Object ref = part_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            part_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string part = 6;</code>
       */
      public com.google.protobuf.ByteString
          getPartBytes() {
        java.lang.Object ref = part_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          part_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string part = 6;</code>
       */
      public Builder setPart(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        part_ = value;
        
        return this;
      }
      /**
       * <code>optional string part = 6;</code>
       */
      public Builder clearPart() {
        bitField0_ = (bitField0_ & ~0x00000020);
        part_ = getDefaultInstance().getPart();
        
        return this;
      }
      /**
       * <code>optional string part = 6;</code>
       */
      public Builder setPartBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        part_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw)
    }

    static {
      defaultInstance = new ColorModifierRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw)
  }

  public interface BodyPartLayerRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string layer_name = 1;</code>
     */
    boolean hasLayerName();
    /**
     * <code>optional string layer_name = 1;</code>
     */
    java.lang.String getLayerName();
    /**
     * <code>optional string layer_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getLayerNameBytes();

    /**
     * <code>optional int32 tissue_id = 2;</code>
     */
    boolean hasTissueId();
    /**
     * <code>optional int32 tissue_id = 2;</code>
     */
    int getTissueId();

    /**
     * <code>optional int32 layer_depth = 3;</code>
     */
    boolean hasLayerDepth();
    /**
     * <code>optional int32 layer_depth = 3;</code>
     */
    int getLayerDepth();

    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    java.util.List<java.lang.Integer> getBpModifiersList();
    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    int getBpModifiersCount();
    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    int getBpModifiers(int index);
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw}
   */
  public static final class BodyPartLayerRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw)
      BodyPartLayerRawOrBuilder {
    // Use BodyPartLayerRaw.newBuilder() to construct.
    private BodyPartLayerRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BodyPartLayerRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BodyPartLayerRaw defaultInstance;
    public static BodyPartLayerRaw getDefaultInstance() {
      return defaultInstance;
    }

    public BodyPartLayerRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BodyPartLayerRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              layerName_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              tissueId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              layerDepth_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                bpModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              bpModifiers_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                bpModifiers_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                bpModifiers_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          bpModifiers_ = java.util.Collections.unmodifiableList(bpModifiers_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BodyPartLayerRaw> PARSER =
        new com.google.protobuf.AbstractParser<BodyPartLayerRaw>() {
      public BodyPartLayerRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BodyPartLayerRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BodyPartLayerRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LAYER_NAME_FIELD_NUMBER = 1;
    private java.lang.Object layerName_;
    /**
     * <code>optional string layer_name = 1;</code>
     */
    public boolean hasLayerName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string layer_name = 1;</code>
     */
    public java.lang.String getLayerName() {
      java.lang.Object ref = layerName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          layerName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string layer_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLayerNameBytes() {
      java.lang.Object ref = layerName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        layerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TISSUE_ID_FIELD_NUMBER = 2;
    private int tissueId_;
    /**
     * <code>optional int32 tissue_id = 2;</code>
     */
    public boolean hasTissueId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 tissue_id = 2;</code>
     */
    public int getTissueId() {
      return tissueId_;
    }

    public static final int LAYER_DEPTH_FIELD_NUMBER = 3;
    private int layerDepth_;
    /**
     * <code>optional int32 layer_depth = 3;</code>
     */
    public boolean hasLayerDepth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 layer_depth = 3;</code>
     */
    public int getLayerDepth() {
      return layerDepth_;
    }

    public static final int BP_MODIFIERS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> bpModifiers_;
    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getBpModifiersList() {
      return bpModifiers_;
    }
    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    public int getBpModifiersCount() {
      return bpModifiers_.size();
    }
    /**
     * <code>repeated int32 bp_modifiers = 4;</code>
     */
    public int getBpModifiers(int index) {
      return bpModifiers_.get(index);
    }

    private void initFields() {
      layerName_ = "";
      tissueId_ = 0;
      layerDepth_ = 0;
      bpModifiers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getLayerNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, tissueId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, layerDepth_);
      }
      for (int i = 0; i < bpModifiers_.size(); i++) {
        output.writeInt32(4, bpModifiers_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getLayerNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, tissueId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, layerDepth_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bpModifiers_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(bpModifiers_.get(i));
        }
        size += dataSize;
        size += 1 * getBpModifiersList().size();
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        layerName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        tissueId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        layerDepth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        bpModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.layerName_ = layerName_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.tissueId_ = tissueId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.layerDepth_ = layerDepth_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          bpModifiers_ = java.util.Collections.unmodifiableList(bpModifiers_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.bpModifiers_ = bpModifiers_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.getDefaultInstance()) return this;
        if (other.hasLayerName()) {
          bitField0_ |= 0x00000001;
          layerName_ = other.layerName_;
          
        }
        if (other.hasTissueId()) {
          setTissueId(other.getTissueId());
        }
        if (other.hasLayerDepth()) {
          setLayerDepth(other.getLayerDepth());
        }
        if (!other.bpModifiers_.isEmpty()) {
          if (bpModifiers_.isEmpty()) {
            bpModifiers_ = other.bpModifiers_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBpModifiersIsMutable();
            bpModifiers_.addAll(other.bpModifiers_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object layerName_ = "";
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public boolean hasLayerName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public java.lang.String getLayerName() {
        java.lang.Object ref = layerName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            layerName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLayerNameBytes() {
        java.lang.Object ref = layerName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          layerName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public Builder setLayerName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        layerName_ = value;
        
        return this;
      }
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public Builder clearLayerName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        layerName_ = getDefaultInstance().getLayerName();
        
        return this;
      }
      /**
       * <code>optional string layer_name = 1;</code>
       */
      public Builder setLayerNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        layerName_ = value;
        
        return this;
      }

      private int tissueId_ ;
      /**
       * <code>optional int32 tissue_id = 2;</code>
       */
      public boolean hasTissueId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tissue_id = 2;</code>
       */
      public int getTissueId() {
        return tissueId_;
      }
      /**
       * <code>optional int32 tissue_id = 2;</code>
       */
      public Builder setTissueId(int value) {
        bitField0_ |= 0x00000002;
        tissueId_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 tissue_id = 2;</code>
       */
      public Builder clearTissueId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        tissueId_ = 0;
        
        return this;
      }

      private int layerDepth_ ;
      /**
       * <code>optional int32 layer_depth = 3;</code>
       */
      public boolean hasLayerDepth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 layer_depth = 3;</code>
       */
      public int getLayerDepth() {
        return layerDepth_;
      }
      /**
       * <code>optional int32 layer_depth = 3;</code>
       */
      public Builder setLayerDepth(int value) {
        bitField0_ |= 0x00000004;
        layerDepth_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 layer_depth = 3;</code>
       */
      public Builder clearLayerDepth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        layerDepth_ = 0;
        
        return this;
      }

      private java.util.List<java.lang.Integer> bpModifiers_ = java.util.Collections.emptyList();
      private void ensureBpModifiersIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          bpModifiers_ = new java.util.ArrayList<java.lang.Integer>(bpModifiers_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getBpModifiersList() {
        return java.util.Collections.unmodifiableList(bpModifiers_);
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public int getBpModifiersCount() {
        return bpModifiers_.size();
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public int getBpModifiers(int index) {
        return bpModifiers_.get(index);
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public Builder setBpModifiers(
          int index, int value) {
        ensureBpModifiersIsMutable();
        bpModifiers_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public Builder addBpModifiers(int value) {
        ensureBpModifiersIsMutable();
        bpModifiers_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public Builder addAllBpModifiers(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBpModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bpModifiers_);
        
        return this;
      }
      /**
       * <code>repeated int32 bp_modifiers = 4;</code>
       */
      public Builder clearBpModifiers() {
        bpModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw)
    }

    static {
      defaultInstance = new BodyPartLayerRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw)
  }

  public interface BodyPartRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string token = 1;</code>
     */
    boolean hasToken();
    /**
     * <code>optional string token = 1;</code>
     */
    java.lang.String getToken();
    /**
     * <code>optional string token = 1;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();

    /**
     * <code>optional string category = 2;</code>
     */
    boolean hasCategory();
    /**
     * <code>optional string category = 2;</code>
     */
    java.lang.String getCategory();
    /**
     * <code>optional string category = 2;</code>
     */
    com.google.protobuf.ByteString
        getCategoryBytes();

    /**
     * <code>optional int32 parent = 3;</code>
     */
    boolean hasParent();
    /**
     * <code>optional int32 parent = 3;</code>
     */
    int getParent();

    /**
     * <code>repeated bool flags = 4;</code>
     */
    java.util.List<java.lang.Boolean> getFlagsList();
    /**
     * <code>repeated bool flags = 4;</code>
     */
    int getFlagsCount();
    /**
     * <code>repeated bool flags = 4;</code>
     */
    boolean getFlags(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> 
        getLayersList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw getLayers(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    int getLayersCount();

    /**
     * <code>optional int32 relsize = 6;</code>
     */
    boolean hasRelsize();
    /**
     * <code>optional int32 relsize = 6;</code>
     */
    int getRelsize();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw}
   */
  public static final class BodyPartRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw)
      BodyPartRawOrBuilder {
    // Use BodyPartRaw.newBuilder() to construct.
    private BodyPartRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BodyPartRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BodyPartRaw defaultInstance;
    public static BodyPartRaw getDefaultInstance() {
      return defaultInstance;
    }

    public BodyPartRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BodyPartRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              token_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              category_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              parent_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                flags_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              flags_.add(input.readBool());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                flags_ = new java.util.ArrayList<java.lang.Boolean>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                flags_.add(input.readBool());
              }
              input.popLimit(limit);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                layers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw>();
                mutable_bitField0_ |= 0x00000010;
              }
              layers_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000008;
              relsize_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = java.util.Collections.unmodifiableList(flags_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BodyPartRaw> PARSER =
        new com.google.protobuf.AbstractParser<BodyPartRaw>() {
      public BodyPartRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BodyPartRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BodyPartRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TOKEN_FIELD_NUMBER = 1;
    private java.lang.Object token_;
    /**
     * <code>optional string token = 1;</code>
     */
    public boolean hasToken() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string token = 1;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          token_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string token = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CATEGORY_FIELD_NUMBER = 2;
    private java.lang.Object category_;
    /**
     * <code>optional string category = 2;</code>
     */
    public boolean hasCategory() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string category = 2;</code>
     */
    public java.lang.String getCategory() {
      java.lang.Object ref = category_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          category_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string category = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCategoryBytes() {
      java.lang.Object ref = category_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        category_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARENT_FIELD_NUMBER = 3;
    private int parent_;
    /**
     * <code>optional int32 parent = 3;</code>
     */
    public boolean hasParent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 parent = 3;</code>
     */
    public int getParent() {
      return parent_;
    }

    public static final int FLAGS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Boolean> flags_;
    /**
     * <code>repeated bool flags = 4;</code>
     */
    public java.util.List<java.lang.Boolean>
        getFlagsList() {
      return flags_;
    }
    /**
     * <code>repeated bool flags = 4;</code>
     */
    public int getFlagsCount() {
      return flags_.size();
    }
    /**
     * <code>repeated bool flags = 4;</code>
     */
    public boolean getFlags(int index) {
      return flags_.get(index);
    }

    public static final int LAYERS_FIELD_NUMBER = 5;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> layers_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRawOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRawOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    public static final int RELSIZE_FIELD_NUMBER = 6;
    private int relsize_;
    /**
     * <code>optional int32 relsize = 6;</code>
     */
    public boolean hasRelsize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 relsize = 6;</code>
     */
    public int getRelsize() {
      return relsize_;
    }

    private void initFields() {
      token_ = "";
      category_ = "";
      parent_ = 0;
      flags_ = java.util.Collections.emptyList();
      layers_ = java.util.Collections.emptyList();
      relsize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTokenBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getCategoryBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, parent_);
      }
      for (int i = 0; i < flags_.size(); i++) {
        output.writeBool(4, flags_.get(i));
      }
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(5, layers_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(6, relsize_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTokenBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getCategoryBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, parent_);
      }
      {
        int dataSize = 0;
        dataSize = 1 * getFlagsList().size();
        size += dataSize;
        size += 1 * getFlagsList().size();
      }
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, layers_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, relsize_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        token_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        category_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        parent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        flags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        relsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.token_ = token_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.category_ = category_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.parent_ = parent_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = java.util.Collections.unmodifiableList(flags_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.flags_ = flags_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.layers_ = layers_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.relsize_ = relsize_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.getDefaultInstance()) return this;
        if (other.hasToken()) {
          bitField0_ |= 0x00000001;
          token_ = other.token_;
          
        }
        if (other.hasCategory()) {
          bitField0_ |= 0x00000002;
          category_ = other.category_;
          
        }
        if (other.hasParent()) {
          setParent(other.getParent());
        }
        if (!other.flags_.isEmpty()) {
          if (flags_.isEmpty()) {
            flags_ = other.flags_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFlagsIsMutable();
            flags_.addAll(other.flags_);
          }
          
        }
        if (!other.layers_.isEmpty()) {
          if (layers_.isEmpty()) {
            layers_ = other.layers_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureLayersIsMutable();
            layers_.addAll(other.layers_);
          }
          
        }
        if (other.hasRelsize()) {
          setRelsize(other.getRelsize());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object token_ = "";
      /**
       * <code>optional string token = 1;</code>
       */
      public boolean hasToken() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string token = 1;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            token_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string token = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string token = 1;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value;
        
        return this;
      }
      /**
       * <code>optional string token = 1;</code>
       */
      public Builder clearToken() {
        bitField0_ = (bitField0_ & ~0x00000001);
        token_ = getDefaultInstance().getToken();
        
        return this;
      }
      /**
       * <code>optional string token = 1;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        token_ = value;
        
        return this;
      }

      private java.lang.Object category_ = "";
      /**
       * <code>optional string category = 2;</code>
       */
      public boolean hasCategory() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string category = 2;</code>
       */
      public java.lang.String getCategory() {
        java.lang.Object ref = category_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            category_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string category = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCategoryBytes() {
        java.lang.Object ref = category_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          category_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string category = 2;</code>
       */
      public Builder setCategory(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        category_ = value;
        
        return this;
      }
      /**
       * <code>optional string category = 2;</code>
       */
      public Builder clearCategory() {
        bitField0_ = (bitField0_ & ~0x00000002);
        category_ = getDefaultInstance().getCategory();
        
        return this;
      }
      /**
       * <code>optional string category = 2;</code>
       */
      public Builder setCategoryBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        category_ = value;
        
        return this;
      }

      private int parent_ ;
      /**
       * <code>optional int32 parent = 3;</code>
       */
      public boolean hasParent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 parent = 3;</code>
       */
      public int getParent() {
        return parent_;
      }
      /**
       * <code>optional int32 parent = 3;</code>
       */
      public Builder setParent(int value) {
        bitField0_ |= 0x00000004;
        parent_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 parent = 3;</code>
       */
      public Builder clearParent() {
        bitField0_ = (bitField0_ & ~0x00000004);
        parent_ = 0;
        
        return this;
      }

      private java.util.List<java.lang.Boolean> flags_ = java.util.Collections.emptyList();
      private void ensureFlagsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          flags_ = new java.util.ArrayList<java.lang.Boolean>(flags_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public java.util.List<java.lang.Boolean>
          getFlagsList() {
        return java.util.Collections.unmodifiableList(flags_);
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public int getFlagsCount() {
        return flags_.size();
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public boolean getFlags(int index) {
        return flags_.get(index);
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public Builder setFlags(
          int index, boolean value) {
        ensureFlagsIsMutable();
        flags_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public Builder addFlags(boolean value) {
        ensureFlagsIsMutable();
        flags_.add(value);
        
        return this;
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public Builder addAllFlags(
          java.lang.Iterable<? extends java.lang.Boolean> values) {
        ensureFlagsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, flags_);
        
        return this;
      }
      /**
       * <code>repeated bool flags = 4;</code>
       */
      public Builder clearFlags() {
        flags_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          layers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw>(layers_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> getLayersList() {
        return java.util.Collections.unmodifiableList(layers_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public int getLayersCount() {
        return layers_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw getLayers(int index) {
        return layers_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder setLayers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder setLayers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder addLayers(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder addLayers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder addLayers(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder addLayers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartLayerRaw> values) {
        ensureLayersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, layers_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder clearLayers() {
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartLayerRaw layers = 5;</code>
       */
      public Builder removeLayers(int index) {
        ensureLayersIsMutable();
        layers_.remove(index);

        return this;
      }

      private int relsize_ ;
      /**
       * <code>optional int32 relsize = 6;</code>
       */
      public boolean hasRelsize() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 relsize = 6;</code>
       */
      public int getRelsize() {
        return relsize_;
      }
      /**
       * <code>optional int32 relsize = 6;</code>
       */
      public Builder setRelsize(int value) {
        bitField0_ |= 0x00000020;
        relsize_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 relsize = 6;</code>
       */
      public Builder clearRelsize() {
        bitField0_ = (bitField0_ & ~0x00000020);
        relsize_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw)
    }

    static {
      defaultInstance = new BodyPartRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw)
  }

  public interface BpAppearanceModifierOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional string type = 1;</code>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 1;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional int32 mod_min = 2;</code>
     */
    boolean hasModMin();
    /**
     * <code>optional int32 mod_min = 2;</code>
     */
    int getModMin();

    /**
     * <code>optional int32 mod_max = 3;</code>
     */
    boolean hasModMax();
    /**
     * <code>optional int32 mod_max = 3;</code>
     */
    int getModMax();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier}
   */
  public static final class BpAppearanceModifier extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier)
      BpAppearanceModifierOrBuilder {
    // Use BpAppearanceModifier.newBuilder() to construct.
    private BpAppearanceModifier(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BpAppearanceModifier(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final BpAppearanceModifier defaultInstance;
    public static BpAppearanceModifier getDefaultInstance() {
      return defaultInstance;
    }

    public BpAppearanceModifier getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private BpAppearanceModifier(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              type_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              modMin_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              modMax_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<BpAppearanceModifier> PARSER =
        new com.google.protobuf.AbstractParser<BpAppearanceModifier>() {
      public BpAppearanceModifier parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BpAppearanceModifier(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BpAppearanceModifier> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string type = 1;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MOD_MIN_FIELD_NUMBER = 2;
    private int modMin_;
    /**
     * <code>optional int32 mod_min = 2;</code>
     */
    public boolean hasModMin() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 mod_min = 2;</code>
     */
    public int getModMin() {
      return modMin_;
    }

    public static final int MOD_MAX_FIELD_NUMBER = 3;
    private int modMax_;
    /**
     * <code>optional int32 mod_max = 3;</code>
     */
    public boolean hasModMax() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 mod_max = 3;</code>
     */
    public int getModMax() {
      return modMax_;
    }

    private void initFields() {
      type_ = "";
      modMin_ = 0;
      modMax_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, modMin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, modMax_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, modMin_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, modMax_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifierOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        modMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        modMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.modMin_ = modMin_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.modMax_ = modMax_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.getDefaultInstance()) return this;
        if (other.hasType()) {
          bitField0_ |= 0x00000001;
          type_ = other.type_;
          
        }
        if (other.hasModMin()) {
          setModMin(other.getModMin());
        }
        if (other.hasModMax()) {
          setModMax(other.getModMax());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string type = 1;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 1;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>optional string type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = getDefaultInstance().getType();
        
        return this;
      }
      /**
       * <code>optional string type = 1;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }

      private int modMin_ ;
      /**
       * <code>optional int32 mod_min = 2;</code>
       */
      public boolean hasModMin() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 mod_min = 2;</code>
       */
      public int getModMin() {
        return modMin_;
      }
      /**
       * <code>optional int32 mod_min = 2;</code>
       */
      public Builder setModMin(int value) {
        bitField0_ |= 0x00000002;
        modMin_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 mod_min = 2;</code>
       */
      public Builder clearModMin() {
        bitField0_ = (bitField0_ & ~0x00000002);
        modMin_ = 0;
        
        return this;
      }

      private int modMax_ ;
      /**
       * <code>optional int32 mod_max = 3;</code>
       */
      public boolean hasModMax() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 mod_max = 3;</code>
       */
      public int getModMax() {
        return modMax_;
      }
      /**
       * <code>optional int32 mod_max = 3;</code>
       */
      public Builder setModMax(int value) {
        bitField0_ |= 0x00000004;
        modMax_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 mod_max = 3;</code>
       */
      public Builder clearModMax() {
        bitField0_ = (bitField0_ & ~0x00000004);
        modMax_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier)
    }

    static {
      defaultInstance = new BpAppearanceModifier(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier)
  }

  public interface TissueRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.TissueRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
     */
    boolean hasMaterial();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial();

    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    boolean hasSubordinateToTissue();
    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    java.lang.String getSubordinateToTissue();
    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    com.google.protobuf.ByteString
        getSubordinateToTissueBytes();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TissueRaw}
   */
  public static final class TissueRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.TissueRaw)
      TissueRawOrBuilder {
    // Use TissueRaw.newBuilder() to construct.
    private TissueRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TissueRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final TissueRaw defaultInstance;
    public static TissueRaw getDefaultInstance() {
      return defaultInstance;
    }

    public TissueRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private TissueRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              id_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              name_ = bs;
              break;
            }
            case 26: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = material_.toBuilder();
              }
              material_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(material_);
                material_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              subordinateToTissue_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TissueRaw> PARSER =
        new com.google.protobuf.AbstractParser<TissueRaw>() {
      public TissueRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TissueRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TissueRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MATERIAL_FIELD_NUMBER = 3;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair material_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
     */
    public boolean hasMaterial() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial() {
      return material_;
    }

    public static final int SUBORDINATE_TO_TISSUE_FIELD_NUMBER = 4;
    private java.lang.Object subordinateToTissue_;
    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    public boolean hasSubordinateToTissue() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    public java.lang.String getSubordinateToTissue() {
      java.lang.Object ref = subordinateToTissue_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          subordinateToTissue_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string subordinate_to_tissue = 4;</code>
     */
    public com.google.protobuf.ByteString
        getSubordinateToTissueBytes() {
      java.lang.Object ref = subordinateToTissue_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        subordinateToTissue_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      id_ = "";
      name_ = "";
      material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      subordinateToTissue_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasMaterial()) {
        if (!getMaterial().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, material_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getSubordinateToTissueBytes());
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, material_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getSubordinateToTissueBytes());
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TissueRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.TissueRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        subordinateToTissue_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.material_ = material_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.subordinateToTissue_ = subordinateToTissue_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.getDefaultInstance()) return this;
        if (other.hasId()) {
          bitField0_ |= 0x00000001;
          id_ = other.id_;
          
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          
        }
        if (other.hasMaterial()) {
          mergeMaterial(other.getMaterial());
        }
        if (other.hasSubordinateToTissue()) {
          bitField0_ |= 0x00000008;
          subordinateToTissue_ = other.subordinateToTissue_;
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasMaterial()) {
          if (!getMaterial().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public boolean hasMaterial() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMaterial() {
        return material_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public Builder setMaterial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        material_ = value;

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public Builder setMaterial(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        material_ = builderForValue.build();

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public Builder mergeMaterial(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            material_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) {
          material_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder(material_).mergeFrom(value).buildPartial();
        } else {
          material_ = value;
        }

        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair material = 3;</code>
       */
      public Builder clearMaterial() {
        material_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      private java.lang.Object subordinateToTissue_ = "";
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public boolean hasSubordinateToTissue() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public java.lang.String getSubordinateToTissue() {
        java.lang.Object ref = subordinateToTissue_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            subordinateToTissue_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public com.google.protobuf.ByteString
          getSubordinateToTissueBytes() {
        java.lang.Object ref = subordinateToTissue_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          subordinateToTissue_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public Builder setSubordinateToTissue(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        subordinateToTissue_ = value;
        
        return this;
      }
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public Builder clearSubordinateToTissue() {
        bitField0_ = (bitField0_ & ~0x00000008);
        subordinateToTissue_ = getDefaultInstance().getSubordinateToTissue();
        
        return this;
      }
      /**
       * <code>optional string subordinate_to_tissue = 4;</code>
       */
      public Builder setSubordinateToTissueBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        subordinateToTissue_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.TissueRaw)
    }

    static {
      defaultInstance = new TissueRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.TissueRaw)
  }

  public interface CasteRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.CasteRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional int32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>optional string caste_id = 2;</code>
     */
    boolean hasCasteId();
    /**
     * <code>optional string caste_id = 2;</code>
     */
    java.lang.String getCasteId();
    /**
     * <code>optional string caste_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getCasteIdBytes();

    /**
     * <code>repeated string caste_name = 3;</code>
     */
    com.google.protobuf.ProtocolStringList
        getCasteNameList();
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    int getCasteNameCount();
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    java.lang.String getCasteName(int index);
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    com.google.protobuf.ByteString
        getCasteNameBytes(int index);

    /**
     * <code>repeated string baby_name = 4;</code>
     */
    com.google.protobuf.ProtocolStringList
        getBabyNameList();
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    int getBabyNameCount();
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    java.lang.String getBabyName(int index);
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    com.google.protobuf.ByteString
        getBabyNameBytes(int index);

    /**
     * <code>repeated string child_name = 5;</code>
     */
    com.google.protobuf.ProtocolStringList
        getChildNameList();
    /**
     * <code>repeated string child_name = 5;</code>
     */
    int getChildNameCount();
    /**
     * <code>repeated string child_name = 5;</code>
     */
    java.lang.String getChildName(int index);
    /**
     * <code>repeated string child_name = 5;</code>
     */
    com.google.protobuf.ByteString
        getChildNameBytes(int index);

    /**
     * <code>optional int32 gender = 6;</code>
     */
    boolean hasGender();
    /**
     * <code>optional int32 gender = 6;</code>
     */
    int getGender();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> 
        getBodyPartsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw getBodyParts(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    int getBodyPartsCount();

    /**
     * <code>optional int32 total_relsize = 8;</code>
     */
    boolean hasTotalRelsize();
    /**
     * <code>optional int32 total_relsize = 8;</code>
     */
    int getTotalRelsize();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> 
        getModifiersList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getModifiers(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    int getModifiersCount();

    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    java.util.List<java.lang.Integer> getModifierIdxList();
    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    int getModifierIdxCount();
    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    int getModifierIdx(int index);

    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    java.util.List<java.lang.Integer> getPartIdxList();
    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    int getPartIdxCount();
    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    int getPartIdx(int index);

    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    java.util.List<java.lang.Integer> getLayerIdxList();
    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    int getLayerIdxCount();
    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    int getLayerIdx(int index);

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> 
        getBodyAppearanceModifiersList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getBodyAppearanceModifiers(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    int getBodyAppearanceModifiersCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> 
        getColorModifiersList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw getColorModifiers(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    int getColorModifiersCount();

    /**
     * <code>optional string description = 15;</code>
     */
    boolean hasDescription();
    /**
     * <code>optional string description = 15;</code>
     */
    java.lang.String getDescription();
    /**
     * <code>optional string description = 15;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>optional int32 adult_size = 16;</code>
     */
    boolean hasAdultSize();
    /**
     * <code>optional int32 adult_size = 16;</code>
     */
    int getAdultSize();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CasteRaw}
   */
  public static final class CasteRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.CasteRaw)
      CasteRawOrBuilder {
    // Use CasteRaw.newBuilder() to construct.
    private CasteRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CasteRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final CasteRaw defaultInstance;
    public static CasteRaw getDefaultInstance() {
      return defaultInstance;
    }

    public CasteRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private CasteRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              casteId_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                casteName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              casteName_.add(bs);
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                babyName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              babyName_.add(bs);
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                childName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              childName_.add(bs);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              gender_ = input.readInt32();
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                bodyParts_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw>();
                mutable_bitField0_ |= 0x00000040;
              }
              bodyParts_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.PARSER, extensionRegistry));
              break;
            }
            case 64: {
              bitField0_ |= 0x00000008;
              totalRelsize_ = input.readInt32();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                modifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier>();
                mutable_bitField0_ |= 0x00000100;
              }
              modifiers_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.PARSER, extensionRegistry));
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                modifierIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              modifierIdx_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                modifierIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                modifierIdx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                partIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              partIdx_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                partIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                partIdx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                layerIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              layerIdx_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                layerIdx_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                layerIdx_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 106: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                bodyAppearanceModifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier>();
                mutable_bitField0_ |= 0x00001000;
              }
              bodyAppearanceModifiers_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.PARSER, extensionRegistry));
              break;
            }
            case 114: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                colorModifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw>();
                mutable_bitField0_ |= 0x00002000;
              }
              colorModifiers_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.PARSER, extensionRegistry));
              break;
            }
            case 122: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              description_ = bs;
              break;
            }
            case 128: {
              bitField0_ |= 0x00000020;
              adultSize_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          casteName_ = casteName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          babyName_ = babyName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          childName_ = childName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          bodyParts_ = java.util.Collections.unmodifiableList(bodyParts_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          modifiers_ = java.util.Collections.unmodifiableList(modifiers_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          modifierIdx_ = java.util.Collections.unmodifiableList(modifierIdx_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          partIdx_ = java.util.Collections.unmodifiableList(partIdx_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          layerIdx_ = java.util.Collections.unmodifiableList(layerIdx_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          bodyAppearanceModifiers_ = java.util.Collections.unmodifiableList(bodyAppearanceModifiers_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          colorModifiers_ = java.util.Collections.unmodifiableList(colorModifiers_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CasteRaw> PARSER =
        new com.google.protobuf.AbstractParser<CasteRaw>() {
      public CasteRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CasteRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CasteRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int CASTE_ID_FIELD_NUMBER = 2;
    private java.lang.Object casteId_;
    /**
     * <code>optional string caste_id = 2;</code>
     */
    public boolean hasCasteId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string caste_id = 2;</code>
     */
    public java.lang.String getCasteId() {
      java.lang.Object ref = casteId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          casteId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string caste_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCasteIdBytes() {
      java.lang.Object ref = casteId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        casteId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CASTE_NAME_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList casteName_;
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCasteNameList() {
      return casteName_;
    }
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    public int getCasteNameCount() {
      return casteName_.size();
    }
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    public java.lang.String getCasteName(int index) {
      return casteName_.get(index);
    }
    /**
     * <code>repeated string caste_name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCasteNameBytes(int index) {
      return casteName_.getByteString(index);
    }

    public static final int BABY_NAME_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList babyName_;
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getBabyNameList() {
      return babyName_;
    }
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    public int getBabyNameCount() {
      return babyName_.size();
    }
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    public java.lang.String getBabyName(int index) {
      return babyName_.get(index);
    }
    /**
     * <code>repeated string baby_name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getBabyNameBytes(int index) {
      return babyName_.getByteString(index);
    }

    public static final int CHILD_NAME_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList childName_;
    /**
     * <code>repeated string child_name = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getChildNameList() {
      return childName_;
    }
    /**
     * <code>repeated string child_name = 5;</code>
     */
    public int getChildNameCount() {
      return childName_.size();
    }
    /**
     * <code>repeated string child_name = 5;</code>
     */
    public java.lang.String getChildName(int index) {
      return childName_.get(index);
    }
    /**
     * <code>repeated string child_name = 5;</code>
     */
    public com.google.protobuf.ByteString
        getChildNameBytes(int index) {
      return childName_.getByteString(index);
    }

    public static final int GENDER_FIELD_NUMBER = 6;
    private int gender_;
    /**
     * <code>optional int32 gender = 6;</code>
     */
    public boolean hasGender() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 gender = 6;</code>
     */
    public int getGender() {
      return gender_;
    }

    public static final int BODY_PARTS_FIELD_NUMBER = 7;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> bodyParts_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> getBodyPartsList() {
      return bodyParts_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRawOrBuilder> 
        getBodyPartsOrBuilderList() {
      return bodyParts_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    public int getBodyPartsCount() {
      return bodyParts_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw getBodyParts(int index) {
      return bodyParts_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRawOrBuilder getBodyPartsOrBuilder(
        int index) {
      return bodyParts_.get(index);
    }

    public static final int TOTAL_RELSIZE_FIELD_NUMBER = 8;
    private int totalRelsize_;
    /**
     * <code>optional int32 total_relsize = 8;</code>
     */
    public boolean hasTotalRelsize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 total_relsize = 8;</code>
     */
    public int getTotalRelsize() {
      return totalRelsize_;
    }

    public static final int MODIFIERS_FIELD_NUMBER = 9;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> modifiers_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> getModifiersList() {
      return modifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifierOrBuilder> 
        getModifiersOrBuilderList() {
      return modifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    public int getModifiersCount() {
      return modifiers_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getModifiers(int index) {
      return modifiers_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifierOrBuilder getModifiersOrBuilder(
        int index) {
      return modifiers_.get(index);
    }

    public static final int MODIFIER_IDX_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> modifierIdx_;
    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getModifierIdxList() {
      return modifierIdx_;
    }
    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    public int getModifierIdxCount() {
      return modifierIdx_.size();
    }
    /**
     * <code>repeated int32 modifier_idx = 10;</code>
     */
    public int getModifierIdx(int index) {
      return modifierIdx_.get(index);
    }

    public static final int PART_IDX_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> partIdx_;
    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    public java.util.List<java.lang.Integer>
        getPartIdxList() {
      return partIdx_;
    }
    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    public int getPartIdxCount() {
      return partIdx_.size();
    }
    /**
     * <code>repeated int32 part_idx = 11;</code>
     */
    public int getPartIdx(int index) {
      return partIdx_.get(index);
    }

    public static final int LAYER_IDX_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> layerIdx_;
    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    public java.util.List<java.lang.Integer>
        getLayerIdxList() {
      return layerIdx_;
    }
    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    public int getLayerIdxCount() {
      return layerIdx_.size();
    }
    /**
     * <code>repeated int32 layer_idx = 12;</code>
     */
    public int getLayerIdx(int index) {
      return layerIdx_.get(index);
    }

    public static final int BODY_APPEARANCE_MODIFIERS_FIELD_NUMBER = 13;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> bodyAppearanceModifiers_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> getBodyAppearanceModifiersList() {
      return bodyAppearanceModifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifierOrBuilder> 
        getBodyAppearanceModifiersOrBuilderList() {
      return bodyAppearanceModifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    public int getBodyAppearanceModifiersCount() {
      return bodyAppearanceModifiers_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getBodyAppearanceModifiers(int index) {
      return bodyAppearanceModifiers_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifierOrBuilder getBodyAppearanceModifiersOrBuilder(
        int index) {
      return bodyAppearanceModifiers_.get(index);
    }

    public static final int COLOR_MODIFIERS_FIELD_NUMBER = 14;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> colorModifiers_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> getColorModifiersList() {
      return colorModifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRawOrBuilder> 
        getColorModifiersOrBuilderList() {
      return colorModifiers_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    public int getColorModifiersCount() {
      return colorModifiers_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw getColorModifiers(int index) {
      return colorModifiers_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRawOrBuilder getColorModifiersOrBuilder(
        int index) {
      return colorModifiers_.get(index);
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 15;
    private java.lang.Object description_;
    /**
     * <code>optional string description = 15;</code>
     */
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string description = 15;</code>
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          description_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string description = 15;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ADULT_SIZE_FIELD_NUMBER = 16;
    private int adultSize_;
    /**
     * <code>optional int32 adult_size = 16;</code>
     */
    public boolean hasAdultSize() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 adult_size = 16;</code>
     */
    public int getAdultSize() {
      return adultSize_;
    }

    private void initFields() {
      index_ = 0;
      casteId_ = "";
      casteName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      babyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      childName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      gender_ = 0;
      bodyParts_ = java.util.Collections.emptyList();
      totalRelsize_ = 0;
      modifiers_ = java.util.Collections.emptyList();
      modifierIdx_ = java.util.Collections.emptyList();
      partIdx_ = java.util.Collections.emptyList();
      layerIdx_ = java.util.Collections.emptyList();
      bodyAppearanceModifiers_ = java.util.Collections.emptyList();
      colorModifiers_ = java.util.Collections.emptyList();
      description_ = "";
      adultSize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getColorModifiersCount(); i++) {
        if (!getColorModifiers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getCasteIdBytes());
      }
      for (int i = 0; i < casteName_.size(); i++) {
        output.writeBytes(3, casteName_.getByteString(i));
      }
      for (int i = 0; i < babyName_.size(); i++) {
        output.writeBytes(4, babyName_.getByteString(i));
      }
      for (int i = 0; i < childName_.size(); i++) {
        output.writeBytes(5, childName_.getByteString(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, gender_);
      }
      for (int i = 0; i < bodyParts_.size(); i++) {
        output.writeMessage(7, bodyParts_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(8, totalRelsize_);
      }
      for (int i = 0; i < modifiers_.size(); i++) {
        output.writeMessage(9, modifiers_.get(i));
      }
      for (int i = 0; i < modifierIdx_.size(); i++) {
        output.writeInt32(10, modifierIdx_.get(i));
      }
      for (int i = 0; i < partIdx_.size(); i++) {
        output.writeInt32(11, partIdx_.get(i));
      }
      for (int i = 0; i < layerIdx_.size(); i++) {
        output.writeInt32(12, layerIdx_.get(i));
      }
      for (int i = 0; i < bodyAppearanceModifiers_.size(); i++) {
        output.writeMessage(13, bodyAppearanceModifiers_.get(i));
      }
      for (int i = 0; i < colorModifiers_.size(); i++) {
        output.writeMessage(14, colorModifiers_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(15, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(16, adultSize_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getCasteIdBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < casteName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(casteName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getCasteNameList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < babyName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(babyName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getBabyNameList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < childName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(childName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getChildNameList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, gender_);
      }
      for (int i = 0; i < bodyParts_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, bodyParts_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, totalRelsize_);
      }
      for (int i = 0; i < modifiers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, modifiers_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < modifierIdx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(modifierIdx_.get(i));
        }
        size += dataSize;
        size += 1 * getModifierIdxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < partIdx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(partIdx_.get(i));
        }
        size += dataSize;
        size += 1 * getPartIdxList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < layerIdx_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(layerIdx_.get(i));
        }
        size += dataSize;
        size += 1 * getLayerIdxList().size();
      }
      for (int i = 0; i < bodyAppearanceModifiers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, bodyAppearanceModifiers_.get(i));
      }
      for (int i = 0; i < colorModifiers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, colorModifiers_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, getDescriptionBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, adultSize_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CasteRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.CasteRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        casteId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        casteName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        babyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        childName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        gender_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        bodyParts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        totalRelsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        modifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        modifierIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        partIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        layerIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        bodyAppearanceModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        colorModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        description_ = "";
        bitField0_ = (bitField0_ & ~0x00004000);
        adultSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.casteId_ = casteId_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          casteName_ = casteName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.casteName_ = casteName_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          babyName_ = babyName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.babyName_ = babyName_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          childName_ = childName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.childName_ = childName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gender_ = gender_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          bodyParts_ = java.util.Collections.unmodifiableList(bodyParts_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.bodyParts_ = bodyParts_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000008;
        }
        result.totalRelsize_ = totalRelsize_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          modifiers_ = java.util.Collections.unmodifiableList(modifiers_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.modifiers_ = modifiers_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          modifierIdx_ = java.util.Collections.unmodifiableList(modifierIdx_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.modifierIdx_ = modifierIdx_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          partIdx_ = java.util.Collections.unmodifiableList(partIdx_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.partIdx_ = partIdx_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          layerIdx_ = java.util.Collections.unmodifiableList(layerIdx_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.layerIdx_ = layerIdx_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          bodyAppearanceModifiers_ = java.util.Collections.unmodifiableList(bodyAppearanceModifiers_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.bodyAppearanceModifiers_ = bodyAppearanceModifiers_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          colorModifiers_ = java.util.Collections.unmodifiableList(colorModifiers_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.colorModifiers_ = colorModifiers_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000010;
        }
        result.description_ = description_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000020;
        }
        result.adultSize_ = adultSize_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasCasteId()) {
          bitField0_ |= 0x00000002;
          casteId_ = other.casteId_;
          
        }
        if (!other.casteName_.isEmpty()) {
          if (casteName_.isEmpty()) {
            casteName_ = other.casteName_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCasteNameIsMutable();
            casteName_.addAll(other.casteName_);
          }
          
        }
        if (!other.babyName_.isEmpty()) {
          if (babyName_.isEmpty()) {
            babyName_ = other.babyName_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureBabyNameIsMutable();
            babyName_.addAll(other.babyName_);
          }
          
        }
        if (!other.childName_.isEmpty()) {
          if (childName_.isEmpty()) {
            childName_ = other.childName_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureChildNameIsMutable();
            childName_.addAll(other.childName_);
          }
          
        }
        if (other.hasGender()) {
          setGender(other.getGender());
        }
        if (!other.bodyParts_.isEmpty()) {
          if (bodyParts_.isEmpty()) {
            bodyParts_ = other.bodyParts_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureBodyPartsIsMutable();
            bodyParts_.addAll(other.bodyParts_);
          }
          
        }
        if (other.hasTotalRelsize()) {
          setTotalRelsize(other.getTotalRelsize());
        }
        if (!other.modifiers_.isEmpty()) {
          if (modifiers_.isEmpty()) {
            modifiers_ = other.modifiers_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureModifiersIsMutable();
            modifiers_.addAll(other.modifiers_);
          }
          
        }
        if (!other.modifierIdx_.isEmpty()) {
          if (modifierIdx_.isEmpty()) {
            modifierIdx_ = other.modifierIdx_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureModifierIdxIsMutable();
            modifierIdx_.addAll(other.modifierIdx_);
          }
          
        }
        if (!other.partIdx_.isEmpty()) {
          if (partIdx_.isEmpty()) {
            partIdx_ = other.partIdx_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensurePartIdxIsMutable();
            partIdx_.addAll(other.partIdx_);
          }
          
        }
        if (!other.layerIdx_.isEmpty()) {
          if (layerIdx_.isEmpty()) {
            layerIdx_ = other.layerIdx_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureLayerIdxIsMutable();
            layerIdx_.addAll(other.layerIdx_);
          }
          
        }
        if (!other.bodyAppearanceModifiers_.isEmpty()) {
          if (bodyAppearanceModifiers_.isEmpty()) {
            bodyAppearanceModifiers_ = other.bodyAppearanceModifiers_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureBodyAppearanceModifiersIsMutable();
            bodyAppearanceModifiers_.addAll(other.bodyAppearanceModifiers_);
          }
          
        }
        if (!other.colorModifiers_.isEmpty()) {
          if (colorModifiers_.isEmpty()) {
            colorModifiers_ = other.colorModifiers_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureColorModifiersIsMutable();
            colorModifiers_.addAll(other.colorModifiers_);
          }
          
        }
        if (other.hasDescription()) {
          bitField0_ |= 0x00004000;
          description_ = other.description_;
          
        }
        if (other.hasAdultSize()) {
          setAdultSize(other.getAdultSize());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getColorModifiersCount(); i++) {
          if (!getColorModifiers(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>optional int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        
        return this;
      }

      private java.lang.Object casteId_ = "";
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public boolean hasCasteId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public java.lang.String getCasteId() {
        java.lang.Object ref = casteId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            casteId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCasteIdBytes() {
        java.lang.Object ref = casteId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          casteId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public Builder setCasteId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        casteId_ = value;
        
        return this;
      }
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public Builder clearCasteId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        casteId_ = getDefaultInstance().getCasteId();
        
        return this;
      }
      /**
       * <code>optional string caste_id = 2;</code>
       */
      public Builder setCasteIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        casteId_ = value;
        
        return this;
      }

      private com.google.protobuf.LazyStringList casteName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureCasteNameIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          casteName_ = new com.google.protobuf.LazyStringArrayList(casteName_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getCasteNameList() {
        return casteName_.getUnmodifiableView();
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public int getCasteNameCount() {
        return casteName_.size();
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public java.lang.String getCasteName(int index) {
        return casteName_.get(index);
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCasteNameBytes(int index) {
        return casteName_.getByteString(index);
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public Builder setCasteName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCasteNameIsMutable();
        casteName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public Builder addCasteName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCasteNameIsMutable();
        casteName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public Builder addAllCasteName(
          java.lang.Iterable<java.lang.String> values) {
        ensureCasteNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, casteName_);
        
        return this;
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public Builder clearCasteName() {
        casteName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }
      /**
       * <code>repeated string caste_name = 3;</code>
       */
      public Builder addCasteNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureCasteNameIsMutable();
        casteName_.add(value);
        
        return this;
      }

      private com.google.protobuf.LazyStringList babyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBabyNameIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          babyName_ = new com.google.protobuf.LazyStringArrayList(babyName_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getBabyNameList() {
        return babyName_.getUnmodifiableView();
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public int getBabyNameCount() {
        return babyName_.size();
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public java.lang.String getBabyName(int index) {
        return babyName_.get(index);
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public com.google.protobuf.ByteString
          getBabyNameBytes(int index) {
        return babyName_.getByteString(index);
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public Builder setBabyName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBabyNameIsMutable();
        babyName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public Builder addBabyName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBabyNameIsMutable();
        babyName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public Builder addAllBabyName(
          java.lang.Iterable<java.lang.String> values) {
        ensureBabyNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, babyName_);
        
        return this;
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public Builder clearBabyName() {
        babyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }
      /**
       * <code>repeated string baby_name = 4;</code>
       */
      public Builder addBabyNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBabyNameIsMutable();
        babyName_.add(value);
        
        return this;
      }

      private com.google.protobuf.LazyStringList childName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureChildNameIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          childName_ = new com.google.protobuf.LazyStringArrayList(childName_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getChildNameList() {
        return childName_.getUnmodifiableView();
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public int getChildNameCount() {
        return childName_.size();
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public java.lang.String getChildName(int index) {
        return childName_.get(index);
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public com.google.protobuf.ByteString
          getChildNameBytes(int index) {
        return childName_.getByteString(index);
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public Builder setChildName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureChildNameIsMutable();
        childName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public Builder addChildName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureChildNameIsMutable();
        childName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public Builder addAllChildName(
          java.lang.Iterable<java.lang.String> values) {
        ensureChildNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, childName_);
        
        return this;
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public Builder clearChildName() {
        childName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }
      /**
       * <code>repeated string child_name = 5;</code>
       */
      public Builder addChildNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureChildNameIsMutable();
        childName_.add(value);
        
        return this;
      }

      private int gender_ ;
      /**
       * <code>optional int32 gender = 6;</code>
       */
      public boolean hasGender() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 gender = 6;</code>
       */
      public int getGender() {
        return gender_;
      }
      /**
       * <code>optional int32 gender = 6;</code>
       */
      public Builder setGender(int value) {
        bitField0_ |= 0x00000020;
        gender_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 gender = 6;</code>
       */
      public Builder clearGender() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gender_ = 0;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> bodyParts_ =
        java.util.Collections.emptyList();
      private void ensureBodyPartsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          bodyParts_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw>(bodyParts_);
          bitField0_ |= 0x00000040;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> getBodyPartsList() {
        return java.util.Collections.unmodifiableList(bodyParts_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public int getBodyPartsCount() {
        return bodyParts_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw getBodyParts(int index) {
        return bodyParts_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder setBodyParts(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyPartsIsMutable();
        bodyParts_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder setBodyParts(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.Builder builderForValue) {
        ensureBodyPartsIsMutable();
        bodyParts_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder addBodyParts(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyPartsIsMutable();
        bodyParts_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder addBodyParts(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyPartsIsMutable();
        bodyParts_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder addBodyParts(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.Builder builderForValue) {
        ensureBodyPartsIsMutable();
        bodyParts_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder addBodyParts(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw.Builder builderForValue) {
        ensureBodyPartsIsMutable();
        bodyParts_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder addAllBodyParts(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BodyPartRaw> values) {
        ensureBodyPartsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bodyParts_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder clearBodyParts() {
        bodyParts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BodyPartRaw body_parts = 7;</code>
       */
      public Builder removeBodyParts(int index) {
        ensureBodyPartsIsMutable();
        bodyParts_.remove(index);

        return this;
      }

      private int totalRelsize_ ;
      /**
       * <code>optional int32 total_relsize = 8;</code>
       */
      public boolean hasTotalRelsize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 total_relsize = 8;</code>
       */
      public int getTotalRelsize() {
        return totalRelsize_;
      }
      /**
       * <code>optional int32 total_relsize = 8;</code>
       */
      public Builder setTotalRelsize(int value) {
        bitField0_ |= 0x00000080;
        totalRelsize_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 total_relsize = 8;</code>
       */
      public Builder clearTotalRelsize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        totalRelsize_ = 0;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> modifiers_ =
        java.util.Collections.emptyList();
      private void ensureModifiersIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          modifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier>(modifiers_);
          bitField0_ |= 0x00000100;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> getModifiersList() {
        return java.util.Collections.unmodifiableList(modifiers_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public int getModifiersCount() {
        return modifiers_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getModifiers(int index) {
        return modifiers_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder setModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifiersIsMutable();
        modifiers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder setModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureModifiersIsMutable();
        modifiers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder addModifiers(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifiersIsMutable();
        modifiers_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder addModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureModifiersIsMutable();
        modifiers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder addModifiers(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureModifiersIsMutable();
        modifiers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder addModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureModifiersIsMutable();
        modifiers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder addAllModifiers(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> values) {
        ensureModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, modifiers_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder clearModifiers() {
        modifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier modifiers = 9;</code>
       */
      public Builder removeModifiers(int index) {
        ensureModifiersIsMutable();
        modifiers_.remove(index);

        return this;
      }

      private java.util.List<java.lang.Integer> modifierIdx_ = java.util.Collections.emptyList();
      private void ensureModifierIdxIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          modifierIdx_ = new java.util.ArrayList<java.lang.Integer>(modifierIdx_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getModifierIdxList() {
        return java.util.Collections.unmodifiableList(modifierIdx_);
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public int getModifierIdxCount() {
        return modifierIdx_.size();
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public int getModifierIdx(int index) {
        return modifierIdx_.get(index);
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public Builder setModifierIdx(
          int index, int value) {
        ensureModifierIdxIsMutable();
        modifierIdx_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public Builder addModifierIdx(int value) {
        ensureModifierIdxIsMutable();
        modifierIdx_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public Builder addAllModifierIdx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureModifierIdxIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, modifierIdx_);
        
        return this;
      }
      /**
       * <code>repeated int32 modifier_idx = 10;</code>
       */
      public Builder clearModifierIdx() {
        modifierIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        
        return this;
      }

      private java.util.List<java.lang.Integer> partIdx_ = java.util.Collections.emptyList();
      private void ensurePartIdxIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          partIdx_ = new java.util.ArrayList<java.lang.Integer>(partIdx_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public java.util.List<java.lang.Integer>
          getPartIdxList() {
        return java.util.Collections.unmodifiableList(partIdx_);
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public int getPartIdxCount() {
        return partIdx_.size();
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public int getPartIdx(int index) {
        return partIdx_.get(index);
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public Builder setPartIdx(
          int index, int value) {
        ensurePartIdxIsMutable();
        partIdx_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public Builder addPartIdx(int value) {
        ensurePartIdxIsMutable();
        partIdx_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public Builder addAllPartIdx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePartIdxIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, partIdx_);
        
        return this;
      }
      /**
       * <code>repeated int32 part_idx = 11;</code>
       */
      public Builder clearPartIdx() {
        partIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        
        return this;
      }

      private java.util.List<java.lang.Integer> layerIdx_ = java.util.Collections.emptyList();
      private void ensureLayerIdxIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          layerIdx_ = new java.util.ArrayList<java.lang.Integer>(layerIdx_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public java.util.List<java.lang.Integer>
          getLayerIdxList() {
        return java.util.Collections.unmodifiableList(layerIdx_);
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public int getLayerIdxCount() {
        return layerIdx_.size();
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public int getLayerIdx(int index) {
        return layerIdx_.get(index);
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public Builder setLayerIdx(
          int index, int value) {
        ensureLayerIdxIsMutable();
        layerIdx_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public Builder addLayerIdx(int value) {
        ensureLayerIdxIsMutable();
        layerIdx_.add(value);
        
        return this;
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public Builder addAllLayerIdx(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureLayerIdxIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, layerIdx_);
        
        return this;
      }
      /**
       * <code>repeated int32 layer_idx = 12;</code>
       */
      public Builder clearLayerIdx() {
        layerIdx_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> bodyAppearanceModifiers_ =
        java.util.Collections.emptyList();
      private void ensureBodyAppearanceModifiersIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          bodyAppearanceModifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier>(bodyAppearanceModifiers_);
          bitField0_ |= 0x00001000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> getBodyAppearanceModifiersList() {
        return java.util.Collections.unmodifiableList(bodyAppearanceModifiers_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public int getBodyAppearanceModifiersCount() {
        return bodyAppearanceModifiers_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier getBodyAppearanceModifiers(int index) {
        return bodyAppearanceModifiers_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder setBodyAppearanceModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder setBodyAppearanceModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder addBodyAppearanceModifiers(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder addBodyAppearanceModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder addBodyAppearanceModifiers(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder addBodyAppearanceModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier.Builder builderForValue) {
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder addAllBodyAppearanceModifiers(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.BpAppearanceModifier> values) {
        ensureBodyAppearanceModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bodyAppearanceModifiers_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder clearBodyAppearanceModifiers() {
        bodyAppearanceModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.BpAppearanceModifier body_appearance_modifiers = 13;</code>
       */
      public Builder removeBodyAppearanceModifiers(int index) {
        ensureBodyAppearanceModifiersIsMutable();
        bodyAppearanceModifiers_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> colorModifiers_ =
        java.util.Collections.emptyList();
      private void ensureColorModifiersIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          colorModifiers_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw>(colorModifiers_);
          bitField0_ |= 0x00002000;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> getColorModifiersList() {
        return java.util.Collections.unmodifiableList(colorModifiers_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public int getColorModifiersCount() {
        return colorModifiers_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw getColorModifiers(int index) {
        return colorModifiers_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder setColorModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorModifiersIsMutable();
        colorModifiers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder setColorModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.Builder builderForValue) {
        ensureColorModifiersIsMutable();
        colorModifiers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder addColorModifiers(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorModifiersIsMutable();
        colorModifiers_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder addColorModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColorModifiersIsMutable();
        colorModifiers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder addColorModifiers(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.Builder builderForValue) {
        ensureColorModifiersIsMutable();
        colorModifiers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder addColorModifiers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw.Builder builderForValue) {
        ensureColorModifiersIsMutable();
        colorModifiers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder addAllColorModifiers(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorModifierRaw> values) {
        ensureColorModifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, colorModifiers_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder clearColorModifiers() {
        colorModifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ColorModifierRaw color_modifiers = 14;</code>
       */
      public Builder removeColorModifiers(int index) {
        ensureColorModifiersIsMutable();
        colorModifiers_.remove(index);

        return this;
      }

      private java.lang.Object description_ = "";
      /**
       * <code>optional string description = 15;</code>
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional string description = 15;</code>
       */
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            description_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string description = 15;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string description = 15;</code>
       */
      public Builder setDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        description_ = value;
        
        return this;
      }
      /**
       * <code>optional string description = 15;</code>
       */
      public Builder clearDescription() {
        bitField0_ = (bitField0_ & ~0x00004000);
        description_ = getDefaultInstance().getDescription();
        
        return this;
      }
      /**
       * <code>optional string description = 15;</code>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        description_ = value;
        
        return this;
      }

      private int adultSize_ ;
      /**
       * <code>optional int32 adult_size = 16;</code>
       */
      public boolean hasAdultSize() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 adult_size = 16;</code>
       */
      public int getAdultSize() {
        return adultSize_;
      }
      /**
       * <code>optional int32 adult_size = 16;</code>
       */
      public Builder setAdultSize(int value) {
        bitField0_ |= 0x00008000;
        adultSize_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 adult_size = 16;</code>
       */
      public Builder clearAdultSize() {
        bitField0_ = (bitField0_ & ~0x00008000);
        adultSize_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.CasteRaw)
    }

    static {
      defaultInstance = new CasteRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.CasteRaw)
  }

  public interface CreatureRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.CreatureRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional int32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>optional string creature_id = 2;</code>
     */
    boolean hasCreatureId();
    /**
     * <code>optional string creature_id = 2;</code>
     */
    java.lang.String getCreatureId();
    /**
     * <code>optional string creature_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getCreatureIdBytes();

    /**
     * <code>repeated string name = 3;</code>
     */
    com.google.protobuf.ProtocolStringList
        getNameList();
    /**
     * <code>repeated string name = 3;</code>
     */
    int getNameCount();
    /**
     * <code>repeated string name = 3;</code>
     */
    java.lang.String getName(int index);
    /**
     * <code>repeated string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes(int index);

    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    com.google.protobuf.ProtocolStringList
        getGeneralBabyNameList();
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    int getGeneralBabyNameCount();
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    java.lang.String getGeneralBabyName(int index);
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    com.google.protobuf.ByteString
        getGeneralBabyNameBytes(int index);

    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    com.google.protobuf.ProtocolStringList
        getGeneralChildNameList();
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    int getGeneralChildNameCount();
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    java.lang.String getGeneralChildName(int index);
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    com.google.protobuf.ByteString
        getGeneralChildNameBytes(int index);

    /**
     * <code>optional int32 creature_tile = 6;</code>
     */
    boolean hasCreatureTile();
    /**
     * <code>optional int32 creature_tile = 6;</code>
     */
    int getCreatureTile();

    /**
     * <code>optional int32 creature_soldier_tile = 7;</code>
     */
    boolean hasCreatureSoldierTile();
    /**
     * <code>optional int32 creature_soldier_tile = 7;</code>
     */
    int getCreatureSoldierTile();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
     */
    boolean hasColor();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColor();

    /**
     * <code>optional int32 adultsize = 9;</code>
     */
    boolean hasAdultsize();
    /**
     * <code>optional int32 adultsize = 9;</code>
     */
    int getAdultsize();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> 
        getCasteList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw getCaste(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    int getCasteCount();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> 
        getTissuesList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw getTissues(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    int getTissuesCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CreatureRaw}
   */
  public static final class CreatureRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.CreatureRaw)
      CreatureRawOrBuilder {
    // Use CreatureRaw.newBuilder() to construct.
    private CreatureRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CreatureRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final CreatureRaw defaultInstance;
    public static CreatureRaw getDefaultInstance() {
      return defaultInstance;
    }

    public CreatureRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private CreatureRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              creatureId_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                name_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              name_.add(bs);
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                generalBabyName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              generalBabyName_.add(bs);
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                generalChildName_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000010;
              }
              generalChildName_.add(bs);
              break;
            }
            case 48: {
              bitField0_ |= 0x00000004;
              creatureTile_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000008;
              creatureSoldierTile_ = input.readInt32();
              break;
            }
            case 66: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = color_.toBuilder();
              }
              color_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(color_);
                color_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              adultsize_ = input.readInt32();
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                caste_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw>();
                mutable_bitField0_ |= 0x00000200;
              }
              caste_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.PARSER, extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                tissues_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw>();
                mutable_bitField0_ |= 0x00000400;
              }
              tissues_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          name_ = name_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          generalBabyName_ = generalBabyName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          generalChildName_ = generalChildName_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          caste_ = java.util.Collections.unmodifiableList(caste_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          tissues_ = java.util.Collections.unmodifiableList(tissues_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CreatureRaw> PARSER =
        new com.google.protobuf.AbstractParser<CreatureRaw>() {
      public CreatureRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreatureRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CreatureRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int CREATURE_ID_FIELD_NUMBER = 2;
    private java.lang.Object creatureId_;
    /**
     * <code>optional string creature_id = 2;</code>
     */
    public boolean hasCreatureId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string creature_id = 2;</code>
     */
    public java.lang.String getCreatureId() {
      java.lang.Object ref = creatureId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          creatureId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string creature_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCreatureIdBytes() {
      java.lang.Object ref = creatureId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        creatureId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList name_;
    /**
     * <code>repeated string name = 3;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getNameList() {
      return name_;
    }
    /**
     * <code>repeated string name = 3;</code>
     */
    public int getNameCount() {
      return name_.size();
    }
    /**
     * <code>repeated string name = 3;</code>
     */
    public java.lang.String getName(int index) {
      return name_.get(index);
    }
    /**
     * <code>repeated string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes(int index) {
      return name_.getByteString(index);
    }

    public static final int GENERAL_BABY_NAME_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList generalBabyName_;
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getGeneralBabyNameList() {
      return generalBabyName_;
    }
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    public int getGeneralBabyNameCount() {
      return generalBabyName_.size();
    }
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    public java.lang.String getGeneralBabyName(int index) {
      return generalBabyName_.get(index);
    }
    /**
     * <code>repeated string general_baby_name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getGeneralBabyNameBytes(int index) {
      return generalBabyName_.getByteString(index);
    }

    public static final int GENERAL_CHILD_NAME_FIELD_NUMBER = 5;
    private com.google.protobuf.LazyStringList generalChildName_;
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getGeneralChildNameList() {
      return generalChildName_;
    }
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    public int getGeneralChildNameCount() {
      return generalChildName_.size();
    }
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    public java.lang.String getGeneralChildName(int index) {
      return generalChildName_.get(index);
    }
    /**
     * <code>repeated string general_child_name = 5;</code>
     */
    public com.google.protobuf.ByteString
        getGeneralChildNameBytes(int index) {
      return generalChildName_.getByteString(index);
    }

    public static final int CREATURE_TILE_FIELD_NUMBER = 6;
    private int creatureTile_;
    /**
     * <code>optional int32 creature_tile = 6;</code>
     */
    public boolean hasCreatureTile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 creature_tile = 6;</code>
     */
    public int getCreatureTile() {
      return creatureTile_;
    }

    public static final int CREATURE_SOLDIER_TILE_FIELD_NUMBER = 7;
    private int creatureSoldierTile_;
    /**
     * <code>optional int32 creature_soldier_tile = 7;</code>
     */
    public boolean hasCreatureSoldierTile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 creature_soldier_tile = 7;</code>
     */
    public int getCreatureSoldierTile() {
      return creatureSoldierTile_;
    }

    public static final int COLOR_FIELD_NUMBER = 8;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition color_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColor() {
      return color_;
    }

    public static final int ADULTSIZE_FIELD_NUMBER = 9;
    private int adultsize_;
    /**
     * <code>optional int32 adultsize = 9;</code>
     */
    public boolean hasAdultsize() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 adultsize = 9;</code>
     */
    public int getAdultsize() {
      return adultsize_;
    }

    public static final int CASTE_FIELD_NUMBER = 10;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> caste_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> getCasteList() {
      return caste_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRawOrBuilder> 
        getCasteOrBuilderList() {
      return caste_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    public int getCasteCount() {
      return caste_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw getCaste(int index) {
      return caste_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRawOrBuilder getCasteOrBuilder(
        int index) {
      return caste_.get(index);
    }

    public static final int TISSUES_FIELD_NUMBER = 11;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> tissues_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> getTissuesList() {
      return tissues_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRawOrBuilder> 
        getTissuesOrBuilderList() {
      return tissues_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    public int getTissuesCount() {
      return tissues_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw getTissues(int index) {
      return tissues_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRawOrBuilder getTissuesOrBuilder(
        int index) {
      return tissues_.get(index);
    }

    private void initFields() {
      index_ = 0;
      creatureId_ = "";
      name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      generalBabyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      generalChildName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      creatureTile_ = 0;
      creatureSoldierTile_ = 0;
      color_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      adultsize_ = 0;
      caste_ = java.util.Collections.emptyList();
      tissues_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasColor()) {
        if (!getColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getCasteCount(); i++) {
        if (!getCaste(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getTissuesCount(); i++) {
        if (!getTissues(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getCreatureIdBytes());
      }
      for (int i = 0; i < name_.size(); i++) {
        output.writeBytes(3, name_.getByteString(i));
      }
      for (int i = 0; i < generalBabyName_.size(); i++) {
        output.writeBytes(4, generalBabyName_.getByteString(i));
      }
      for (int i = 0; i < generalChildName_.size(); i++) {
        output.writeBytes(5, generalChildName_.getByteString(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(6, creatureTile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(7, creatureSoldierTile_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(8, color_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, adultsize_);
      }
      for (int i = 0; i < caste_.size(); i++) {
        output.writeMessage(10, caste_.get(i));
      }
      for (int i = 0; i < tissues_.size(); i++) {
        output.writeMessage(11, tissues_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getCreatureIdBytes());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < name_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(name_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getNameList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < generalBabyName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(generalBabyName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getGeneralBabyNameList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < generalChildName_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(generalChildName_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getGeneralChildNameList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, creatureTile_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, creatureSoldierTile_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, color_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, adultsize_);
      }
      for (int i = 0; i < caste_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, caste_.get(i));
      }
      for (int i = 0; i < tissues_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, tissues_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CreatureRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.CreatureRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        creatureId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        generalBabyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        generalChildName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        creatureTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        creatureSoldierTile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        color_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000080);
        adultsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        caste_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        tissues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.creatureId_ = creatureId_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          name_ = name_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          generalBabyName_ = generalBabyName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.generalBabyName_ = generalBabyName_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          generalChildName_ = generalChildName_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.generalChildName_ = generalChildName_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000004;
        }
        result.creatureTile_ = creatureTile_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000008;
        }
        result.creatureSoldierTile_ = creatureSoldierTile_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000010;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.adultsize_ = adultsize_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          caste_ = java.util.Collections.unmodifiableList(caste_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.caste_ = caste_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          tissues_ = java.util.Collections.unmodifiableList(tissues_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.tissues_ = tissues_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasCreatureId()) {
          bitField0_ |= 0x00000002;
          creatureId_ = other.creatureId_;
          
        }
        if (!other.name_.isEmpty()) {
          if (name_.isEmpty()) {
            name_ = other.name_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureNameIsMutable();
            name_.addAll(other.name_);
          }
          
        }
        if (!other.generalBabyName_.isEmpty()) {
          if (generalBabyName_.isEmpty()) {
            generalBabyName_ = other.generalBabyName_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGeneralBabyNameIsMutable();
            generalBabyName_.addAll(other.generalBabyName_);
          }
          
        }
        if (!other.generalChildName_.isEmpty()) {
          if (generalChildName_.isEmpty()) {
            generalChildName_ = other.generalChildName_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureGeneralChildNameIsMutable();
            generalChildName_.addAll(other.generalChildName_);
          }
          
        }
        if (other.hasCreatureTile()) {
          setCreatureTile(other.getCreatureTile());
        }
        if (other.hasCreatureSoldierTile()) {
          setCreatureSoldierTile(other.getCreatureSoldierTile());
        }
        if (other.hasColor()) {
          mergeColor(other.getColor());
        }
        if (other.hasAdultsize()) {
          setAdultsize(other.getAdultsize());
        }
        if (!other.caste_.isEmpty()) {
          if (caste_.isEmpty()) {
            caste_ = other.caste_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureCasteIsMutable();
            caste_.addAll(other.caste_);
          }
          
        }
        if (!other.tissues_.isEmpty()) {
          if (tissues_.isEmpty()) {
            tissues_ = other.tissues_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureTissuesIsMutable();
            tissues_.addAll(other.tissues_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasColor()) {
          if (!getColor().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getCasteCount(); i++) {
          if (!getCaste(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getTissuesCount(); i++) {
          if (!getTissues(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>optional int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        
        return this;
      }

      private java.lang.Object creatureId_ = "";
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public boolean hasCreatureId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public java.lang.String getCreatureId() {
        java.lang.Object ref = creatureId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            creatureId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCreatureIdBytes() {
        java.lang.Object ref = creatureId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          creatureId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public Builder setCreatureId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        creatureId_ = value;
        
        return this;
      }
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public Builder clearCreatureId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        creatureId_ = getDefaultInstance().getCreatureId();
        
        return this;
      }
      /**
       * <code>optional string creature_id = 2;</code>
       */
      public Builder setCreatureIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        creatureId_ = value;
        
        return this;
      }

      private com.google.protobuf.LazyStringList name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureNameIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          name_ = new com.google.protobuf.LazyStringArrayList(name_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getNameList() {
        return name_.getUnmodifiableView();
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public int getNameCount() {
        return name_.size();
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public java.lang.String getName(int index) {
        return name_.get(index);
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes(int index) {
        return name_.getByteString(index);
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public Builder setName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNameIsMutable();
        name_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public Builder addName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNameIsMutable();
        name_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public Builder addAllName(
          java.lang.Iterable<java.lang.String> values) {
        ensureNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, name_);
        
        return this;
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public Builder clearName() {
        name_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        
        return this;
      }
      /**
       * <code>repeated string name = 3;</code>
       */
      public Builder addNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureNameIsMutable();
        name_.add(value);
        
        return this;
      }

      private com.google.protobuf.LazyStringList generalBabyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGeneralBabyNameIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          generalBabyName_ = new com.google.protobuf.LazyStringArrayList(generalBabyName_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getGeneralBabyNameList() {
        return generalBabyName_.getUnmodifiableView();
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public int getGeneralBabyNameCount() {
        return generalBabyName_.size();
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public java.lang.String getGeneralBabyName(int index) {
        return generalBabyName_.get(index);
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public com.google.protobuf.ByteString
          getGeneralBabyNameBytes(int index) {
        return generalBabyName_.getByteString(index);
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public Builder setGeneralBabyName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralBabyNameIsMutable();
        generalBabyName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public Builder addGeneralBabyName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralBabyNameIsMutable();
        generalBabyName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public Builder addAllGeneralBabyName(
          java.lang.Iterable<java.lang.String> values) {
        ensureGeneralBabyNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, generalBabyName_);
        
        return this;
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public Builder clearGeneralBabyName() {
        generalBabyName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }
      /**
       * <code>repeated string general_baby_name = 4;</code>
       */
      public Builder addGeneralBabyNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralBabyNameIsMutable();
        generalBabyName_.add(value);
        
        return this;
      }

      private com.google.protobuf.LazyStringList generalChildName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureGeneralChildNameIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          generalChildName_ = new com.google.protobuf.LazyStringArrayList(generalChildName_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getGeneralChildNameList() {
        return generalChildName_.getUnmodifiableView();
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public int getGeneralChildNameCount() {
        return generalChildName_.size();
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public java.lang.String getGeneralChildName(int index) {
        return generalChildName_.get(index);
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public com.google.protobuf.ByteString
          getGeneralChildNameBytes(int index) {
        return generalChildName_.getByteString(index);
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public Builder setGeneralChildName(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralChildNameIsMutable();
        generalChildName_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public Builder addGeneralChildName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralChildNameIsMutable();
        generalChildName_.add(value);
        
        return this;
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public Builder addAllGeneralChildName(
          java.lang.Iterable<java.lang.String> values) {
        ensureGeneralChildNameIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, generalChildName_);
        
        return this;
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public Builder clearGeneralChildName() {
        generalChildName_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        
        return this;
      }
      /**
       * <code>repeated string general_child_name = 5;</code>
       */
      public Builder addGeneralChildNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureGeneralChildNameIsMutable();
        generalChildName_.add(value);
        
        return this;
      }

      private int creatureTile_ ;
      /**
       * <code>optional int32 creature_tile = 6;</code>
       */
      public boolean hasCreatureTile() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 creature_tile = 6;</code>
       */
      public int getCreatureTile() {
        return creatureTile_;
      }
      /**
       * <code>optional int32 creature_tile = 6;</code>
       */
      public Builder setCreatureTile(int value) {
        bitField0_ |= 0x00000020;
        creatureTile_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 creature_tile = 6;</code>
       */
      public Builder clearCreatureTile() {
        bitField0_ = (bitField0_ & ~0x00000020);
        creatureTile_ = 0;
        
        return this;
      }

      private int creatureSoldierTile_ ;
      /**
       * <code>optional int32 creature_soldier_tile = 7;</code>
       */
      public boolean hasCreatureSoldierTile() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 creature_soldier_tile = 7;</code>
       */
      public int getCreatureSoldierTile() {
        return creatureSoldierTile_;
      }
      /**
       * <code>optional int32 creature_soldier_tile = 7;</code>
       */
      public Builder setCreatureSoldierTile(int value) {
        bitField0_ |= 0x00000040;
        creatureSoldierTile_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 creature_soldier_tile = 7;</code>
       */
      public Builder clearCreatureSoldierTile() {
        bitField0_ = (bitField0_ & ~0x00000040);
        creatureSoldierTile_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition color_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition getColor() {
        return color_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public Builder setColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        color_ = value;

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public Builder setColor(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.Builder builderForValue) {
        color_ = builderForValue.build();

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public Builder mergeColor(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition value) {
        if (((bitField0_ & 0x00000080) == 0x00000080) &&
            color_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance()) {
          color_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.newBuilder(color_).mergeFrom(value).buildPartial();
        } else {
          color_ = value;
        }

        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.ColorDefinition color = 8;</code>
       */
      public Builder clearColor() {
        color_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ColorDefinition.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      private int adultsize_ ;
      /**
       * <code>optional int32 adultsize = 9;</code>
       */
      public boolean hasAdultsize() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 adultsize = 9;</code>
       */
      public int getAdultsize() {
        return adultsize_;
      }
      /**
       * <code>optional int32 adultsize = 9;</code>
       */
      public Builder setAdultsize(int value) {
        bitField0_ |= 0x00000100;
        adultsize_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 adultsize = 9;</code>
       */
      public Builder clearAdultsize() {
        bitField0_ = (bitField0_ & ~0x00000100);
        adultsize_ = 0;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> caste_ =
        java.util.Collections.emptyList();
      private void ensureCasteIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          caste_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw>(caste_);
          bitField0_ |= 0x00000200;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> getCasteList() {
        return java.util.Collections.unmodifiableList(caste_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public int getCasteCount() {
        return caste_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw getCaste(int index) {
        return caste_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder setCaste(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCasteIsMutable();
        caste_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder setCaste(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.Builder builderForValue) {
        ensureCasteIsMutable();
        caste_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder addCaste(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCasteIsMutable();
        caste_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder addCaste(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCasteIsMutable();
        caste_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder addCaste(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.Builder builderForValue) {
        ensureCasteIsMutable();
        caste_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder addCaste(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw.Builder builderForValue) {
        ensureCasteIsMutable();
        caste_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder addAllCaste(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CasteRaw> values) {
        ensureCasteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, caste_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder clearCaste() {
        caste_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CasteRaw caste = 10;</code>
       */
      public Builder removeCaste(int index) {
        ensureCasteIsMutable();
        caste_.remove(index);

        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> tissues_ =
        java.util.Collections.emptyList();
      private void ensureTissuesIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          tissues_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw>(tissues_);
          bitField0_ |= 0x00000400;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> getTissuesList() {
        return java.util.Collections.unmodifiableList(tissues_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public int getTissuesCount() {
        return tissues_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw getTissues(int index) {
        return tissues_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder setTissues(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTissuesIsMutable();
        tissues_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder setTissues(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.Builder builderForValue) {
        ensureTissuesIsMutable();
        tissues_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder addTissues(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTissuesIsMutable();
        tissues_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder addTissues(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTissuesIsMutable();
        tissues_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder addTissues(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.Builder builderForValue) {
        ensureTissuesIsMutable();
        tissues_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder addTissues(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw.Builder builderForValue) {
        ensureTissuesIsMutable();
        tissues_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder addAllTissues(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TissueRaw> values) {
        ensureTissuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tissues_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder clearTissues() {
        tissues_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TissueRaw tissues = 11;</code>
       */
      public Builder removeTissues(int index) {
        ensureTissuesIsMutable();
        tissues_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.CreatureRaw)
    }

    static {
      defaultInstance = new CreatureRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.CreatureRaw)
  }

  public interface CreatureRawListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.CreatureRawList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> 
        getCreatureRawsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw getCreatureRaws(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    int getCreatureRawsCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CreatureRawList}
   */
  public static final class CreatureRawList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.CreatureRawList)
      CreatureRawListOrBuilder {
    // Use CreatureRawList.newBuilder() to construct.
    private CreatureRawList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CreatureRawList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final CreatureRawList defaultInstance;
    public static CreatureRawList getDefaultInstance() {
      return defaultInstance;
    }

    public CreatureRawList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private CreatureRawList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                creatureRaws_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw>();
                mutable_bitField0_ |= 0x00000001;
              }
              creatureRaws_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          creatureRaws_ = java.util.Collections.unmodifiableList(creatureRaws_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<CreatureRawList> PARSER =
        new com.google.protobuf.AbstractParser<CreatureRawList>() {
      public CreatureRawList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreatureRawList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CreatureRawList> getParserForType() {
      return PARSER;
    }

    public static final int CREATURE_RAWS_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> creatureRaws_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> getCreatureRawsList() {
      return creatureRaws_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawOrBuilder> 
        getCreatureRawsOrBuilderList() {
      return creatureRaws_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    public int getCreatureRawsCount() {
      return creatureRaws_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw getCreatureRaws(int index) {
      return creatureRaws_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawOrBuilder getCreatureRawsOrBuilder(
        int index) {
      return creatureRaws_.get(index);
    }

    private void initFields() {
      creatureRaws_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getCreatureRawsCount(); i++) {
        if (!getCreatureRaws(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < creatureRaws_.size(); i++) {
        output.writeMessage(1, creatureRaws_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < creatureRaws_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, creatureRaws_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.CreatureRawList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.CreatureRawList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        creatureRaws_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          creatureRaws_ = java.util.Collections.unmodifiableList(creatureRaws_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.creatureRaws_ = creatureRaws_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList.getDefaultInstance()) return this;
        if (!other.creatureRaws_.isEmpty()) {
          if (creatureRaws_.isEmpty()) {
            creatureRaws_ = other.creatureRaws_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCreatureRawsIsMutable();
            creatureRaws_.addAll(other.creatureRaws_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getCreatureRawsCount(); i++) {
          if (!getCreatureRaws(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRawList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> creatureRaws_ =
        java.util.Collections.emptyList();
      private void ensureCreatureRawsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          creatureRaws_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw>(creatureRaws_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> getCreatureRawsList() {
        return java.util.Collections.unmodifiableList(creatureRaws_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public int getCreatureRawsCount() {
        return creatureRaws_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw getCreatureRaws(int index) {
        return creatureRaws_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder setCreatureRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureRawsIsMutable();
        creatureRaws_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder setCreatureRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.Builder builderForValue) {
        ensureCreatureRawsIsMutable();
        creatureRaws_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder addCreatureRaws(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureRawsIsMutable();
        creatureRaws_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder addCreatureRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCreatureRawsIsMutable();
        creatureRaws_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder addCreatureRaws(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.Builder builderForValue) {
        ensureCreatureRawsIsMutable();
        creatureRaws_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder addCreatureRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw.Builder builderForValue) {
        ensureCreatureRawsIsMutable();
        creatureRaws_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder addAllCreatureRaws(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.CreatureRaw> values) {
        ensureCreatureRawsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, creatureRaws_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder clearCreatureRaws() {
        creatureRaws_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.CreatureRaw creature_raws = 1;</code>
       */
      public Builder removeCreatureRaws(int index) {
        ensureCreatureRawsIsMutable();
        creatureRaws_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.CreatureRawList)
    }

    static {
      defaultInstance = new CreatureRawList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.CreatureRawList)
  }

  public interface ArmyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.Army)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional int32 pos_x = 2;</code>
     */
    boolean hasPosX();
    /**
     * <code>optional int32 pos_x = 2;</code>
     */
    int getPosX();

    /**
     * <code>optional int32 pos_y = 3;</code>
     */
    boolean hasPosY();
    /**
     * <code>optional int32 pos_y = 3;</code>
     */
    int getPosY();

    /**
     * <code>optional int32 pos_z = 4;</code>
     */
    boolean hasPosZ();
    /**
     * <code>optional int32 pos_z = 4;</code>
     */
    int getPosZ();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
     */
    boolean hasLeader();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getLeader();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> 
        getMembersList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getMembers(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    int getMembersCount();

    /**
     * <code>optional uint32 flags = 7;</code>
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 7;</code>
     */
    int getFlags();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Army}
   */
  public static final class Army extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.Army)
      ArmyOrBuilder {
    // Use Army.newBuilder() to construct.
    private Army(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Army(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final Army defaultInstance;
    public static Army getDefaultInstance() {
      return defaultInstance;
    }

    public Army getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private Army(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              posX_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              posY_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              posZ_ = input.readInt32();
              break;
            }
            case 42: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = leader_.toBuilder();
              }
              leader_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(leader_);
                leader_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                members_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition>();
                mutable_bitField0_ |= 0x00000020;
              }
              members_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              flags_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          members_ = java.util.Collections.unmodifiableList(members_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<Army> PARSER =
        new com.google.protobuf.AbstractParser<Army>() {
      public Army parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Army(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Army> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int POS_X_FIELD_NUMBER = 2;
    private int posX_;
    /**
     * <code>optional int32 pos_x = 2;</code>
     */
    public boolean hasPosX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 pos_x = 2;</code>
     */
    public int getPosX() {
      return posX_;
    }

    public static final int POS_Y_FIELD_NUMBER = 3;
    private int posY_;
    /**
     * <code>optional int32 pos_y = 3;</code>
     */
    public boolean hasPosY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 pos_y = 3;</code>
     */
    public int getPosY() {
      return posY_;
    }

    public static final int POS_Z_FIELD_NUMBER = 4;
    private int posZ_;
    /**
     * <code>optional int32 pos_z = 4;</code>
     */
    public boolean hasPosZ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 pos_z = 4;</code>
     */
    public int getPosZ() {
      return posZ_;
    }

    public static final int LEADER_FIELD_NUMBER = 5;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition leader_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
     */
    public boolean hasLeader() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getLeader() {
      return leader_;
    }

    public static final int MEMBERS_FIELD_NUMBER = 6;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> members_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> getMembersList() {
      return members_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinitionOrBuilder> 
        getMembersOrBuilderList() {
      return members_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    public int getMembersCount() {
      return members_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getMembers(int index) {
      return members_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinitionOrBuilder getMembersOrBuilder(
        int index) {
      return members_.get(index);
    }

    public static final int FLAGS_FIELD_NUMBER = 7;
    private int flags_;
    /**
     * <code>optional uint32 flags = 7;</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 flags = 7;</code>
     */
    public int getFlags() {
      return flags_;
    }

    private void initFields() {
      id_ = 0;
      posX_ = 0;
      posY_ = 0;
      posZ_ = 0;
      leader_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance();
      members_ = java.util.Collections.emptyList();
      flags_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasLeader()) {
        if (!getLeader().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getMembersCount(); i++) {
        if (!getMembers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, posX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, posY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, posZ_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, leader_);
      }
      for (int i = 0; i < members_.size(); i++) {
        output.writeMessage(6, members_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, flags_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, posX_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, posY_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, posZ_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, leader_);
      }
      for (int i = 0; i < members_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, members_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, flags_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.Army}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.Army)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        posX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        posY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        posZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        leader_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        members_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.posX_ = posX_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.posY_ = posY_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.posZ_ = posZ_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.leader_ = leader_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          members_ = java.util.Collections.unmodifiableList(members_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.members_ = members_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.flags_ = flags_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasPosX()) {
          setPosX(other.getPosX());
        }
        if (other.hasPosY()) {
          setPosY(other.getPosY());
        }
        if (other.hasPosZ()) {
          setPosZ(other.getPosZ());
        }
        if (other.hasLeader()) {
          mergeLeader(other.getLeader());
        }
        if (!other.members_.isEmpty()) {
          if (members_.isEmpty()) {
            members_ = other.members_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureMembersIsMutable();
            members_.addAll(other.members_);
          }
          
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasLeader()) {
          if (!getLeader().isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getMembersCount(); i++) {
          if (!getMembers(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>optional int32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        
        return this;
      }

      private int posX_ ;
      /**
       * <code>optional int32 pos_x = 2;</code>
       */
      public boolean hasPosX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 pos_x = 2;</code>
       */
      public int getPosX() {
        return posX_;
      }
      /**
       * <code>optional int32 pos_x = 2;</code>
       */
      public Builder setPosX(int value) {
        bitField0_ |= 0x00000002;
        posX_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_x = 2;</code>
       */
      public Builder clearPosX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        posX_ = 0;
        
        return this;
      }

      private int posY_ ;
      /**
       * <code>optional int32 pos_y = 3;</code>
       */
      public boolean hasPosY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 pos_y = 3;</code>
       */
      public int getPosY() {
        return posY_;
      }
      /**
       * <code>optional int32 pos_y = 3;</code>
       */
      public Builder setPosY(int value) {
        bitField0_ |= 0x00000004;
        posY_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_y = 3;</code>
       */
      public Builder clearPosY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        posY_ = 0;
        
        return this;
      }

      private int posZ_ ;
      /**
       * <code>optional int32 pos_z = 4;</code>
       */
      public boolean hasPosZ() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 pos_z = 4;</code>
       */
      public int getPosZ() {
        return posZ_;
      }
      /**
       * <code>optional int32 pos_z = 4;</code>
       */
      public Builder setPosZ(int value) {
        bitField0_ |= 0x00000008;
        posZ_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 pos_z = 4;</code>
       */
      public Builder clearPosZ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        posZ_ = 0;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition leader_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public boolean hasLeader() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getLeader() {
        return leader_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public Builder setLeader(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        leader_ = value;

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public Builder setLeader(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        leader_ = builderForValue.build();

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public Builder mergeLeader(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            leader_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance()) {
          leader_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.newBuilder(leader_).mergeFrom(value).buildPartial();
        } else {
          leader_ = value;
        }

        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition leader = 5;</code>
       */
      public Builder clearLeader() {
        leader_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> members_ =
        java.util.Collections.emptyList();
      private void ensureMembersIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          members_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition>(members_);
          bitField0_ |= 0x00000020;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> getMembersList() {
        return java.util.Collections.unmodifiableList(members_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public int getMembersCount() {
        return members_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition getMembers(int index) {
        return members_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder setMembers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMembersIsMutable();
        members_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder setMembers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureMembersIsMutable();
        members_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder addMembers(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMembersIsMutable();
        members_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder addMembers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMembersIsMutable();
        members_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder addMembers(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureMembersIsMutable();
        members_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder addMembers(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition.Builder builderForValue) {
        ensureMembersIsMutable();
        members_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder addAllMembers(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.UnitDefinition> values) {
        ensureMembersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, members_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder clearMembers() {
        members_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.UnitDefinition members = 6;</code>
       */
      public Builder removeMembers(int index) {
        ensureMembersIsMutable();
        members_.remove(index);

        return this;
      }

      private int flags_ ;
      /**
       * <code>optional uint32 flags = 7;</code>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 flags = 7;</code>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 7;</code>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000040;
        flags_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 flags = 7;</code>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000040);
        flags_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.Army)
    }

    static {
      defaultInstance = new Army(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.Army)
  }

  public interface ArmyListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ArmyList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> 
        getArmiesList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army getArmies(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    int getArmiesCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ArmyList}
   */
  public static final class ArmyList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ArmyList)
      ArmyListOrBuilder {
    // Use ArmyList.newBuilder() to construct.
    private ArmyList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ArmyList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ArmyList defaultInstance;
    public static ArmyList getDefaultInstance() {
      return defaultInstance;
    }

    public ArmyList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ArmyList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                armies_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army>();
                mutable_bitField0_ |= 0x00000001;
              }
              armies_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          armies_ = java.util.Collections.unmodifiableList(armies_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ArmyList> PARSER =
        new com.google.protobuf.AbstractParser<ArmyList>() {
      public ArmyList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ArmyList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ArmyList> getParserForType() {
      return PARSER;
    }

    public static final int ARMIES_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> armies_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> getArmiesList() {
      return armies_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyOrBuilder> 
        getArmiesOrBuilderList() {
      return armies_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    public int getArmiesCount() {
      return armies_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army getArmies(int index) {
      return armies_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyOrBuilder getArmiesOrBuilder(
        int index) {
      return armies_.get(index);
    }

    private void initFields() {
      armies_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getArmiesCount(); i++) {
        if (!getArmies(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < armies_.size(); i++) {
        output.writeMessage(1, armies_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < armies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, armies_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ArmyList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ArmyList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        armies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          armies_ = java.util.Collections.unmodifiableList(armies_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.armies_ = armies_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList.getDefaultInstance()) return this;
        if (!other.armies_.isEmpty()) {
          if (armies_.isEmpty()) {
            armies_ = other.armies_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureArmiesIsMutable();
            armies_.addAll(other.armies_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getArmiesCount(); i++) {
          if (!getArmies(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ArmyList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> armies_ =
        java.util.Collections.emptyList();
      private void ensureArmiesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          armies_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army>(armies_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> getArmiesList() {
        return java.util.Collections.unmodifiableList(armies_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public int getArmiesCount() {
        return armies_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army getArmies(int index) {
        return armies_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder setArmies(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArmiesIsMutable();
        armies_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder setArmies(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.Builder builderForValue) {
        ensureArmiesIsMutable();
        armies_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder addArmies(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArmiesIsMutable();
        armies_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder addArmies(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureArmiesIsMutable();
        armies_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder addArmies(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.Builder builderForValue) {
        ensureArmiesIsMutable();
        armies_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder addArmies(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army.Builder builderForValue) {
        ensureArmiesIsMutable();
        armies_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder addAllArmies(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.Army> values) {
        ensureArmiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, armies_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder clearArmies() {
        armies_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.Army armies = 1;</code>
       */
      public Builder removeArmies(int index) {
        ensureArmiesIsMutable();
        armies_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ArmyList)
    }

    static {
      defaultInstance = new ArmyList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ArmyList)
  }

  public interface GrowthPrintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.GrowthPrint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 priority = 1;</code>
     */
    boolean hasPriority();
    /**
     * <code>optional int32 priority = 1;</code>
     */
    int getPriority();

    /**
     * <code>optional int32 color = 2;</code>
     */
    boolean hasColor();
    /**
     * <code>optional int32 color = 2;</code>
     */
    int getColor();

    /**
     * <code>optional int32 timing_start = 3;</code>
     */
    boolean hasTimingStart();
    /**
     * <code>optional int32 timing_start = 3;</code>
     */
    int getTimingStart();

    /**
     * <code>optional int32 timing_end = 4;</code>
     */
    boolean hasTimingEnd();
    /**
     * <code>optional int32 timing_end = 4;</code>
     */
    int getTimingEnd();

    /**
     * <code>optional int32 tile = 5;</code>
     */
    boolean hasTile();
    /**
     * <code>optional int32 tile = 5;</code>
     */
    int getTile();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.GrowthPrint}
   */
  public static final class GrowthPrint extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.GrowthPrint)
      GrowthPrintOrBuilder {
    // Use GrowthPrint.newBuilder() to construct.
    private GrowthPrint(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GrowthPrint(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final GrowthPrint defaultInstance;
    public static GrowthPrint getDefaultInstance() {
      return defaultInstance;
    }

    public GrowthPrint getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private GrowthPrint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              priority_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              color_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timingStart_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              timingEnd_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              tile_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<GrowthPrint> PARSER =
        new com.google.protobuf.AbstractParser<GrowthPrint>() {
      public GrowthPrint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GrowthPrint(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GrowthPrint> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PRIORITY_FIELD_NUMBER = 1;
    private int priority_;
    /**
     * <code>optional int32 priority = 1;</code>
     */
    public boolean hasPriority() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 priority = 1;</code>
     */
    public int getPriority() {
      return priority_;
    }

    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <code>optional int32 color = 2;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 color = 2;</code>
     */
    public int getColor() {
      return color_;
    }

    public static final int TIMING_START_FIELD_NUMBER = 3;
    private int timingStart_;
    /**
     * <code>optional int32 timing_start = 3;</code>
     */
    public boolean hasTimingStart() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 timing_start = 3;</code>
     */
    public int getTimingStart() {
      return timingStart_;
    }

    public static final int TIMING_END_FIELD_NUMBER = 4;
    private int timingEnd_;
    /**
     * <code>optional int32 timing_end = 4;</code>
     */
    public boolean hasTimingEnd() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 timing_end = 4;</code>
     */
    public int getTimingEnd() {
      return timingEnd_;
    }

    public static final int TILE_FIELD_NUMBER = 5;
    private int tile_;
    /**
     * <code>optional int32 tile = 5;</code>
     */
    public boolean hasTile() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 tile = 5;</code>
     */
    public int getTile() {
      return tile_;
    }

    private void initFields() {
      priority_ = 0;
      color_ = 0;
      timingStart_ = 0;
      timingEnd_ = 0;
      tile_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, priority_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, timingStart_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, timingEnd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, tile_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, priority_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, timingStart_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, timingEnd_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, tile_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.GrowthPrint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.GrowthPrint)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrintOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        priority_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timingStart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        timingEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        tile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.priority_ = priority_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timingStart_ = timingStart_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.timingEnd_ = timingEnd_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.tile_ = tile_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.getDefaultInstance()) return this;
        if (other.hasPriority()) {
          setPriority(other.getPriority());
        }
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        if (other.hasTimingStart()) {
          setTimingStart(other.getTimingStart());
        }
        if (other.hasTimingEnd()) {
          setTimingEnd(other.getTimingEnd());
        }
        if (other.hasTile()) {
          setTile(other.getTile());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int priority_ ;
      /**
       * <code>optional int32 priority = 1;</code>
       */
      public boolean hasPriority() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 priority = 1;</code>
       */
      public int getPriority() {
        return priority_;
      }
      /**
       * <code>optional int32 priority = 1;</code>
       */
      public Builder setPriority(int value) {
        bitField0_ |= 0x00000001;
        priority_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 priority = 1;</code>
       */
      public Builder clearPriority() {
        bitField0_ = (bitField0_ & ~0x00000001);
        priority_ = 0;
        
        return this;
      }

      private int color_ ;
      /**
       * <code>optional int32 color = 2;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 color = 2;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>optional int32 color = 2;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000002;
        color_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 color = 2;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        color_ = 0;
        
        return this;
      }

      private int timingStart_ ;
      /**
       * <code>optional int32 timing_start = 3;</code>
       */
      public boolean hasTimingStart() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 timing_start = 3;</code>
       */
      public int getTimingStart() {
        return timingStart_;
      }
      /**
       * <code>optional int32 timing_start = 3;</code>
       */
      public Builder setTimingStart(int value) {
        bitField0_ |= 0x00000004;
        timingStart_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 timing_start = 3;</code>
       */
      public Builder clearTimingStart() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timingStart_ = 0;
        
        return this;
      }

      private int timingEnd_ ;
      /**
       * <code>optional int32 timing_end = 4;</code>
       */
      public boolean hasTimingEnd() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 timing_end = 4;</code>
       */
      public int getTimingEnd() {
        return timingEnd_;
      }
      /**
       * <code>optional int32 timing_end = 4;</code>
       */
      public Builder setTimingEnd(int value) {
        bitField0_ |= 0x00000008;
        timingEnd_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 timing_end = 4;</code>
       */
      public Builder clearTimingEnd() {
        bitField0_ = (bitField0_ & ~0x00000008);
        timingEnd_ = 0;
        
        return this;
      }

      private int tile_ ;
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public boolean hasTile() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public int getTile() {
        return tile_;
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public Builder setTile(int value) {
        bitField0_ |= 0x00000010;
        tile_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public Builder clearTile() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tile_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.GrowthPrint)
    }

    static {
      defaultInstance = new GrowthPrint(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.GrowthPrint)
  }

  public interface TreeGrowthOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.TreeGrowth)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional int32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>optional string id = 2;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 2;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
     */
    boolean hasMat();
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMat();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> 
        getPrintsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint getPrints(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    int getPrintsCount();

    /**
     * <code>optional int32 timing_start = 6;</code>
     */
    boolean hasTimingStart();
    /**
     * <code>optional int32 timing_start = 6;</code>
     */
    int getTimingStart();

    /**
     * <code>optional int32 timing_end = 7;</code>
     */
    boolean hasTimingEnd();
    /**
     * <code>optional int32 timing_end = 7;</code>
     */
    int getTimingEnd();

    /**
     * <code>optional bool twigs = 8;</code>
     */
    boolean hasTwigs();
    /**
     * <code>optional bool twigs = 8;</code>
     */
    boolean getTwigs();

    /**
     * <code>optional bool light_branches = 9;</code>
     */
    boolean hasLightBranches();
    /**
     * <code>optional bool light_branches = 9;</code>
     */
    boolean getLightBranches();

    /**
     * <code>optional bool heavy_branches = 10;</code>
     */
    boolean hasHeavyBranches();
    /**
     * <code>optional bool heavy_branches = 10;</code>
     */
    boolean getHeavyBranches();

    /**
     * <code>optional bool trunk = 11;</code>
     */
    boolean hasTrunk();
    /**
     * <code>optional bool trunk = 11;</code>
     */
    boolean getTrunk();

    /**
     * <code>optional bool roots = 12;</code>
     */
    boolean hasRoots();
    /**
     * <code>optional bool roots = 12;</code>
     */
    boolean getRoots();

    /**
     * <code>optional bool cap = 13;</code>
     */
    boolean hasCap();
    /**
     * <code>optional bool cap = 13;</code>
     */
    boolean getCap();

    /**
     * <code>optional bool sapling = 14;</code>
     */
    boolean hasSapling();
    /**
     * <code>optional bool sapling = 14;</code>
     */
    boolean getSapling();

    /**
     * <code>optional int32 trunk_height_start = 15;</code>
     */
    boolean hasTrunkHeightStart();
    /**
     * <code>optional int32 trunk_height_start = 15;</code>
     */
    int getTrunkHeightStart();

    /**
     * <code>optional int32 trunk_height_end = 16;</code>
     */
    boolean hasTrunkHeightEnd();
    /**
     * <code>optional int32 trunk_height_end = 16;</code>
     */
    int getTrunkHeightEnd();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TreeGrowth}
   */
  public static final class TreeGrowth extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.TreeGrowth)
      TreeGrowthOrBuilder {
    // Use TreeGrowth.newBuilder() to construct.
    private TreeGrowth(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TreeGrowth(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final TreeGrowth defaultInstance;
    public static TreeGrowth getDefaultInstance() {
      return defaultInstance;
    }

    public TreeGrowth getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private TreeGrowth(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              id_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = mat_.toBuilder();
              }
              mat_ = input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mat_);
                mat_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                prints_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint>();
                mutable_bitField0_ |= 0x00000010;
              }
              prints_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.PARSER, extensionRegistry));
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              timingStart_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              timingEnd_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              twigs_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              lightBranches_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              heavyBranches_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              trunk_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              roots_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              cap_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              sapling_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00002000;
              trunkHeightStart_ = input.readInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00004000;
              trunkHeightEnd_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          prints_ = java.util.Collections.unmodifiableList(prints_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<TreeGrowth> PARSER =
        new com.google.protobuf.AbstractParser<TreeGrowth>() {
      public TreeGrowth parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TreeGrowth(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TreeGrowth> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MAT_FIELD_NUMBER = 4;
    private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair mat_;
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
     */
    public boolean hasMat() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMat() {
      return mat_;
    }

    public static final int PRINTS_FIELD_NUMBER = 5;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> prints_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> getPrintsList() {
      return prints_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrintOrBuilder> 
        getPrintsOrBuilderList() {
      return prints_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    public int getPrintsCount() {
      return prints_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint getPrints(int index) {
      return prints_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrintOrBuilder getPrintsOrBuilder(
        int index) {
      return prints_.get(index);
    }

    public static final int TIMING_START_FIELD_NUMBER = 6;
    private int timingStart_;
    /**
     * <code>optional int32 timing_start = 6;</code>
     */
    public boolean hasTimingStart() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 timing_start = 6;</code>
     */
    public int getTimingStart() {
      return timingStart_;
    }

    public static final int TIMING_END_FIELD_NUMBER = 7;
    private int timingEnd_;
    /**
     * <code>optional int32 timing_end = 7;</code>
     */
    public boolean hasTimingEnd() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 timing_end = 7;</code>
     */
    public int getTimingEnd() {
      return timingEnd_;
    }

    public static final int TWIGS_FIELD_NUMBER = 8;
    private boolean twigs_;
    /**
     * <code>optional bool twigs = 8;</code>
     */
    public boolean hasTwigs() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool twigs = 8;</code>
     */
    public boolean getTwigs() {
      return twigs_;
    }

    public static final int LIGHT_BRANCHES_FIELD_NUMBER = 9;
    private boolean lightBranches_;
    /**
     * <code>optional bool light_branches = 9;</code>
     */
    public boolean hasLightBranches() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool light_branches = 9;</code>
     */
    public boolean getLightBranches() {
      return lightBranches_;
    }

    public static final int HEAVY_BRANCHES_FIELD_NUMBER = 10;
    private boolean heavyBranches_;
    /**
     * <code>optional bool heavy_branches = 10;</code>
     */
    public boolean hasHeavyBranches() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool heavy_branches = 10;</code>
     */
    public boolean getHeavyBranches() {
      return heavyBranches_;
    }

    public static final int TRUNK_FIELD_NUMBER = 11;
    private boolean trunk_;
    /**
     * <code>optional bool trunk = 11;</code>
     */
    public boolean hasTrunk() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool trunk = 11;</code>
     */
    public boolean getTrunk() {
      return trunk_;
    }

    public static final int ROOTS_FIELD_NUMBER = 12;
    private boolean roots_;
    /**
     * <code>optional bool roots = 12;</code>
     */
    public boolean hasRoots() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool roots = 12;</code>
     */
    public boolean getRoots() {
      return roots_;
    }

    public static final int CAP_FIELD_NUMBER = 13;
    private boolean cap_;
    /**
     * <code>optional bool cap = 13;</code>
     */
    public boolean hasCap() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool cap = 13;</code>
     */
    public boolean getCap() {
      return cap_;
    }

    public static final int SAPLING_FIELD_NUMBER = 14;
    private boolean sapling_;
    /**
     * <code>optional bool sapling = 14;</code>
     */
    public boolean hasSapling() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool sapling = 14;</code>
     */
    public boolean getSapling() {
      return sapling_;
    }

    public static final int TRUNK_HEIGHT_START_FIELD_NUMBER = 15;
    private int trunkHeightStart_;
    /**
     * <code>optional int32 trunk_height_start = 15;</code>
     */
    public boolean hasTrunkHeightStart() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 trunk_height_start = 15;</code>
     */
    public int getTrunkHeightStart() {
      return trunkHeightStart_;
    }

    public static final int TRUNK_HEIGHT_END_FIELD_NUMBER = 16;
    private int trunkHeightEnd_;
    /**
     * <code>optional int32 trunk_height_end = 16;</code>
     */
    public boolean hasTrunkHeightEnd() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 trunk_height_end = 16;</code>
     */
    public int getTrunkHeightEnd() {
      return trunkHeightEnd_;
    }

    private void initFields() {
      index_ = 0;
      id_ = "";
      name_ = "";
      mat_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      prints_ = java.util.Collections.emptyList();
      timingStart_ = 0;
      timingEnd_ = 0;
      twigs_ = false;
      lightBranches_ = false;
      heavyBranches_ = false;
      trunk_ = false;
      roots_ = false;
      cap_ = false;
      sapling_ = false;
      trunkHeightStart_ = 0;
      trunkHeightEnd_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasMat()) {
        if (!getMat().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, mat_);
      }
      for (int i = 0; i < prints_.size(); i++) {
        output.writeMessage(5, prints_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, timingStart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, timingEnd_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(8, twigs_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(9, lightBranches_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(10, heavyBranches_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(11, trunk_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(12, roots_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(13, cap_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(14, sapling_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(15, trunkHeightStart_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(16, trunkHeightEnd_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, mat_);
      }
      for (int i = 0; i < prints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, prints_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, timingStart_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, timingEnd_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, twigs_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, lightBranches_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, heavyBranches_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, trunk_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, roots_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, cap_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, sapling_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, trunkHeightStart_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, trunkHeightEnd_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.TreeGrowth}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.TreeGrowth)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowthOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        mat_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        prints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        timingStart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        timingEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        twigs_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        lightBranches_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        heavyBranches_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        trunk_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        roots_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        cap_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        sapling_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        trunkHeightStart_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        trunkHeightEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mat_ = mat_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          prints_ = java.util.Collections.unmodifiableList(prints_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.prints_ = prints_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.timingStart_ = timingStart_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.timingEnd_ = timingEnd_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.twigs_ = twigs_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.lightBranches_ = lightBranches_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.heavyBranches_ = heavyBranches_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.trunk_ = trunk_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.roots_ = roots_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.cap_ = cap_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.sapling_ = sapling_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.trunkHeightStart_ = trunkHeightStart_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.trunkHeightEnd_ = trunkHeightEnd_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasId()) {
          bitField0_ |= 0x00000002;
          id_ = other.id_;
          
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (other.hasMat()) {
          mergeMat(other.getMat());
        }
        if (!other.prints_.isEmpty()) {
          if (prints_.isEmpty()) {
            prints_ = other.prints_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePrintsIsMutable();
            prints_.addAll(other.prints_);
          }
          
        }
        if (other.hasTimingStart()) {
          setTimingStart(other.getTimingStart());
        }
        if (other.hasTimingEnd()) {
          setTimingEnd(other.getTimingEnd());
        }
        if (other.hasTwigs()) {
          setTwigs(other.getTwigs());
        }
        if (other.hasLightBranches()) {
          setLightBranches(other.getLightBranches());
        }
        if (other.hasHeavyBranches()) {
          setHeavyBranches(other.getHeavyBranches());
        }
        if (other.hasTrunk()) {
          setTrunk(other.getTrunk());
        }
        if (other.hasRoots()) {
          setRoots(other.getRoots());
        }
        if (other.hasCap()) {
          setCap(other.getCap());
        }
        if (other.hasSapling()) {
          setSapling(other.getSapling());
        }
        if (other.hasTrunkHeightStart()) {
          setTrunkHeightStart(other.getTrunkHeightStart());
        }
        if (other.hasTrunkHeightEnd()) {
          setTrunkHeightEnd(other.getTrunkHeightEnd());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (hasMat()) {
          if (!getMat().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>optional int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      private com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair mat_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public boolean hasMat() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair getMat() {
        return mat_;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public Builder setMat(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (value == null) {
          throw new NullPointerException();
        }
        mat_ = value;

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public Builder setMat(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.Builder builderForValue) {
        mat_ = builderForValue.build();

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public Builder mergeMat(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            mat_ != com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance()) {
          mat_ =
            com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.newBuilder(mat_).mergeFrom(value).buildPartial();
        } else {
          mat_ = value;
        }

        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.dfhack.protobuf.RemoteFortressReader.MatPair mat = 4;</code>
       */
      public Builder clearMat() {
        mat_ = com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.MatPair.getDefaultInstance();

        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> prints_ =
        java.util.Collections.emptyList();
      private void ensurePrintsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          prints_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint>(prints_);
          bitField0_ |= 0x00000010;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> getPrintsList() {
        return java.util.Collections.unmodifiableList(prints_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public int getPrintsCount() {
        return prints_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint getPrints(int index) {
        return prints_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder setPrints(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePrintsIsMutable();
        prints_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder setPrints(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.Builder builderForValue) {
        ensurePrintsIsMutable();
        prints_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder addPrints(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePrintsIsMutable();
        prints_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder addPrints(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePrintsIsMutable();
        prints_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder addPrints(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.Builder builderForValue) {
        ensurePrintsIsMutable();
        prints_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder addPrints(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint.Builder builderForValue) {
        ensurePrintsIsMutable();
        prints_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder addAllPrints(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.GrowthPrint> values) {
        ensurePrintsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, prints_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder clearPrints() {
        prints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.GrowthPrint prints = 5;</code>
       */
      public Builder removePrints(int index) {
        ensurePrintsIsMutable();
        prints_.remove(index);

        return this;
      }

      private int timingStart_ ;
      /**
       * <code>optional int32 timing_start = 6;</code>
       */
      public boolean hasTimingStart() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 timing_start = 6;</code>
       */
      public int getTimingStart() {
        return timingStart_;
      }
      /**
       * <code>optional int32 timing_start = 6;</code>
       */
      public Builder setTimingStart(int value) {
        bitField0_ |= 0x00000020;
        timingStart_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 timing_start = 6;</code>
       */
      public Builder clearTimingStart() {
        bitField0_ = (bitField0_ & ~0x00000020);
        timingStart_ = 0;
        
        return this;
      }

      private int timingEnd_ ;
      /**
       * <code>optional int32 timing_end = 7;</code>
       */
      public boolean hasTimingEnd() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 timing_end = 7;</code>
       */
      public int getTimingEnd() {
        return timingEnd_;
      }
      /**
       * <code>optional int32 timing_end = 7;</code>
       */
      public Builder setTimingEnd(int value) {
        bitField0_ |= 0x00000040;
        timingEnd_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 timing_end = 7;</code>
       */
      public Builder clearTimingEnd() {
        bitField0_ = (bitField0_ & ~0x00000040);
        timingEnd_ = 0;
        
        return this;
      }

      private boolean twigs_ ;
      /**
       * <code>optional bool twigs = 8;</code>
       */
      public boolean hasTwigs() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool twigs = 8;</code>
       */
      public boolean getTwigs() {
        return twigs_;
      }
      /**
       * <code>optional bool twigs = 8;</code>
       */
      public Builder setTwigs(boolean value) {
        bitField0_ |= 0x00000080;
        twigs_ = value;
        
        return this;
      }
      /**
       * <code>optional bool twigs = 8;</code>
       */
      public Builder clearTwigs() {
        bitField0_ = (bitField0_ & ~0x00000080);
        twigs_ = false;
        
        return this;
      }

      private boolean lightBranches_ ;
      /**
       * <code>optional bool light_branches = 9;</code>
       */
      public boolean hasLightBranches() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool light_branches = 9;</code>
       */
      public boolean getLightBranches() {
        return lightBranches_;
      }
      /**
       * <code>optional bool light_branches = 9;</code>
       */
      public Builder setLightBranches(boolean value) {
        bitField0_ |= 0x00000100;
        lightBranches_ = value;
        
        return this;
      }
      /**
       * <code>optional bool light_branches = 9;</code>
       */
      public Builder clearLightBranches() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lightBranches_ = false;
        
        return this;
      }

      private boolean heavyBranches_ ;
      /**
       * <code>optional bool heavy_branches = 10;</code>
       */
      public boolean hasHeavyBranches() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool heavy_branches = 10;</code>
       */
      public boolean getHeavyBranches() {
        return heavyBranches_;
      }
      /**
       * <code>optional bool heavy_branches = 10;</code>
       */
      public Builder setHeavyBranches(boolean value) {
        bitField0_ |= 0x00000200;
        heavyBranches_ = value;
        
        return this;
      }
      /**
       * <code>optional bool heavy_branches = 10;</code>
       */
      public Builder clearHeavyBranches() {
        bitField0_ = (bitField0_ & ~0x00000200);
        heavyBranches_ = false;
        
        return this;
      }

      private boolean trunk_ ;
      /**
       * <code>optional bool trunk = 11;</code>
       */
      public boolean hasTrunk() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool trunk = 11;</code>
       */
      public boolean getTrunk() {
        return trunk_;
      }
      /**
       * <code>optional bool trunk = 11;</code>
       */
      public Builder setTrunk(boolean value) {
        bitField0_ |= 0x00000400;
        trunk_ = value;
        
        return this;
      }
      /**
       * <code>optional bool trunk = 11;</code>
       */
      public Builder clearTrunk() {
        bitField0_ = (bitField0_ & ~0x00000400);
        trunk_ = false;
        
        return this;
      }

      private boolean roots_ ;
      /**
       * <code>optional bool roots = 12;</code>
       */
      public boolean hasRoots() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool roots = 12;</code>
       */
      public boolean getRoots() {
        return roots_;
      }
      /**
       * <code>optional bool roots = 12;</code>
       */
      public Builder setRoots(boolean value) {
        bitField0_ |= 0x00000800;
        roots_ = value;
        
        return this;
      }
      /**
       * <code>optional bool roots = 12;</code>
       */
      public Builder clearRoots() {
        bitField0_ = (bitField0_ & ~0x00000800);
        roots_ = false;
        
        return this;
      }

      private boolean cap_ ;
      /**
       * <code>optional bool cap = 13;</code>
       */
      public boolean hasCap() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool cap = 13;</code>
       */
      public boolean getCap() {
        return cap_;
      }
      /**
       * <code>optional bool cap = 13;</code>
       */
      public Builder setCap(boolean value) {
        bitField0_ |= 0x00001000;
        cap_ = value;
        
        return this;
      }
      /**
       * <code>optional bool cap = 13;</code>
       */
      public Builder clearCap() {
        bitField0_ = (bitField0_ & ~0x00001000);
        cap_ = false;
        
        return this;
      }

      private boolean sapling_ ;
      /**
       * <code>optional bool sapling = 14;</code>
       */
      public boolean hasSapling() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool sapling = 14;</code>
       */
      public boolean getSapling() {
        return sapling_;
      }
      /**
       * <code>optional bool sapling = 14;</code>
       */
      public Builder setSapling(boolean value) {
        bitField0_ |= 0x00002000;
        sapling_ = value;
        
        return this;
      }
      /**
       * <code>optional bool sapling = 14;</code>
       */
      public Builder clearSapling() {
        bitField0_ = (bitField0_ & ~0x00002000);
        sapling_ = false;
        
        return this;
      }

      private int trunkHeightStart_ ;
      /**
       * <code>optional int32 trunk_height_start = 15;</code>
       */
      public boolean hasTrunkHeightStart() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 trunk_height_start = 15;</code>
       */
      public int getTrunkHeightStart() {
        return trunkHeightStart_;
      }
      /**
       * <code>optional int32 trunk_height_start = 15;</code>
       */
      public Builder setTrunkHeightStart(int value) {
        bitField0_ |= 0x00004000;
        trunkHeightStart_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 trunk_height_start = 15;</code>
       */
      public Builder clearTrunkHeightStart() {
        bitField0_ = (bitField0_ & ~0x00004000);
        trunkHeightStart_ = 0;
        
        return this;
      }

      private int trunkHeightEnd_ ;
      /**
       * <code>optional int32 trunk_height_end = 16;</code>
       */
      public boolean hasTrunkHeightEnd() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 trunk_height_end = 16;</code>
       */
      public int getTrunkHeightEnd() {
        return trunkHeightEnd_;
      }
      /**
       * <code>optional int32 trunk_height_end = 16;</code>
       */
      public Builder setTrunkHeightEnd(int value) {
        bitField0_ |= 0x00008000;
        trunkHeightEnd_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 trunk_height_end = 16;</code>
       */
      public Builder clearTrunkHeightEnd() {
        bitField0_ = (bitField0_ & ~0x00008000);
        trunkHeightEnd_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.TreeGrowth)
    }

    static {
      defaultInstance = new TreeGrowth(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.TreeGrowth)
  }

  public interface PlantRawOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.PlantRaw)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional int32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional int32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>optional string id = 2;</code>
     */
    boolean hasId();
    /**
     * <code>optional string id = 2;</code>
     */
    java.lang.String getId();
    /**
     * <code>optional string id = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>optional string name = 3;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> 
        getGrowthsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth getGrowths(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    int getGrowthsCount();

    /**
     * <code>optional int32 tile = 5;</code>
     */
    boolean hasTile();
    /**
     * <code>optional int32 tile = 5;</code>
     */
    int getTile();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantRaw}
   */
  public static final class PlantRaw extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.PlantRaw)
      PlantRawOrBuilder {
    // Use PlantRaw.newBuilder() to construct.
    private PlantRaw(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlantRaw(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final PlantRaw defaultInstance;
    public static PlantRaw getDefaultInstance() {
      return defaultInstance;
    }

    public PlantRaw getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private PlantRaw(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              id_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              name_ = bs;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                growths_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth>();
                mutable_bitField0_ |= 0x00000008;
              }
              growths_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.PARSER, extensionRegistry));
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              tile_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          growths_ = java.util.Collections.unmodifiableList(growths_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PlantRaw> PARSER =
        new com.google.protobuf.AbstractParser<PlantRaw>() {
      public PlantRaw parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlantRaw(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlantRaw> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional int32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int ID_FIELD_NUMBER = 2;
    private java.lang.Object id_;
    /**
     * <code>optional string id = 2;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          id_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GROWTHS_FIELD_NUMBER = 4;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> growths_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> getGrowthsList() {
      return growths_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowthOrBuilder> 
        getGrowthsOrBuilderList() {
      return growths_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    public int getGrowthsCount() {
      return growths_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth getGrowths(int index) {
      return growths_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowthOrBuilder getGrowthsOrBuilder(
        int index) {
      return growths_.get(index);
    }

    public static final int TILE_FIELD_NUMBER = 5;
    private int tile_;
    /**
     * <code>optional int32 tile = 5;</code>
     */
    public boolean hasTile() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 tile = 5;</code>
     */
    public int getTile() {
      return tile_;
    }

    private void initFields() {
      index_ = 0;
      id_ = "";
      name_ = "";
      growths_ = java.util.Collections.emptyList();
      tile_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getGrowthsCount(); i++) {
        if (!getGrowths(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      for (int i = 0; i < growths_.size(); i++) {
        output.writeMessage(4, growths_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, tile_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      for (int i = 0; i < growths_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, growths_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, tile_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantRaw}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.PlantRaw)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        growths_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        tile_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          growths_ = java.util.Collections.unmodifiableList(growths_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.growths_ = growths_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tile_ = tile_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasId()) {
          bitField0_ |= 0x00000002;
          id_ = other.id_;
          
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          
        }
        if (!other.growths_.isEmpty()) {
          if (growths_.isEmpty()) {
            growths_ = other.growths_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureGrowthsIsMutable();
            growths_.addAll(other.growths_);
          }
          
        }
        if (other.hasTile()) {
          setTile(other.getTile());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getGrowthsCount(); i++) {
          if (!getGrowths(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>optional int32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <code>optional string id = 2;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        id_ = getDefaultInstance().getId();
        
        return this;
      }
      /**
       * <code>optional string id = 2;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        id_ = value;
        
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> growths_ =
        java.util.Collections.emptyList();
      private void ensureGrowthsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          growths_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth>(growths_);
          bitField0_ |= 0x00000008;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> getGrowthsList() {
        return java.util.Collections.unmodifiableList(growths_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public int getGrowthsCount() {
        return growths_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth getGrowths(int index) {
        return growths_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder setGrowths(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrowthsIsMutable();
        growths_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder setGrowths(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.Builder builderForValue) {
        ensureGrowthsIsMutable();
        growths_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder addGrowths(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrowthsIsMutable();
        growths_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder addGrowths(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGrowthsIsMutable();
        growths_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder addGrowths(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.Builder builderForValue) {
        ensureGrowthsIsMutable();
        growths_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder addGrowths(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth.Builder builderForValue) {
        ensureGrowthsIsMutable();
        growths_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder addAllGrowths(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.TreeGrowth> values) {
        ensureGrowthsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, growths_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder clearGrowths() {
        growths_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.TreeGrowth growths = 4;</code>
       */
      public Builder removeGrowths(int index) {
        ensureGrowthsIsMutable();
        growths_.remove(index);

        return this;
      }

      private int tile_ ;
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public boolean hasTile() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public int getTile() {
        return tile_;
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public Builder setTile(int value) {
        bitField0_ |= 0x00000010;
        tile_ = value;
        
        return this;
      }
      /**
       * <code>optional int32 tile = 5;</code>
       */
      public Builder clearTile() {
        bitField0_ = (bitField0_ & ~0x00000010);
        tile_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.PlantRaw)
    }

    static {
      defaultInstance = new PlantRaw(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.PlantRaw)
  }

  public interface PlantRawListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.PlantRawList)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> 
        getPlantRawsList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw getPlantRaws(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    int getPlantRawsCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantRawList}
   */
  public static final class PlantRawList extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.PlantRawList)
      PlantRawListOrBuilder {
    // Use PlantRawList.newBuilder() to construct.
    private PlantRawList(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlantRawList(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final PlantRawList defaultInstance;
    public static PlantRawList getDefaultInstance() {
      return defaultInstance;
    }

    public PlantRawList getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private PlantRawList(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                plantRaws_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw>();
                mutable_bitField0_ |= 0x00000001;
              }
              plantRaws_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          plantRaws_ = java.util.Collections.unmodifiableList(plantRaws_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<PlantRawList> PARSER =
        new com.google.protobuf.AbstractParser<PlantRawList>() {
      public PlantRawList parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlantRawList(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlantRawList> getParserForType() {
      return PARSER;
    }

    public static final int PLANT_RAWS_FIELD_NUMBER = 1;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> plantRaws_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> getPlantRawsList() {
      return plantRaws_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawOrBuilder> 
        getPlantRawsOrBuilderList() {
      return plantRaws_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    public int getPlantRawsCount() {
      return plantRaws_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw getPlantRaws(int index) {
      return plantRaws_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawOrBuilder getPlantRawsOrBuilder(
        int index) {
      return plantRaws_.get(index);
    }

    private void initFields() {
      plantRaws_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPlantRawsCount(); i++) {
        if (!getPlantRaws(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < plantRaws_.size(); i++) {
        output.writeMessage(1, plantRaws_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < plantRaws_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, plantRaws_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.PlantRawList}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.PlantRawList)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawListOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        plantRaws_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          plantRaws_ = java.util.Collections.unmodifiableList(plantRaws_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.plantRaws_ = plantRaws_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList.getDefaultInstance()) return this;
        if (!other.plantRaws_.isEmpty()) {
          if (plantRaws_.isEmpty()) {
            plantRaws_ = other.plantRaws_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePlantRawsIsMutable();
            plantRaws_.addAll(other.plantRaws_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPlantRawsCount(); i++) {
          if (!getPlantRaws(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRawList) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> plantRaws_ =
        java.util.Collections.emptyList();
      private void ensurePlantRawsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          plantRaws_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw>(plantRaws_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> getPlantRawsList() {
        return java.util.Collections.unmodifiableList(plantRaws_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public int getPlantRawsCount() {
        return plantRaws_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw getPlantRaws(int index) {
        return plantRaws_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder setPlantRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantRawsIsMutable();
        plantRaws_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder setPlantRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.Builder builderForValue) {
        ensurePlantRawsIsMutable();
        plantRaws_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder addPlantRaws(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantRawsIsMutable();
        plantRaws_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder addPlantRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePlantRawsIsMutable();
        plantRaws_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder addPlantRaws(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.Builder builderForValue) {
        ensurePlantRawsIsMutable();
        plantRaws_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder addPlantRaws(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw.Builder builderForValue) {
        ensurePlantRawsIsMutable();
        plantRaws_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder addAllPlantRaws(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.PlantRaw> values) {
        ensurePlantRawsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, plantRaws_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder clearPlantRaws() {
        plantRaws_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.PlantRaw plant_raws = 1;</code>
       */
      public Builder removePlantRaws(int index) {
        ensurePlantRawsIsMutable();
        plantRaws_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.PlantRawList)
    }

    static {
      defaultInstance = new PlantRawList(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.PlantRawList)
  }

  public interface ScreenTileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ScreenTile)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 character = 1;</code>
     */
    boolean hasCharacter();
    /**
     * <code>optional uint32 character = 1;</code>
     */
    int getCharacter();

    /**
     * <code>optional uint32 foreground = 2;</code>
     */
    boolean hasForeground();
    /**
     * <code>optional uint32 foreground = 2;</code>
     */
    int getForeground();

    /**
     * <code>optional uint32 background = 3;</code>
     */
    boolean hasBackground();
    /**
     * <code>optional uint32 background = 3;</code>
     */
    int getBackground();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ScreenTile}
   */
  public static final class ScreenTile extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ScreenTile)
      ScreenTileOrBuilder {
    // Use ScreenTile.newBuilder() to construct.
    private ScreenTile(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ScreenTile(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ScreenTile defaultInstance;
    public static ScreenTile getDefaultInstance() {
      return defaultInstance;
    }

    public ScreenTile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ScreenTile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              character_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              foreground_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              background_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ScreenTile> PARSER =
        new com.google.protobuf.AbstractParser<ScreenTile>() {
      public ScreenTile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ScreenTile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ScreenTile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHARACTER_FIELD_NUMBER = 1;
    private int character_;
    /**
     * <code>optional uint32 character = 1;</code>
     */
    public boolean hasCharacter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 character = 1;</code>
     */
    public int getCharacter() {
      return character_;
    }

    public static final int FOREGROUND_FIELD_NUMBER = 2;
    private int foreground_;
    /**
     * <code>optional uint32 foreground = 2;</code>
     */
    public boolean hasForeground() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 foreground = 2;</code>
     */
    public int getForeground() {
      return foreground_;
    }

    public static final int BACKGROUND_FIELD_NUMBER = 3;
    private int background_;
    /**
     * <code>optional uint32 background = 3;</code>
     */
    public boolean hasBackground() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 background = 3;</code>
     */
    public int getBackground() {
      return background_;
    }

    private void initFields() {
      character_ = 0;
      foreground_ = 0;
      background_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, character_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, foreground_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, background_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, character_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, foreground_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, background_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ScreenTile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ScreenTile)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTileOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        character_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        foreground_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        background_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.character_ = character_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.foreground_ = foreground_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.background_ = background_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.getDefaultInstance()) return this;
        if (other.hasCharacter()) {
          setCharacter(other.getCharacter());
        }
        if (other.hasForeground()) {
          setForeground(other.getForeground());
        }
        if (other.hasBackground()) {
          setBackground(other.getBackground());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int character_ ;
      /**
       * <code>optional uint32 character = 1;</code>
       */
      public boolean hasCharacter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 character = 1;</code>
       */
      public int getCharacter() {
        return character_;
      }
      /**
       * <code>optional uint32 character = 1;</code>
       */
      public Builder setCharacter(int value) {
        bitField0_ |= 0x00000001;
        character_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 character = 1;</code>
       */
      public Builder clearCharacter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        character_ = 0;
        
        return this;
      }

      private int foreground_ ;
      /**
       * <code>optional uint32 foreground = 2;</code>
       */
      public boolean hasForeground() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 foreground = 2;</code>
       */
      public int getForeground() {
        return foreground_;
      }
      /**
       * <code>optional uint32 foreground = 2;</code>
       */
      public Builder setForeground(int value) {
        bitField0_ |= 0x00000002;
        foreground_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 foreground = 2;</code>
       */
      public Builder clearForeground() {
        bitField0_ = (bitField0_ & ~0x00000002);
        foreground_ = 0;
        
        return this;
      }

      private int background_ ;
      /**
       * <code>optional uint32 background = 3;</code>
       */
      public boolean hasBackground() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 background = 3;</code>
       */
      public int getBackground() {
        return background_;
      }
      /**
       * <code>optional uint32 background = 3;</code>
       */
      public Builder setBackground(int value) {
        bitField0_ |= 0x00000004;
        background_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 background = 3;</code>
       */
      public Builder clearBackground() {
        bitField0_ = (bitField0_ & ~0x00000004);
        background_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ScreenTile)
    }

    static {
      defaultInstance = new ScreenTile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ScreenTile)
  }

  public interface ScreenCaptureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.ScreenCapture)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 width = 1;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional uint32 width = 1;</code>
     */
    int getWidth();

    /**
     * <code>optional uint32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional uint32 height = 2;</code>
     */
    int getHeight();

    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> 
        getTilesList();
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile getTiles(int index);
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    int getTilesCount();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ScreenCapture}
   */
  public static final class ScreenCapture extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.ScreenCapture)
      ScreenCaptureOrBuilder {
    // Use ScreenCapture.newBuilder() to construct.
    private ScreenCapture(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ScreenCapture(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ScreenCapture defaultInstance;
    public static ScreenCapture getDefaultInstance() {
      return defaultInstance;
    }

    public ScreenCapture getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ScreenCapture(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              width_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile>();
                mutable_bitField0_ |= 0x00000004;
              }
              tiles_.add(input.readMessage(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
        }
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ScreenCapture> PARSER =
        new com.google.protobuf.AbstractParser<ScreenCapture>() {
      public ScreenCapture parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ScreenCapture(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ScreenCapture> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <code>optional uint32 width = 1;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 width = 1;</code>
     */
    public int getWidth() {
      return width_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional uint32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int TILES_FIELD_NUMBER = 3;
    private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> tiles_;
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> getTilesList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    public java.util.List<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTileOrBuilder> 
        getTilesOrBuilderList() {
      return tiles_;
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    public int getTilesCount() {
      return tiles_.size();
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile getTiles(int index) {
      return tiles_.get(index);
    }
    /**
     * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
     */
    public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTileOrBuilder getTilesOrBuilder(
        int index) {
      return tiles_.get(index);
    }

    private void initFields() {
      width_ = 0;
      height_ = 0;
      tiles_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, height_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        output.writeMessage(3, tiles_.get(i));
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, height_);
      }
      for (int i = 0; i < tiles_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, tiles_.get(i));
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.ScreenCapture}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.ScreenCapture)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCaptureOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = java.util.Collections.unmodifiableList(tiles_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.tiles_ = tiles_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (!other.tiles_.isEmpty()) {
          if (tiles_.isEmpty()) {
            tiles_ = other.tiles_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTilesIsMutable();
            tiles_.addAll(other.tiles_);
          }
          
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenCapture) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int width_ ;
      /**
       * <code>optional uint32 width = 1;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 width = 1;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional uint32 width = 1;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 width = 1;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0;
        
        return this;
      }

      private int height_ ;
      /**
       * <code>optional uint32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional uint32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        
        return this;
      }

      private java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> tiles_ =
        java.util.Collections.emptyList();
      private void ensureTilesIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          tiles_ = new java.util.ArrayList<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile>(tiles_);
          bitField0_ |= 0x00000004;
         }
      }

      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public java.util.List<com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> getTilesList() {
        return java.util.Collections.unmodifiableList(tiles_);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public int getTilesCount() {
        return tiles_.size();
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile getTiles(int index) {
        return tiles_.get(index);
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder setTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder setTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder addTiles(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.add(value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder addTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTilesIsMutable();
        tiles_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder addTiles(
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder addTiles(
          int index, com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile.Builder builderForValue) {
        ensureTilesIsMutable();
        tiles_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder addAllTiles(
          java.lang.Iterable<? extends com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.ScreenTile> values) {
        ensureTilesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tiles_);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder clearTiles() {
        tiles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);

        return this;
      }
      /**
       * <code>repeated .com.dfhack.protobuf.RemoteFortressReader.ScreenTile tiles = 3;</code>
       */
      public Builder removeTiles(int index) {
        ensureTilesIsMutable();
        tiles_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.ScreenCapture)
    }

    static {
      defaultInstance = new ScreenCapture(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.ScreenCapture)
  }

  public interface KeyboardEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional uint32 type = 1;</code>
     */
    int getType();

    /**
     * <code>optional uint32 which = 2;</code>
     */
    boolean hasWhich();
    /**
     * <code>optional uint32 which = 2;</code>
     */
    int getWhich();

    /**
     * <code>optional uint32 state = 3;</code>
     */
    boolean hasState();
    /**
     * <code>optional uint32 state = 3;</code>
     */
    int getState();

    /**
     * <code>optional uint32 scancode = 4;</code>
     */
    boolean hasScancode();
    /**
     * <code>optional uint32 scancode = 4;</code>
     */
    int getScancode();

    /**
     * <code>optional uint32 sym = 5;</code>
     */
    boolean hasSym();
    /**
     * <code>optional uint32 sym = 5;</code>
     */
    int getSym();

    /**
     * <code>optional uint32 mod = 6;</code>
     */
    boolean hasMod();
    /**
     * <code>optional uint32 mod = 6;</code>
     */
    int getMod();

    /**
     * <code>optional uint32 unicode = 7;</code>
     */
    boolean hasUnicode();
    /**
     * <code>optional uint32 unicode = 7;</code>
     */
    int getUnicode();
  }
  /**
   * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent}
   */
  public static final class KeyboardEvent extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent)
      KeyboardEventOrBuilder {
    // Use KeyboardEvent.newBuilder() to construct.
    private KeyboardEvent(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private KeyboardEvent(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final KeyboardEvent defaultInstance;
    public static KeyboardEvent getDefaultInstance() {
      return defaultInstance;
    }

    public KeyboardEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private KeyboardEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              which_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              state_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              scancode_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              sym_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mod_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              unicode_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<KeyboardEvent> PARSER =
        new com.google.protobuf.AbstractParser<KeyboardEvent>() {
      public KeyboardEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeyboardEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<KeyboardEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional uint32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }

    public static final int WHICH_FIELD_NUMBER = 2;
    private int which_;
    /**
     * <code>optional uint32 which = 2;</code>
     */
    public boolean hasWhich() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 which = 2;</code>
     */
    public int getWhich() {
      return which_;
    }

    public static final int STATE_FIELD_NUMBER = 3;
    private int state_;
    /**
     * <code>optional uint32 state = 3;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 state = 3;</code>
     */
    public int getState() {
      return state_;
    }

    public static final int SCANCODE_FIELD_NUMBER = 4;
    private int scancode_;
    /**
     * <code>optional uint32 scancode = 4;</code>
     */
    public boolean hasScancode() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 scancode = 4;</code>
     */
    public int getScancode() {
      return scancode_;
    }

    public static final int SYM_FIELD_NUMBER = 5;
    private int sym_;
    /**
     * <code>optional uint32 sym = 5;</code>
     */
    public boolean hasSym() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 sym = 5;</code>
     */
    public int getSym() {
      return sym_;
    }

    public static final int MOD_FIELD_NUMBER = 6;
    private int mod_;
    /**
     * <code>optional uint32 mod = 6;</code>
     */
    public boolean hasMod() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 mod = 6;</code>
     */
    public int getMod() {
      return mod_;
    }

    public static final int UNICODE_FIELD_NUMBER = 7;
    private int unicode_;
    /**
     * <code>optional uint32 unicode = 7;</code>
     */
    public boolean hasUnicode() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 unicode = 7;</code>
     */
    public int getUnicode() {
      return unicode_;
    }

    private void initFields() {
      type_ = 0;
      which_ = 0;
      state_ = 0;
      scancode_ = 0;
      sym_ = 0;
      mod_ = 0;
      unicode_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, which_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, state_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, scancode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, sym_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, mod_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, unicode_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, which_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, state_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, scancode_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, sym_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, mod_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, unicode_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent)
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEventOrBuilder {
      // Construct using com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        which_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        scancode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        sym_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mod_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        unicode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent getDefaultInstanceForType() {
        return com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent.getDefaultInstance();
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent build() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent buildPartial() {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent result = new com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.which_ = which_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.scancode_ = scancode_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.sym_ = sym_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mod_ = mod_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.unicode_ = unicode_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent other) {
        if (other == com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasWhich()) {
          setWhich(other.getWhich());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasScancode()) {
          setScancode(other.getScancode());
        }
        if (other.hasSym()) {
          setSym(other.getSym());
        }
        if (other.hasMod()) {
          setMod(other.getMod());
        }
        if (other.hasUnicode()) {
          setUnicode(other.getUnicode());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dfhack.protobuf.RemoteFortressReader.RemoteFortressReader.KeyboardEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int type_ ;
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        
        return this;
      }

      private int which_ ;
      /**
       * <code>optional uint32 which = 2;</code>
       */
      public boolean hasWhich() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 which = 2;</code>
       */
      public int getWhich() {
        return which_;
      }
      /**
       * <code>optional uint32 which = 2;</code>
       */
      public Builder setWhich(int value) {
        bitField0_ |= 0x00000002;
        which_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 which = 2;</code>
       */
      public Builder clearWhich() {
        bitField0_ = (bitField0_ & ~0x00000002);
        which_ = 0;
        
        return this;
      }

      private int state_ ;
      /**
       * <code>optional uint32 state = 3;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 state = 3;</code>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>optional uint32 state = 3;</code>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000004;
        state_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 state = 3;</code>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000004);
        state_ = 0;
        
        return this;
      }

      private int scancode_ ;
      /**
       * <code>optional uint32 scancode = 4;</code>
       */
      public boolean hasScancode() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 scancode = 4;</code>
       */
      public int getScancode() {
        return scancode_;
      }
      /**
       * <code>optional uint32 scancode = 4;</code>
       */
      public Builder setScancode(int value) {
        bitField0_ |= 0x00000008;
        scancode_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 scancode = 4;</code>
       */
      public Builder clearScancode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scancode_ = 0;
        
        return this;
      }

      private int sym_ ;
      /**
       * <code>optional uint32 sym = 5;</code>
       */
      public boolean hasSym() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 sym = 5;</code>
       */
      public int getSym() {
        return sym_;
      }
      /**
       * <code>optional uint32 sym = 5;</code>
       */
      public Builder setSym(int value) {
        bitField0_ |= 0x00000010;
        sym_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 sym = 5;</code>
       */
      public Builder clearSym() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sym_ = 0;
        
        return this;
      }

      private int mod_ ;
      /**
       * <code>optional uint32 mod = 6;</code>
       */
      public boolean hasMod() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 mod = 6;</code>
       */
      public int getMod() {
        return mod_;
      }
      /**
       * <code>optional uint32 mod = 6;</code>
       */
      public Builder setMod(int value) {
        bitField0_ |= 0x00000020;
        mod_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 mod = 6;</code>
       */
      public Builder clearMod() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mod_ = 0;
        
        return this;
      }

      private int unicode_ ;
      /**
       * <code>optional uint32 unicode = 7;</code>
       */
      public boolean hasUnicode() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 unicode = 7;</code>
       */
      public int getUnicode() {
        return unicode_;
      }
      /**
       * <code>optional uint32 unicode = 7;</code>
       */
      public Builder setUnicode(int value) {
        bitField0_ |= 0x00000040;
        unicode_ = value;
        
        return this;
      }
      /**
       * <code>optional uint32 unicode = 7;</code>
       */
      public Builder clearUnicode() {
        bitField0_ = (bitField0_ & ~0x00000040);
        unicode_ = 0;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent)
    }

    static {
      defaultInstance = new KeyboardEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.dfhack.protobuf.RemoteFortressReader.KeyboardEvent)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
